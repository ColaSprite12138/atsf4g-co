# ============ export - [...] ============
get_filename_component(EXPORT_SRC_BIN_NAME ${CMAKE_CURRENT_LIST_DIR} NAME_WE)
if(WIN32
   AND NOT MINGW
   AND NOT CYGWIN)
  set(EXPORT_SRC_BIN_NAME ${EXPORT_LIBATGW_INNER_V1_C_BIN_NAME})
else()
  set(EXPORT_SRC_BIN_NAME ${EXPORT_LIBATGW_INNER_V1_C_BIN_NAME})
endif()

echowithcolor(COLOR GREEN "-- Configure ${EXPORT_SRC_BIN_NAME} on ${CMAKE_CURRENT_LIST_DIR}")

aux_source_directory(${CMAKE_CURRENT_LIST_DIR} EXPORT_SRC_LIST)

unset(EXPORT_TARGET_PUBLIC_LINK_NAMES)
unset(EXPORT_TARGET_PUBLIC_INCLUDE_DIRS)
unset(EXPORT_TARGET_PUBLIC_DEFINITIONS)

# special setting for libatgw_inner_v1_c
list(APPEND EXPORT_TARGET_PUBLIC_DEFINITIONS ATBUS_MACRO_MSG_LIMIT=${ATBUS_MACRO_MSG_LIMIT})

list(APPEND EXPORT_SRC_LIST ${ATFRAMEWORK_SERVICE_GATEWAY_PROTOCOL_DIR}/proto_base.cpp)
list(APPEND EXPORT_SRC_LIST ${ATFRAMEWORK_SERVICE_GATEWAY_PROTOCOL_DIR}/inner_v1/libatgw_proto_inner.cpp)
list(APPEND EXPORT_SRC_LIST ${ATFRAMEWORK_ATFRAME_UTILS_REPO_DIR}/src/algorithm/xxtea.cpp)
list(APPEND EXPORT_SRC_LIST ${ATFRAMEWORK_ATFRAME_UTILS_REPO_DIR}/src/algorithm/crypto_cipher.cpp)
list(APPEND EXPORT_SRC_LIST ${ATFRAMEWORK_ATFRAME_UTILS_REPO_DIR}/src/algorithm/crypto_dh.cpp)
list(APPEND EXPORT_SRC_LIST ${ATFRAMEWORK_ATFRAME_UTILS_REPO_DIR}/src/algorithm/murmur_hash.cpp)
list(APPEND EXPORT_SRC_LIST ${ATFRAMEWORK_LIBATBUS_REPO_DIR}/src/detail/buffer.cpp)

set(EXPORT_SOURCE_DIR "${PROJECT_BINARY_DIR}/export/${EXPORT_SRC_BIN_NAME}")
set(EXPORT_SOURCE_INC_DIR "${EXPORT_SOURCE_DIR}/include")
set(EXPORT_SOURCE_INC_CFG_DIR "${EXPORT_SOURCE_INC_DIR}/config")
set(EXPORT_SOURCE_SRC_DIR "${EXPORT_SOURCE_DIR}/src")
set(EXPORT_SOURCE_CMAKE_DIR "${EXPORT_SOURCE_DIR}/cmake_modules")
file(MAKE_DIRECTORY ${EXPORT_SOURCE_INC_DIR})
file(MAKE_DIRECTORY ${EXPORT_SOURCE_INC_CFG_DIR})
file(MAKE_DIRECTORY ${EXPORT_SOURCE_SRC_DIR})
file(MAKE_DIRECTORY ${EXPORT_SOURCE_CMAKE_DIR})

# ===== For inner protocol, some macro may has effect on code: ATFRAME_GATEWAY_MACRO_DATA_SMALL_SIZE: used for merge
# small package(default: 3072) ATBUS_MACRO_MSG_LIMIT: max message length, can not be greater than it in
# atgateway(default: 262144,256K)

# ----- copy dependency utility files -----
file(
  COPY "${ATFRAMEWORK_CMAKE_TOOLSET_THIRD_PARTY_FLATBUFFER_INC_DIR}/flatbuffers"
       "${ATFRAMEWORK_ATFRAME_UTILS_REPO_DIR}/include/std"
       "${ATFRAMEWORK_ATFRAME_UTILS_REPO_DIR}/include/lock"
       "${ATFRAMEWORK_ATFRAME_UTILS_REPO_DIR}/include/design_pattern"
       "${ATFRAMEWORK_ATFRAME_UTILS_REPO_DIR}/include/algorithm"
  DESTINATION ${EXPORT_SOURCE_SRC_DIR}
  USE_SOURCE_PERMISSIONS)

file(MAKE_DIRECTORY "${EXPORT_SOURCE_SRC_DIR}/config")
file(
  COPY "${ATFRAMEWORK_ATFRAME_UTILS_REPO_DIR}/include/config/compile_optimize.h"
  DESTINATION ${EXPORT_SOURCE_INC_CFG_DIR}
  USE_SOURCE_PERMISSIONS)
file(
  COPY "${ATFRAMEWORK_ATFRAME_UTILS_REPO_DIR}/include/config/compiler_features.h"
       "${ATFRAMEWORK_ATFRAME_UTILS_REPO_DIR}/include/config/atframe_utils_build_feature.h.in"
  DESTINATION "${EXPORT_SOURCE_SRC_DIR}/config"
  USE_SOURCE_PERMISSIONS)

file(MAKE_DIRECTORY "${EXPORT_SOURCE_SRC_DIR}/common")
file(
  COPY "${ATFRAMEWORK_ATFRAME_UTILS_REPO_DIR}/include/common/string_oprs.h"
       "${ATFRAMEWORK_ATFRAME_UTILS_REPO_DIR}/include/common/compiler_message.h"
       "${ATFRAMEWORK_ATFRAME_UTILS_REPO_DIR}/include/common/file_system.h"
       "${ATFRAMEWORK_ATFRAME_UTILS_REPO_DIR}/src/common/file_system.cpp"
  DESTINATION "${EXPORT_SOURCE_SRC_DIR}/common"
  USE_SOURCE_PERMISSIONS)

file(
  COPY "${ATFRAMEWORK_ATFRAME_UTILS_REPO_DIR}/src/algorithm"
  DESTINATION ${EXPORT_SOURCE_SRC_DIR}
  USE_SOURCE_PERMISSIONS)

# ----- copy dependency atbus files -----
file(MAKE_DIRECTORY "${EXPORT_SOURCE_SRC_DIR}/detail")
file(
  COPY "${ATFRAMEWORK_LIBATBUS_REPO_DIR}/include/detail/buffer.h"
       "${ATFRAMEWORK_LIBATBUS_REPO_DIR}/include/detail/libatbus_config.h.in"
       "${ATFRAMEWORK_LIBATBUS_REPO_DIR}/include/detail/libatbus_error.h"
  DESTINATION "${EXPORT_SOURCE_SRC_DIR}/detail"
  USE_SOURCE_PERMISSIONS)

file(MAKE_DIRECTORY "${EXPORT_SOURCE_SRC_DIR}/detail")
file(
  COPY "${ATFRAMEWORK_LIBATBUS_REPO_DIR}/src/detail/buffer.cpp"
  DESTINATION "${EXPORT_SOURCE_SRC_DIR}/detail"
  USE_SOURCE_PERMISSIONS)

# ----- copy dependency atgateway protocol files -----
file(
  COPY "${ATFRAMEWORK_SERVICE_GATEWAY_PROTOCOL_DIR}"
  DESTINATION ${EXPORT_SOURCE_SRC_DIR}
  USE_SOURCE_PERMISSIONS FILES_MATCHING
  PATTERN "*.h")

file(
  COPY "${ATFRAMEWORK_SERVICE_GATEWAY_PROTOCOL_DIR}"
  DESTINATION ${EXPORT_SOURCE_SRC_DIR}
  USE_SOURCE_PERMISSIONS FILES_MATCHING
  PATTERN "*.cpp")

# ----- copy this project's files -----
file(
  COPY "${CMAKE_CURRENT_LIST_DIR}/libatgw_inner_v1_c.h"
  DESTINATION ${EXPORT_SOURCE_INC_DIR}
  USE_SOURCE_PERMISSIONS)

file(
  COPY "${CMAKE_CURRENT_LIST_DIR}/libatgw_inner_v1_c.cpp"
  DESTINATION ${EXPORT_SOURCE_SRC_DIR}
  USE_SOURCE_PERMISSIONS)

# ----- copy cmake files -----
file(
  COPY "${ATFRAMEWORK_CMAKE_TOOLSET_DIR}/modules/EchoWithColor.cmake"
  DESTINATION ${EXPORT_SOURCE_CMAKE_DIR}
  USE_SOURCE_PERMISSIONS)
file(
  COPY "${ATFRAMEWORK_CMAKE_TOOLSET_DIR}/modules/print_color.py"
  DESTINATION ${EXPORT_SOURCE_CMAKE_DIR}
  USE_SOURCE_PERMISSIONS)
file(
  COPY "${ATFRAMEWORK_CMAKE_TOOLSET_DIR}/modules/FindConfigurePackage.cmake"
  DESTINATION ${EXPORT_SOURCE_CMAKE_DIR}
  USE_SOURCE_PERMISSIONS)
file(
  COPY "${ATFRAMEWORK_CMAKE_TOOLSET_DIR}/CompilerOption.cmake"
  DESTINATION ${EXPORT_SOURCE_CMAKE_DIR}
  USE_SOURCE_PERMISSIONS)
file(
  COPY "${ATFRAMEWORK_CMAKE_TOOLSET_DIR}/modules/FindMbedTLS.cmake"
  DESTINATION ${EXPORT_SOURCE_CMAKE_DIR}
  USE_SOURCE_PERMISSIONS)
if(LIBRESSL_FOUND AND EXISTS "${PROJECT_THIRD_PARTY_INSTALL_CMAKE_MODULE_DIR}/FindLibreSSL.cmake")
  file(
    COPY "${PROJECT_THIRD_PARTY_INSTALL_CMAKE_MODULE_DIR}/FindLibreSSL.cmake"
    DESTINATION ${EXPORT_SOURCE_CMAKE_DIR}
    USE_SOURCE_PERMISSIONS)
endif()
file(
  COPY "${ATFRAMEWORK_CMAKE_TOOLSET_DIR}/modules/FindLibsodium.cmake"
  DESTINATION ${EXPORT_SOURCE_CMAKE_DIR}
  USE_SOURCE_PERMISSIONS)
file(
  COPY "${CMAKE_CURRENT_LIST_DIR}/CMakeLists.export.txt"
  DESTINATION ${EXPORT_SOURCE_DIR}
  USE_SOURCE_PERMISSIONS)
file(RENAME "${EXPORT_SOURCE_DIR}/CMakeLists.export.txt" "${EXPORT_SOURCE_DIR}/CMakeLists.txt")

# ----- copy script files -----
file(
  COPY "${CMAKE_CURRENT_LIST_DIR}/build_ios.sh"
  DESTINATION ${EXPORT_SOURCE_DIR}
  USE_SOURCE_PERMISSIONS)
file(
  COPY "${CMAKE_CURRENT_LIST_DIR}/build_android.sh"
  DESTINATION ${EXPORT_SOURCE_DIR}
  USE_SOURCE_PERMISSIONS)

if(BUILD_SHARED_LIBS OR NOT MINGW)
  add_library(${EXPORT_SRC_BIN_NAME} SHARED ${EXPORT_SRC_LIST})
  set_target_properties(
    ${EXPORT_SRC_BIN_NAME}
    PROPERTIES C_VISIBILITY_PRESET "hidden"
               CXX_VISIBILITY_PRESET "hidden"
               VERSION ${ATFRAMEWORK_SERVICE_GATEWAY_VERSION}
               SOVERSION ${ATFRAMEWORK_SERVICE_GATEWAY_VERSION}
               INTERFACE_COMPILE_DEFINITIONS LIBATFRAME_UTILS_API_DLL=1)
  target_compile_definitions(${EXPORT_SRC_BIN_NAME} PRIVATE LIBATFRAME_UTILS_API_NATIVE=1 LIBATFRAME_UTILS_API_DLL=1)
else()
  add_library(${EXPORT_SRC_BIN_NAME} STATIC ${EXPORT_SRC_LIST})
  set_target_properties(
    ${EXPORT_SRC_BIN_NAME}
    PROPERTIES C_VISIBILITY_PRESET "hidden"
               CXX_VISIBILITY_PRESET "hidden"
               VERSION ${ATFRAMEWORK_SERVICE_GATEWAY_VERSION})
  target_compile_definitions(${EXPORT_SRC_BIN_NAME} PRIVATE LIBATFRAME_UTILS_API_NATIVE=1)
endif()

list(APPEND EXPORT_TARGET_PUBLIC_LINK_NAMES ${ATFRAMEWORK_ATFRAME_UTILS_LINK_NAME})

if(WIN32)
  list(APPEND EXPORT_TARGET_PUBLIC_LINK_NAMES psapi)
endif()

target_link_libraries(${EXPORT_SRC_BIN_NAME} PUBLIC ${EXPORT_TARGET_PUBLIC_LINK_NAMES})

target_compile_options(${EXPORT_SRC_BIN_NAME} PRIVATE ${ATFRAMEWORK_EXPORT_PRIVATE_OPTIONS})

target_include_directories(
  ${EXPORT_SRC_BIN_NAME}
  PUBLIC "$<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}>" "$<BUILD_INTERFACE:${ATFRAMEWORK_SERVICE_GATEWAY_PROTOCOL_DIR}>"
         "$<BUILD_INTERFACE:${ATFRAMEWORK_SERVICE_COMPONENT_DIR}>" "$<INSTALL_INTERFACE:include>"
  PRIVATE "$<BUILD_INTERFACE:${ATFRAMEWORK_LIBATBUS_REPO_DIR}/include>"
          "$<BUILD_INTERFACE:${ATFRAMEWORK_CMAKE_TOOLSET_THIRD_PARTY_PUBLIC_INCLUDE_DIRS}>")

target_compile_definitions(${EXPORT_SRC_BIN_NAME} PUBLIC ${EXPORT_TARGET_PUBLIC_DEFINITIONS})

if(MSVC)
  set_property(TARGET ${EXPORT_SRC_BIN_NAME} PROPERTY FOLDER "atframework/export")
endif(MSVC)

install(
  TARGETS ${EXPORT_SRC_BIN_NAME}
  EXPORT "${EXPORT_SRC_BIN_NAME}-target"
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})

export(
  TARGETS ${EXPORT_SRC_BIN_NAME}
  NAMESPACE "atframework::"
  FILE "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/cmake/${EXPORT_SRC_BIN_NAME}-target.cmake")

install(
  EXPORT "${EXPORT_SRC_BIN_NAME}-target"
  NAMESPACE "atframework::"
  DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake")
