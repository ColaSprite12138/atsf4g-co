cmake_minimum_required(VERSION 3.7.0)
cmake_policy(SET CMP0054 NEW)

project(atgw_inner_v1_c)

########################################################################
# CMake 模块 (递归包含模块, 带颜色输出模块, 平台检测模块)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake_modules")

include("${CMAKE_CURRENT_LIST_DIR}/cmake_modules/EchoWithColor.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/cmake_modules/FindConfigurePackage.cmake")

include (GNUInstallDirs)

#####################################################################
# 导入编译器和编译选项配置
include("${CMAKE_CURRENT_LIST_DIR}/cmake_modules/CompilerOption.cmake")
EchoWithColor(COLOR GREEN "-- Build Type: ${CMAKE_BUILD_TYPE}")

########################################################################
# just like ATBUS_MACRO_DATA_SMALL_SIZE
set(ATFRAME_GATEWAY_MACRO_DATA_SMALL_SIZE 3072 CACHE STRING "small message buffer for atgateway connection(used to reduce memory copy when there are many small messages)")
set(ATBUS_MACRO_MSG_LIMIT 262144 CACHE STRING "message size limit of libatbus")

unset(LIB_NAME_PUBLIC_INCLUDE_DIRS)
unset(LIB_NAME_PUBLIC_OPTIONS)
unset(LIB_NAME_PUBLIC_DEFINITIONS)
unset(LIB_NAME_PUBLIC_LINK_NAMES)

list(APPEND LIB_NAME_PUBLIC_DEFINITIONS ATBUS_MACRO_MSG_LIMIT=${ATBUS_MACRO_MSG_LIMIT})

# 加密算法库检测
# =========== 3rd_party - openssl/libressl/boringssl/mbedtls ===========
if (CRYPTO_USE_OPENSSL OR CRYPTO_USE_LIBRESSL OR CRYPTO_USE_BORINGSSL)
    if (NOT OPENSSL_FOUND AND NOT LIBRESSL_FOUND)
        if (CRYPTO_USE_LIBRESSL)
            find_package(LibreSSL)
        else()
            find_package(OpenSSL)
        endif()
    endif()

    if (OPENSSL_FOUND OR LIBRESSL_FOUND)
        message(STATUS "Crypto enabled.(openssl/libressl found)")
    else()
        message(FATAL_ERROR "CRYPTO_USE_OPENSSL,CRYPTO_USE_LIBRESSL,CRYPTO_USE_BORINGSSL is set but openssl/libressl not found")
    endif()
elseif (CRYPTO_USE_MBEDTLS)
    if (TARGET mbedtls_static OR TARGET mbedtls)
        set(MBEDTLS_FOUND TRUE)
        set(CRYPTO_USE_MBEDTLS 1)
    else ()
        find_package(MbedTLS)
        if (MBEDTLS_FOUND) 
            message(STATUS "Crypto enabled.(mbedtls found)")
            set(CRYPTO_USE_MBEDTLS 1)
        endif()
    endif()
    if (MBEDTLS_FOUND)
        message(STATUS "Crypto enabled.(mbedtls found)")
    else()
        message(FATAL_ERROR "CRYPTO_USE_MBEDTLS is set but mbedtls not found")
    endif()
elseif (NOT CRYPTO_DISABLED)
    # try to find openssl or mbedtls
    find_package(OpenSSL)
    if (NOT OPENSSL_FOUND)
        find_package(LibreSSL)
    endif ()
    if (LIBRESSL_FOUND)
        message(STATUS "Crypto enabled.(libressl found)")
        set(CRYPTO_USE_LIBRESSL 1)
    elseif (OPENSSL_FOUND)
        message(STATUS "Crypto enabled.(openssl found)")
        set(CRYPTO_USE_OPENSSL 1)
    else ()
        if (TARGET mbedtls_static OR TARGET mbedtls)
            set(MBEDTLS_FOUND TRUE)
        else ()
            find_package(MbedTLS)
            if (MBEDTLS_FOUND) 
                message(STATUS "Crypto enabled.(mbedtls found)")
                set(CRYPTO_USE_MBEDTLS 1)
            endif()
        endif()
    endif()
endif()


if(LIBRESSL_FOUND AND NOT OPENSSL_FOUND)
    set (OPENSSL_FOUND ${LIBRESSL_FOUND} CACHE BOOL "using libressl for erplacement of openssl" FORCE)
    set (OPENSSL_INCLUDE_DIR ${LIBRESSL_INCLUDE_DIR} CACHE PATH "libressl include dir" FORCE)
    set (OPENSSL_CRYPTO_LIBRARY ${LIBRESSL_CRYPTO_LIBRARY} CACHE STRING "libressl crypto libs" FORCE)
    set (OPENSSL_CRYPTO_LIBRARIES ${LIBRESSL_CRYPTO_LIBRARY} CACHE STRING "libressl crypto libs" FORCE)
    set (OPENSSL_SSL_LIBRARY ${LIBRESSL_SSL_LIBRARY} CACHE STRING "libressl ssl libs" FORCE)
    set (OPENSSL_SSL_LIBRARIES ${LIBRESSL_SSL_LIBRARY} CACHE STRING "libressl ssl libs" FORCE)
    set (OPENSSL_LIBRARIES ${LIBRESSL_LIBRARIES} CACHE STRING "libressl all libs" FORCE)
    set (OPENSSL_VERSION "1.1.0" CACHE STRING "openssl version of libressl" FORCE)

    set (OpenSSL::Crypto LibreSSL::Crypto)
    set (OpenSSL::SSL LibreSSL::SSL)
endif ()

if (OPENSSL_FOUND)
    if ((TARGET OpenSSL::SSL) OR (TARGET OpenSSL::Crypto))
        if (TARGET OpenSSL::SSL)
            message(STATUS "OpenSSL using target: OpenSSL::SSL")
            list(APPEND LIB_NAME_PUBLIC_LINK_NAMES OpenSSL::SSL)
        endif ()
        if (TARGET OpenSSL::Crypto)
            message(STATUS "OpenSSL using target: OpenSSL::Crypto")
            list(APPEND LIB_NAME_PUBLIC_LINK_NAMES OpenSSL::Crypto)
        endif ()
    else ()
        list(APPEND LIB_NAME_PUBLIC_INCLUDE_DIRS ${OPENSSL_INCLUDE_DIR})
        list(APPEND LIB_NAME_PUBLIC_LINK_NAMES ${OPENSSL_SSL_LIBRARY} ${OPENSSL_CRYPTO_LIBRARY})
    endif()
elseif (MBEDTLS_FOUND)
    if (TARGET mbedtls_static)
        message(STATUS "MbedTLS using target: mbedtls_static")
        list(APPEND LIB_NAME_PUBLIC_LINK_NAMES mbedtls_static)
    elseif (TARGET mbedtls)
        message(STATUS "MbedTLS using target: mbedtls")
        list(APPEND LIB_NAME_PUBLIC_LINK_NAMES mbedtls)
    else ()
        list(APPEND LIB_NAME_PUBLIC_INCLUDE_DIRS ${MbedTLS_INCLUDE_DIRS})
        list(APPEND LIB_NAME_PUBLIC_LINK_NAMES ${MbedTLS_CRYPTO_LIBRARIES})
    endif()
endif()

if (NOT CRYPTO_DISABLED)
    find_package(Libsodium)
    if (Libsodium_FOUND)
        list(APPEND 3RD_PARTY_CRYPT_LINK_NAME ${Libsodium_LIBRARIES})
    endif()
endif()

if (MINGW)
    EchoWithColor(COLOR GREEN "-- MinGW: custom add lib gdi32")
    list(APPEND 3RD_PARTY_CRYPT_LINK_NAME gdi32)
endif()

find_package(Threads)
if (CMAKE_USE_PTHREADS_INIT)
    set(THREAD_TLS_USE_PTHREAD 1)
    if(NOT ANDROID)
        list(APPEND LIB_NAME_PUBLIC_LINK_NAMES pthread)
    endif()
    if (THREADS_PREFER_PTHREAD_FLAG)
        list(APPEND LIB_NAME_PUBLIC_OPTIONS ${THREADS_PREFER_PTHREAD_FLAG})
    endif ()
endif ()

configure_file(
    "${CMAKE_CURRENT_LIST_DIR}/src/config/atframe_utils_build_feature.h.in"
    "${CMAKE_CURRENT_LIST_DIR}/src/config/atframe_utils_build_feature.h"
    @ONLY
)

configure_file(
    "${CMAKE_CURRENT_LIST_DIR}/src/detail/libatbus_config.h.in"
    "${CMAKE_CURRENT_LIST_DIR}/src/detail/libatbus_config.h"
    @ONLY
)

# 目标
list(APPEND LIB_NAME_PUBLIC_INCLUDE_DIRS "${CMAKE_CURRENT_LIST_DIR}/include")
file(GLOB_RECURSE SRC_LIST
    include/*.h
    src/*.cpp
    src/*.cc
    src/*.c
    src/*.cxx
    src/*.h
    src/*.hpp
)

# The same as export.macro.cmake
# if(WIN32 AND NOT MINGW AND NOT CYGWIN)
#     set(LIB_NAME "libatgw_inner_v1_c")
# else()
set(LIB_NAME "atgw_inner_v1_c")
# endif()

set (EXPORT_SRC_LIB_TYPE SHARED)
if (MINGW OR APPLE) 
    set (EXPORT_SRC_LIB_TYPE STATIC)
endif()

add_library(${LIB_NAME} ${EXPORT_SRC_LIB_TYPE} ${SRC_LIST})

# 保持和MSVC得导出行为一致
set_target_properties(${LIB_NAME} PROPERTIES 
    C_VISIBILITY_PRESET "hidden"
    CXX_VISIBILITY_PRESET "hidden"
)

target_link_libraries(${LIB_NAME}
    PUBLIC ${LIB_NAME_PUBLIC_LINK_NAMES}
)

if (LIB_NAME_PUBLIC_OPTIONS)
    target_compile_options(${LIB_NAME}
        PUBLIC ${LIB_NAME_PUBLIC_OPTIONS}
    )
endif ()

if (LIB_NAME_PUBLIC_DEFINITIONS)
    target_compile_definitions(${LIB_NAME}
        PUBLIC ${LIB_NAME_PUBLIC_DEFINITIONS}
    )
endif ()

target_include_directories(${LIB_NAME} 
    PUBLIC 
        "$<BUILD_INTERFACE:${LIB_NAME_PUBLIC_INCLUDE_DIRS}>"
        "$<INSTALL_INTERFACE:include>"
    PRIVATE
        "$<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/src/protocols>"
        "$<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/src>"
)

if (MSVC)
    set_property(TARGET ${LIB_NAME} PROPERTY FOLDER "atframework/export")
endif (MSVC)

# 安装内容
install(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/include
    DESTINATION .
	FILES_MATCHING REGEX ".+\\.h(pp)?$"
    PATTERN ".svn" EXCLUDE
    PATTERN ".git" EXCLUDE
)

install(TARGETS ${LIB_NAME}
    EXPORT "${LIB_NAME}-target"
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
)

export(TARGETS ${LIB_NAME}
    NAMESPACE "atframework::"
    FILE "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/cmake/${LIB_NAME}-target.cmake"
)

install(EXPORT "${LIB_NAME}-target"
    NAMESPACE "atframework::"
    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake"
)
