cmake_minimum_required(VERSION 3.7.0)
cmake_policy(SET CMP0054 NEW)

project(atgw_inner_v1_c)

########################################################################
# CMake 模块 (递归包含模块, 带颜色输出模块, 平台检测模块)
include (GNUInstallDirs)

#####################################################################
# 导入编译器和编译选项配置
if(ATFRAMEWORK_CMAKE_TOOLSET_DIR)
    include("${ATFRAMEWORK_CMAKE_TOOLSET_DIR}/Import.cmake")
endif()
EchoWithColor(COLOR GREEN "-- Build Type: ${CMAKE_BUILD_TYPE}")

########################################################################
set(ATFRAME_GATEWAY_MACRO_DATA_SMALL_SIZE 3072 CACHE STRING "small message buffer for atgateway connection(used to reduce memory copy when there are many small messages)")

unset(LIB_NAME_PUBLIC_INCLUDE_DIRS)
unset(LIB_NAME_PUBLIC_OPTIONS)
unset(LIB_NAME_PUBLIC_DEFINITIONS)
unset(LIB_NAME_PUBLIC_LINK_NAMES)

if(TARGET atframe_utils)
  set(ATFRAMEWORK_ATFRAME_UTILS_LINK_NAME atframe_utils)
elseif(TARGET atframework::atframe_utils)
  set(ATFRAMEWORK_ATFRAME_UTILS_LINK_NAME atframework::atframe_utils)
else()
  find_package(atframe_utils REQUIRED CONFIG)
  set(ATFRAMEWORK_ATFRAME_UTILS_LINK_NAME atframework::atframe_utils)
endif()

if(TARGET atbus)
  set(ATFRAMEWORK_LIBATBUS_LINK_NAME atbus)
  set(ATFRAMEWORK_LIBATBUS_PROTOCOL_LINK_NAME atbus-protocol)
elseif(TARGET atframework::atbus)
  set(ATFRAMEWORK_LIBATBUS_LINK_NAME atframework::atbus)
  set(ATFRAMEWORK_LIBATBUS_PROTOCOL_LINK_NAME atframework::atbus-protocol)
else()
  find_package(libatbus REQUIRED CONFIG)
  set(ATFRAMEWORK_LIBATBUS_LINK_NAME atframework::atbus)
  set(ATFRAMEWORK_LIBATBUS_PROTOCOL_LINK_NAME atframework::atbus-protocol)
endif()
list(APPEND LIB_NAME_PUBLIC_LINK_NAMES ${ATFRAMEWORK_LIBATBUS_LINK_NAME} ${ATFRAMEWORK_ATFRAME_UTILS_LINK_NAME})

# 目标
list(APPEND LIB_NAME_PUBLIC_INCLUDE_DIRS "${CMAKE_CURRENT_LIST_DIR}/include")
file(GLOB_RECURSE SRC_LIST
    include/*.h
    src/*.cpp
    src/*.cc
    src/*.c
    src/*.cxx
    src/*.h
    src/*.hpp
)

# The same as export.macro.cmake
# if(WIN32 AND NOT MINGW AND NOT CYGWIN)
#     set(LIB_NAME "libatgw_inner_v1_c")
# else()
set(LIB_NAME "atgw_inner_v1_c")
# endif()

if(NOT CMAKE_SYSTEM_NAME MATCHES "Windows|MinGW|WindowsStore" AND (BUILD_SHARED_LIBS OR ATFRAMEWORK_USE_DYNAMIC_LIBRARY
                                                                  ))
    add_library(${LIB_NAME} SHARED ${SRC_LIST})
    set_target_properties(${LIB_NAME} PROPERTIES 
        C_VISIBILITY_PRESET "hidden"
        CXX_VISIBILITY_PRESET "hidden"
        VERSION ${ATFRAMEWORK_SERVICE_GATEWAY_VERSION}
        SOVERSION ${ATFRAMEWORK_SERVICE_GATEWAY_VERSION}
    )
else ()
    add_library(${LIB_NAME} STATIC ${SRC_LIST})
    set_target_properties(${LIB_NAME} PROPERTIES 
        C_VISIBILITY_PRESET "hidden"
        CXX_VISIBILITY_PRESET "hidden"
        VERSION ${ATFRAMEWORK_SERVICE_GATEWAY_VERSION}
    )
endif()

target_link_libraries(${LIB_NAME}
    PUBLIC ${LIB_NAME_PUBLIC_LINK_NAMES}
)

if (LIB_NAME_PUBLIC_OPTIONS)
    target_compile_options(${LIB_NAME}
        PUBLIC ${LIB_NAME_PUBLIC_OPTIONS}
    )
endif ()

if (LIB_NAME_PUBLIC_DEFINITIONS)
    target_compile_definitions(${LIB_NAME}
        PUBLIC ${LIB_NAME_PUBLIC_DEFINITIONS}
    )
endif ()

target_include_directories(${LIB_NAME} 
    PUBLIC 
        "$<BUILD_INTERFACE:${LIB_NAME_PUBLIC_INCLUDE_DIRS}>"
        "$<INSTALL_INTERFACE:include>"
    PRIVATE
        "$<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/src/protocols>"
        "$<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/src>"
)

if (MSVC)
    set_property(TARGET ${LIB_NAME} PROPERTY FOLDER "atframework/export")
endif (MSVC)

# 安装内容
install(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/include
    DESTINATION .
	FILES_MATCHING REGEX ".+\\.h(pp)?$"
    PATTERN ".svn" EXCLUDE
    PATTERN ".git" EXCLUDE
)

install(TARGETS ${LIB_NAME}
    EXPORT "${LIB_NAME}-target"
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
)

export(TARGETS ${LIB_NAME}
    NAMESPACE "atframework::"
    FILE "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/cmake/${LIB_NAME}/${LIB_NAME}-target.cmake"
)

install(EXPORT "${LIB_NAME}-target"
    NAMESPACE "atframework::"
    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${LIB_NAME}"
)
