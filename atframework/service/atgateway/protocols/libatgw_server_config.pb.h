// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: libatgw_server_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_libatgw_5fserver_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_libatgw_5fserver_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "atframe/atapp_conf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_libatgw_5fserver_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_libatgw_5fserver_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_libatgw_5fserver_5fconfig_2eproto;
namespace atframe {
namespace gw {
class atgateway_cfg;
struct atgateway_cfgDefaultTypeInternal;
extern atgateway_cfgDefaultTypeInternal _atgateway_cfg_default_instance_;
class atgateway_client_cfg;
struct atgateway_client_cfgDefaultTypeInternal;
extern atgateway_client_cfgDefaultTypeInternal _atgateway_client_cfg_default_instance_;
class atgateway_client_crypt_cfg;
struct atgateway_client_crypt_cfgDefaultTypeInternal;
extern atgateway_client_crypt_cfgDefaultTypeInternal _atgateway_client_crypt_cfg_default_instance_;
class atgateway_client_limit_cfg;
struct atgateway_client_limit_cfgDefaultTypeInternal;
extern atgateway_client_limit_cfgDefaultTypeInternal _atgateway_client_limit_cfg_default_instance_;
class atgateway_listen_cfg;
struct atgateway_listen_cfgDefaultTypeInternal;
extern atgateway_listen_cfgDefaultTypeInternal _atgateway_listen_cfg_default_instance_;
}  // namespace gw
}  // namespace atframe
PROTOBUF_NAMESPACE_OPEN
template<> ::atframe::gw::atgateway_cfg* Arena::CreateMaybeMessage<::atframe::gw::atgateway_cfg>(Arena*);
template<> ::atframe::gw::atgateway_client_cfg* Arena::CreateMaybeMessage<::atframe::gw::atgateway_client_cfg>(Arena*);
template<> ::atframe::gw::atgateway_client_crypt_cfg* Arena::CreateMaybeMessage<::atframe::gw::atgateway_client_crypt_cfg>(Arena*);
template<> ::atframe::gw::atgateway_client_limit_cfg* Arena::CreateMaybeMessage<::atframe::gw::atgateway_client_limit_cfg>(Arena*);
template<> ::atframe::gw::atgateway_listen_cfg* Arena::CreateMaybeMessage<::atframe::gw::atgateway_listen_cfg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace atframe {
namespace gw {

// ===================================================================

class atgateway_listen_cfg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframe.gw.atgateway_listen_cfg) */ {
 public:
  inline atgateway_listen_cfg() : atgateway_listen_cfg(nullptr) {}
  ~atgateway_listen_cfg() override;
  explicit constexpr atgateway_listen_cfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  atgateway_listen_cfg(const atgateway_listen_cfg& from);
  atgateway_listen_cfg(atgateway_listen_cfg&& from) noexcept
    : atgateway_listen_cfg() {
    *this = ::std::move(from);
  }

  inline atgateway_listen_cfg& operator=(const atgateway_listen_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline atgateway_listen_cfg& operator=(atgateway_listen_cfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const atgateway_listen_cfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const atgateway_listen_cfg* internal_default_instance() {
    return reinterpret_cast<const atgateway_listen_cfg*>(
               &_atgateway_listen_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(atgateway_listen_cfg& a, atgateway_listen_cfg& b) {
    a.Swap(&b);
  }
  inline void Swap(atgateway_listen_cfg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(atgateway_listen_cfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline atgateway_listen_cfg* New() const final {
    return new atgateway_listen_cfg();
  }

  atgateway_listen_cfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<atgateway_listen_cfg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const atgateway_listen_cfg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const atgateway_listen_cfg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(atgateway_listen_cfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframe.gw.atgateway_listen_cfg";
  }
  protected:
  explicit atgateway_listen_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kTypeFieldNumber = 2,
    kMaxClientFieldNumber = 3,
    kBacklogFieldNumber = 4,
  };
  // repeated string address = 1;
  int address_size() const;
  private:
  int _internal_address_size() const;
  public:
  void clear_address();
  const std::string& address(int index) const;
  std::string* mutable_address(int index);
  void set_address(int index, const std::string& value);
  void set_address(int index, std::string&& value);
  void set_address(int index, const char* value);
  void set_address(int index, const char* value, size_t size);
  std::string* add_address();
  void add_address(const std::string& value);
  void add_address(std::string&& value);
  void add_address(const char* value);
  void add_address(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_address();
  private:
  const std::string& _internal_address(int index) const;
  std::string* _internal_add_address();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // uint64 max_client = 3 [(.atapp.protocol.CONFIGURE) = {
  void clear_max_client();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_client() const;
  void set_max_client(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_client() const;
  void _internal_set_max_client(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 backlog = 4 [(.atapp.protocol.CONFIGURE) = {
  void clear_backlog();
  ::PROTOBUF_NAMESPACE_ID::int32 backlog() const;
  void set_backlog(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_backlog() const;
  void _internal_set_backlog(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:atframe.gw.atgateway_listen_cfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_client_;
  ::PROTOBUF_NAMESPACE_ID::int32 backlog_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_libatgw_5fserver_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class atgateway_client_limit_cfg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframe.gw.atgateway_client_limit_cfg) */ {
 public:
  inline atgateway_client_limit_cfg() : atgateway_client_limit_cfg(nullptr) {}
  ~atgateway_client_limit_cfg() override;
  explicit constexpr atgateway_client_limit_cfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  atgateway_client_limit_cfg(const atgateway_client_limit_cfg& from);
  atgateway_client_limit_cfg(atgateway_client_limit_cfg&& from) noexcept
    : atgateway_client_limit_cfg() {
    *this = ::std::move(from);
  }

  inline atgateway_client_limit_cfg& operator=(const atgateway_client_limit_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline atgateway_client_limit_cfg& operator=(atgateway_client_limit_cfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const atgateway_client_limit_cfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const atgateway_client_limit_cfg* internal_default_instance() {
    return reinterpret_cast<const atgateway_client_limit_cfg*>(
               &_atgateway_client_limit_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(atgateway_client_limit_cfg& a, atgateway_client_limit_cfg& b) {
    a.Swap(&b);
  }
  inline void Swap(atgateway_client_limit_cfg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(atgateway_client_limit_cfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline atgateway_client_limit_cfg* New() const final {
    return new atgateway_client_limit_cfg();
  }

  atgateway_client_limit_cfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<atgateway_client_limit_cfg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const atgateway_client_limit_cfg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const atgateway_client_limit_cfg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(atgateway_client_limit_cfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframe.gw.atgateway_client_limit_cfg";
  }
  protected:
  explicit atgateway_client_limit_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalSendBytesFieldNumber = 1,
    kTotalRecvBytesFieldNumber = 2,
    kHourSendBytesFieldNumber = 3,
    kHourRecvBytesFieldNumber = 4,
    kMinuteSendBytesFieldNumber = 5,
    kMinuteRecvBytesFieldNumber = 6,
    kTotalSendTimesFieldNumber = 7,
    kTotalRecvTimesFieldNumber = 8,
    kHourSendTimesFieldNumber = 9,
    kHourRecvTimesFieldNumber = 10,
    kMinuteSendTimesFieldNumber = 11,
    kMinuteRecvTimesFieldNumber = 12,
  };
  // uint64 total_send_bytes = 1 [(.atapp.protocol.CONFIGURE) = {
  void clear_total_send_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_send_bytes() const;
  void set_total_send_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_send_bytes() const;
  void _internal_set_total_send_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 total_recv_bytes = 2 [(.atapp.protocol.CONFIGURE) = {
  void clear_total_recv_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_recv_bytes() const;
  void set_total_recv_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_recv_bytes() const;
  void _internal_set_total_recv_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 hour_send_bytes = 3 [(.atapp.protocol.CONFIGURE) = {
  void clear_hour_send_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 hour_send_bytes() const;
  void set_hour_send_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hour_send_bytes() const;
  void _internal_set_hour_send_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 hour_recv_bytes = 4 [(.atapp.protocol.CONFIGURE) = {
  void clear_hour_recv_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 hour_recv_bytes() const;
  void set_hour_recv_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hour_recv_bytes() const;
  void _internal_set_hour_recv_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 minute_send_bytes = 5 [(.atapp.protocol.CONFIGURE) = {
  void clear_minute_send_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 minute_send_bytes() const;
  void set_minute_send_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_minute_send_bytes() const;
  void _internal_set_minute_send_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 minute_recv_bytes = 6 [(.atapp.protocol.CONFIGURE) = {
  void clear_minute_recv_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 minute_recv_bytes() const;
  void set_minute_recv_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_minute_recv_bytes() const;
  void _internal_set_minute_recv_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 total_send_times = 7;
  void clear_total_send_times();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_send_times() const;
  void set_total_send_times(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_send_times() const;
  void _internal_set_total_send_times(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 total_recv_times = 8;
  void clear_total_recv_times();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_recv_times() const;
  void set_total_recv_times(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_recv_times() const;
  void _internal_set_total_recv_times(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 hour_send_times = 9;
  void clear_hour_send_times();
  ::PROTOBUF_NAMESPACE_ID::uint64 hour_send_times() const;
  void set_hour_send_times(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hour_send_times() const;
  void _internal_set_hour_send_times(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 hour_recv_times = 10;
  void clear_hour_recv_times();
  ::PROTOBUF_NAMESPACE_ID::uint64 hour_recv_times() const;
  void set_hour_recv_times(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hour_recv_times() const;
  void _internal_set_hour_recv_times(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 minute_send_times = 11;
  void clear_minute_send_times();
  ::PROTOBUF_NAMESPACE_ID::uint64 minute_send_times() const;
  void set_minute_send_times(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_minute_send_times() const;
  void _internal_set_minute_send_times(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 minute_recv_times = 12;
  void clear_minute_recv_times();
  ::PROTOBUF_NAMESPACE_ID::uint64 minute_recv_times() const;
  void set_minute_recv_times(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_minute_recv_times() const;
  void _internal_set_minute_recv_times(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:atframe.gw.atgateway_client_limit_cfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_send_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_recv_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hour_send_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hour_recv_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 minute_send_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 minute_recv_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_send_times_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_recv_times_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hour_send_times_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hour_recv_times_;
  ::PROTOBUF_NAMESPACE_ID::uint64 minute_send_times_;
  ::PROTOBUF_NAMESPACE_ID::uint64 minute_recv_times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_libatgw_5fserver_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class atgateway_client_crypt_cfg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframe.gw.atgateway_client_crypt_cfg) */ {
 public:
  inline atgateway_client_crypt_cfg() : atgateway_client_crypt_cfg(nullptr) {}
  ~atgateway_client_crypt_cfg() override;
  explicit constexpr atgateway_client_crypt_cfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  atgateway_client_crypt_cfg(const atgateway_client_crypt_cfg& from);
  atgateway_client_crypt_cfg(atgateway_client_crypt_cfg&& from) noexcept
    : atgateway_client_crypt_cfg() {
    *this = ::std::move(from);
  }

  inline atgateway_client_crypt_cfg& operator=(const atgateway_client_crypt_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline atgateway_client_crypt_cfg& operator=(atgateway_client_crypt_cfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const atgateway_client_crypt_cfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const atgateway_client_crypt_cfg* internal_default_instance() {
    return reinterpret_cast<const atgateway_client_crypt_cfg*>(
               &_atgateway_client_crypt_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(atgateway_client_crypt_cfg& a, atgateway_client_crypt_cfg& b) {
    a.Swap(&b);
  }
  inline void Swap(atgateway_client_crypt_cfg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(atgateway_client_crypt_cfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline atgateway_client_crypt_cfg* New() const final {
    return new atgateway_client_crypt_cfg();
  }

  atgateway_client_crypt_cfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<atgateway_client_crypt_cfg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const atgateway_client_crypt_cfg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const atgateway_client_crypt_cfg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(atgateway_client_crypt_cfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframe.gw.atgateway_client_crypt_cfg";
  }
  protected:
  explicit atgateway_client_crypt_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kTypeFieldNumber = 3,
    kDhparamFieldNumber = 4,
    kUpdateIntervalFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string dhparam = 4;
  void clear_dhparam();
  const std::string& dhparam() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dhparam(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dhparam();
  PROTOBUF_MUST_USE_RESULT std::string* release_dhparam();
  void set_allocated_dhparam(std::string* dhparam);
  private:
  const std::string& _internal_dhparam() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dhparam(const std::string& value);
  std::string* _internal_mutable_dhparam();
  public:

  // .google.protobuf.Duration update_interval = 2 [(.atapp.protocol.CONFIGURE) = {
  bool has_update_interval() const;
  private:
  bool _internal_has_update_interval() const;
  public:
  void clear_update_interval();
  const ::PROTOBUF_NAMESPACE_ID::Duration& update_interval() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Duration* release_update_interval();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_update_interval();
  void set_allocated_update_interval(::PROTOBUF_NAMESPACE_ID::Duration* update_interval);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_update_interval() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_update_interval();
  public:
  void unsafe_arena_set_allocated_update_interval(
      ::PROTOBUF_NAMESPACE_ID::Duration* update_interval);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_update_interval();

  // @@protoc_insertion_point(class_scope:atframe.gw.atgateway_client_crypt_cfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dhparam_;
  ::PROTOBUF_NAMESPACE_ID::Duration* update_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_libatgw_5fserver_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class atgateway_client_cfg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframe.gw.atgateway_client_cfg) */ {
 public:
  inline atgateway_client_cfg() : atgateway_client_cfg(nullptr) {}
  ~atgateway_client_cfg() override;
  explicit constexpr atgateway_client_cfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  atgateway_client_cfg(const atgateway_client_cfg& from);
  atgateway_client_cfg(atgateway_client_cfg&& from) noexcept
    : atgateway_client_cfg() {
    *this = ::std::move(from);
  }

  inline atgateway_client_cfg& operator=(const atgateway_client_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline atgateway_client_cfg& operator=(atgateway_client_cfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const atgateway_client_cfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const atgateway_client_cfg* internal_default_instance() {
    return reinterpret_cast<const atgateway_client_cfg*>(
               &_atgateway_client_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(atgateway_client_cfg& a, atgateway_client_cfg& b) {
    a.Swap(&b);
  }
  inline void Swap(atgateway_client_cfg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(atgateway_client_cfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline atgateway_client_cfg* New() const final {
    return new atgateway_client_cfg();
  }

  atgateway_client_cfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<atgateway_client_cfg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const atgateway_client_cfg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const atgateway_client_cfg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(atgateway_client_cfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframe.gw.atgateway_client_cfg";
  }
  protected:
  explicit atgateway_client_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReconnectTimeoutFieldNumber = 1,
    kFirstIdleTimeoutFieldNumber = 2,
    kLimitFieldNumber = 5,
    kCryptFieldNumber = 6,
    kSendBufferSizeFieldNumber = 3,
    kDefaultRouterFieldNumber = 4,
  };
  // .google.protobuf.Duration reconnect_timeout = 1 [(.atapp.protocol.CONFIGURE) = {
  bool has_reconnect_timeout() const;
  private:
  bool _internal_has_reconnect_timeout() const;
  public:
  void clear_reconnect_timeout();
  const ::PROTOBUF_NAMESPACE_ID::Duration& reconnect_timeout() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Duration* release_reconnect_timeout();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_reconnect_timeout();
  void set_allocated_reconnect_timeout(::PROTOBUF_NAMESPACE_ID::Duration* reconnect_timeout);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_reconnect_timeout() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_reconnect_timeout();
  public:
  void unsafe_arena_set_allocated_reconnect_timeout(
      ::PROTOBUF_NAMESPACE_ID::Duration* reconnect_timeout);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_reconnect_timeout();

  // .google.protobuf.Duration first_idle_timeout = 2 [(.atapp.protocol.CONFIGURE) = {
  bool has_first_idle_timeout() const;
  private:
  bool _internal_has_first_idle_timeout() const;
  public:
  void clear_first_idle_timeout();
  const ::PROTOBUF_NAMESPACE_ID::Duration& first_idle_timeout() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Duration* release_first_idle_timeout();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_first_idle_timeout();
  void set_allocated_first_idle_timeout(::PROTOBUF_NAMESPACE_ID::Duration* first_idle_timeout);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_first_idle_timeout() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_first_idle_timeout();
  public:
  void unsafe_arena_set_allocated_first_idle_timeout(
      ::PROTOBUF_NAMESPACE_ID::Duration* first_idle_timeout);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_first_idle_timeout();

  // .atframe.gw.atgateway_client_limit_cfg limit = 5;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  const ::atframe::gw::atgateway_client_limit_cfg& limit() const;
  PROTOBUF_MUST_USE_RESULT ::atframe::gw::atgateway_client_limit_cfg* release_limit();
  ::atframe::gw::atgateway_client_limit_cfg* mutable_limit();
  void set_allocated_limit(::atframe::gw::atgateway_client_limit_cfg* limit);
  private:
  const ::atframe::gw::atgateway_client_limit_cfg& _internal_limit() const;
  ::atframe::gw::atgateway_client_limit_cfg* _internal_mutable_limit();
  public:
  void unsafe_arena_set_allocated_limit(
      ::atframe::gw::atgateway_client_limit_cfg* limit);
  ::atframe::gw::atgateway_client_limit_cfg* unsafe_arena_release_limit();

  // .atframe.gw.atgateway_client_crypt_cfg crypt = 6;
  bool has_crypt() const;
  private:
  bool _internal_has_crypt() const;
  public:
  void clear_crypt();
  const ::atframe::gw::atgateway_client_crypt_cfg& crypt() const;
  PROTOBUF_MUST_USE_RESULT ::atframe::gw::atgateway_client_crypt_cfg* release_crypt();
  ::atframe::gw::atgateway_client_crypt_cfg* mutable_crypt();
  void set_allocated_crypt(::atframe::gw::atgateway_client_crypt_cfg* crypt);
  private:
  const ::atframe::gw::atgateway_client_crypt_cfg& _internal_crypt() const;
  ::atframe::gw::atgateway_client_crypt_cfg* _internal_mutable_crypt();
  public:
  void unsafe_arena_set_allocated_crypt(
      ::atframe::gw::atgateway_client_crypt_cfg* crypt);
  ::atframe::gw::atgateway_client_crypt_cfg* unsafe_arena_release_crypt();

  // uint64 send_buffer_size = 3 [(.atapp.protocol.CONFIGURE) = {
  void clear_send_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 send_buffer_size() const;
  void set_send_buffer_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_send_buffer_size() const;
  void _internal_set_send_buffer_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 default_router = 4;
  void clear_default_router();
  ::PROTOBUF_NAMESPACE_ID::uint64 default_router() const;
  void set_default_router(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_default_router() const;
  void _internal_set_default_router(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:atframe.gw.atgateway_client_cfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Duration* reconnect_timeout_;
  ::PROTOBUF_NAMESPACE_ID::Duration* first_idle_timeout_;
  ::atframe::gw::atgateway_client_limit_cfg* limit_;
  ::atframe::gw::atgateway_client_crypt_cfg* crypt_;
  ::PROTOBUF_NAMESPACE_ID::uint64 send_buffer_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 default_router_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_libatgw_5fserver_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class atgateway_cfg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframe.gw.atgateway_cfg) */ {
 public:
  inline atgateway_cfg() : atgateway_cfg(nullptr) {}
  ~atgateway_cfg() override;
  explicit constexpr atgateway_cfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  atgateway_cfg(const atgateway_cfg& from);
  atgateway_cfg(atgateway_cfg&& from) noexcept
    : atgateway_cfg() {
    *this = ::std::move(from);
  }

  inline atgateway_cfg& operator=(const atgateway_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline atgateway_cfg& operator=(atgateway_cfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const atgateway_cfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const atgateway_cfg* internal_default_instance() {
    return reinterpret_cast<const atgateway_cfg*>(
               &_atgateway_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(atgateway_cfg& a, atgateway_cfg& b) {
    a.Swap(&b);
  }
  inline void Swap(atgateway_cfg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(atgateway_cfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline atgateway_cfg* New() const final {
    return new atgateway_cfg();
  }

  atgateway_cfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<atgateway_cfg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const atgateway_cfg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const atgateway_cfg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(atgateway_cfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframe.gw.atgateway_cfg";
  }
  protected:
  explicit atgateway_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListenFieldNumber = 1,
    kClientFieldNumber = 2,
  };
  // .atframe.gw.atgateway_listen_cfg listen = 1;
  bool has_listen() const;
  private:
  bool _internal_has_listen() const;
  public:
  void clear_listen();
  const ::atframe::gw::atgateway_listen_cfg& listen() const;
  PROTOBUF_MUST_USE_RESULT ::atframe::gw::atgateway_listen_cfg* release_listen();
  ::atframe::gw::atgateway_listen_cfg* mutable_listen();
  void set_allocated_listen(::atframe::gw::atgateway_listen_cfg* listen);
  private:
  const ::atframe::gw::atgateway_listen_cfg& _internal_listen() const;
  ::atframe::gw::atgateway_listen_cfg* _internal_mutable_listen();
  public:
  void unsafe_arena_set_allocated_listen(
      ::atframe::gw::atgateway_listen_cfg* listen);
  ::atframe::gw::atgateway_listen_cfg* unsafe_arena_release_listen();

  // .atframe.gw.atgateway_client_cfg client = 2;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::atframe::gw::atgateway_client_cfg& client() const;
  PROTOBUF_MUST_USE_RESULT ::atframe::gw::atgateway_client_cfg* release_client();
  ::atframe::gw::atgateway_client_cfg* mutable_client();
  void set_allocated_client(::atframe::gw::atgateway_client_cfg* client);
  private:
  const ::atframe::gw::atgateway_client_cfg& _internal_client() const;
  ::atframe::gw::atgateway_client_cfg* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::atframe::gw::atgateway_client_cfg* client);
  ::atframe::gw::atgateway_client_cfg* unsafe_arena_release_client();

  // @@protoc_insertion_point(class_scope:atframe.gw.atgateway_cfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::atframe::gw::atgateway_listen_cfg* listen_;
  ::atframe::gw::atgateway_client_cfg* client_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_libatgw_5fserver_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// atgateway_listen_cfg

// repeated string address = 1;
inline int atgateway_listen_cfg::_internal_address_size() const {
  return address_.size();
}
inline int atgateway_listen_cfg::address_size() const {
  return _internal_address_size();
}
inline void atgateway_listen_cfg::clear_address() {
  address_.Clear();
}
inline std::string* atgateway_listen_cfg::add_address() {
  std::string* _s = _internal_add_address();
  // @@protoc_insertion_point(field_add_mutable:atframe.gw.atgateway_listen_cfg.address)
  return _s;
}
inline const std::string& atgateway_listen_cfg::_internal_address(int index) const {
  return address_.Get(index);
}
inline const std::string& atgateway_listen_cfg::address(int index) const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_listen_cfg.address)
  return _internal_address(index);
}
inline std::string* atgateway_listen_cfg::mutable_address(int index) {
  // @@protoc_insertion_point(field_mutable:atframe.gw.atgateway_listen_cfg.address)
  return address_.Mutable(index);
}
inline void atgateway_listen_cfg::set_address(int index, const std::string& value) {
  address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_listen_cfg.address)
}
inline void atgateway_listen_cfg::set_address(int index, std::string&& value) {
  address_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_listen_cfg.address)
}
inline void atgateway_listen_cfg::set_address(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:atframe.gw.atgateway_listen_cfg.address)
}
inline void atgateway_listen_cfg::set_address(int index, const char* value, size_t size) {
  address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:atframe.gw.atgateway_listen_cfg.address)
}
inline std::string* atgateway_listen_cfg::_internal_add_address() {
  return address_.Add();
}
inline void atgateway_listen_cfg::add_address(const std::string& value) {
  address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:atframe.gw.atgateway_listen_cfg.address)
}
inline void atgateway_listen_cfg::add_address(std::string&& value) {
  address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:atframe.gw.atgateway_listen_cfg.address)
}
inline void atgateway_listen_cfg::add_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:atframe.gw.atgateway_listen_cfg.address)
}
inline void atgateway_listen_cfg::add_address(const char* value, size_t size) {
  address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:atframe.gw.atgateway_listen_cfg.address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
atgateway_listen_cfg::address() const {
  // @@protoc_insertion_point(field_list:atframe.gw.atgateway_listen_cfg.address)
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
atgateway_listen_cfg::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:atframe.gw.atgateway_listen_cfg.address)
  return &address_;
}

// string type = 2;
inline void atgateway_listen_cfg::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& atgateway_listen_cfg::type() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_listen_cfg.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void atgateway_listen_cfg::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_listen_cfg.type)
}
inline std::string* atgateway_listen_cfg::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:atframe.gw.atgateway_listen_cfg.type)
  return _s;
}
inline const std::string& atgateway_listen_cfg::_internal_type() const {
  return type_.Get();
}
inline void atgateway_listen_cfg::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* atgateway_listen_cfg::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* atgateway_listen_cfg::release_type() {
  // @@protoc_insertion_point(field_release:atframe.gw.atgateway_listen_cfg.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void atgateway_listen_cfg::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:atframe.gw.atgateway_listen_cfg.type)
}

// uint64 max_client = 3 [(.atapp.protocol.CONFIGURE) = {
inline void atgateway_listen_cfg::clear_max_client() {
  max_client_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_listen_cfg::_internal_max_client() const {
  return max_client_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_listen_cfg::max_client() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_listen_cfg.max_client)
  return _internal_max_client();
}
inline void atgateway_listen_cfg::_internal_set_max_client(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_client_ = value;
}
inline void atgateway_listen_cfg::set_max_client(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_client(value);
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_listen_cfg.max_client)
}

// int32 backlog = 4 [(.atapp.protocol.CONFIGURE) = {
inline void atgateway_listen_cfg::clear_backlog() {
  backlog_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 atgateway_listen_cfg::_internal_backlog() const {
  return backlog_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 atgateway_listen_cfg::backlog() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_listen_cfg.backlog)
  return _internal_backlog();
}
inline void atgateway_listen_cfg::_internal_set_backlog(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  backlog_ = value;
}
inline void atgateway_listen_cfg::set_backlog(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_backlog(value);
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_listen_cfg.backlog)
}

// -------------------------------------------------------------------

// atgateway_client_limit_cfg

// uint64 total_send_bytes = 1 [(.atapp.protocol.CONFIGURE) = {
inline void atgateway_client_limit_cfg::clear_total_send_bytes() {
  total_send_bytes_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::_internal_total_send_bytes() const {
  return total_send_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::total_send_bytes() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_limit_cfg.total_send_bytes)
  return _internal_total_send_bytes();
}
inline void atgateway_client_limit_cfg::_internal_set_total_send_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_send_bytes_ = value;
}
inline void atgateway_client_limit_cfg::set_total_send_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_send_bytes(value);
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_client_limit_cfg.total_send_bytes)
}

// uint64 total_recv_bytes = 2 [(.atapp.protocol.CONFIGURE) = {
inline void atgateway_client_limit_cfg::clear_total_recv_bytes() {
  total_recv_bytes_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::_internal_total_recv_bytes() const {
  return total_recv_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::total_recv_bytes() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_limit_cfg.total_recv_bytes)
  return _internal_total_recv_bytes();
}
inline void atgateway_client_limit_cfg::_internal_set_total_recv_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_recv_bytes_ = value;
}
inline void atgateway_client_limit_cfg::set_total_recv_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_recv_bytes(value);
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_client_limit_cfg.total_recv_bytes)
}

// uint64 hour_send_bytes = 3 [(.atapp.protocol.CONFIGURE) = {
inline void atgateway_client_limit_cfg::clear_hour_send_bytes() {
  hour_send_bytes_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::_internal_hour_send_bytes() const {
  return hour_send_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::hour_send_bytes() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_limit_cfg.hour_send_bytes)
  return _internal_hour_send_bytes();
}
inline void atgateway_client_limit_cfg::_internal_set_hour_send_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  hour_send_bytes_ = value;
}
inline void atgateway_client_limit_cfg::set_hour_send_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hour_send_bytes(value);
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_client_limit_cfg.hour_send_bytes)
}

// uint64 hour_recv_bytes = 4 [(.atapp.protocol.CONFIGURE) = {
inline void atgateway_client_limit_cfg::clear_hour_recv_bytes() {
  hour_recv_bytes_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::_internal_hour_recv_bytes() const {
  return hour_recv_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::hour_recv_bytes() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_limit_cfg.hour_recv_bytes)
  return _internal_hour_recv_bytes();
}
inline void atgateway_client_limit_cfg::_internal_set_hour_recv_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  hour_recv_bytes_ = value;
}
inline void atgateway_client_limit_cfg::set_hour_recv_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hour_recv_bytes(value);
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_client_limit_cfg.hour_recv_bytes)
}

// uint64 minute_send_bytes = 5 [(.atapp.protocol.CONFIGURE) = {
inline void atgateway_client_limit_cfg::clear_minute_send_bytes() {
  minute_send_bytes_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::_internal_minute_send_bytes() const {
  return minute_send_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::minute_send_bytes() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_limit_cfg.minute_send_bytes)
  return _internal_minute_send_bytes();
}
inline void atgateway_client_limit_cfg::_internal_set_minute_send_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  minute_send_bytes_ = value;
}
inline void atgateway_client_limit_cfg::set_minute_send_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_minute_send_bytes(value);
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_client_limit_cfg.minute_send_bytes)
}

// uint64 minute_recv_bytes = 6 [(.atapp.protocol.CONFIGURE) = {
inline void atgateway_client_limit_cfg::clear_minute_recv_bytes() {
  minute_recv_bytes_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::_internal_minute_recv_bytes() const {
  return minute_recv_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::minute_recv_bytes() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_limit_cfg.minute_recv_bytes)
  return _internal_minute_recv_bytes();
}
inline void atgateway_client_limit_cfg::_internal_set_minute_recv_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  minute_recv_bytes_ = value;
}
inline void atgateway_client_limit_cfg::set_minute_recv_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_minute_recv_bytes(value);
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_client_limit_cfg.minute_recv_bytes)
}

// uint64 total_send_times = 7;
inline void atgateway_client_limit_cfg::clear_total_send_times() {
  total_send_times_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::_internal_total_send_times() const {
  return total_send_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::total_send_times() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_limit_cfg.total_send_times)
  return _internal_total_send_times();
}
inline void atgateway_client_limit_cfg::_internal_set_total_send_times(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_send_times_ = value;
}
inline void atgateway_client_limit_cfg::set_total_send_times(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_send_times(value);
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_client_limit_cfg.total_send_times)
}

// uint64 total_recv_times = 8;
inline void atgateway_client_limit_cfg::clear_total_recv_times() {
  total_recv_times_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::_internal_total_recv_times() const {
  return total_recv_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::total_recv_times() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_limit_cfg.total_recv_times)
  return _internal_total_recv_times();
}
inline void atgateway_client_limit_cfg::_internal_set_total_recv_times(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_recv_times_ = value;
}
inline void atgateway_client_limit_cfg::set_total_recv_times(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_recv_times(value);
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_client_limit_cfg.total_recv_times)
}

// uint64 hour_send_times = 9;
inline void atgateway_client_limit_cfg::clear_hour_send_times() {
  hour_send_times_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::_internal_hour_send_times() const {
  return hour_send_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::hour_send_times() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_limit_cfg.hour_send_times)
  return _internal_hour_send_times();
}
inline void atgateway_client_limit_cfg::_internal_set_hour_send_times(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  hour_send_times_ = value;
}
inline void atgateway_client_limit_cfg::set_hour_send_times(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hour_send_times(value);
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_client_limit_cfg.hour_send_times)
}

// uint64 hour_recv_times = 10;
inline void atgateway_client_limit_cfg::clear_hour_recv_times() {
  hour_recv_times_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::_internal_hour_recv_times() const {
  return hour_recv_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::hour_recv_times() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_limit_cfg.hour_recv_times)
  return _internal_hour_recv_times();
}
inline void atgateway_client_limit_cfg::_internal_set_hour_recv_times(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  hour_recv_times_ = value;
}
inline void atgateway_client_limit_cfg::set_hour_recv_times(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hour_recv_times(value);
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_client_limit_cfg.hour_recv_times)
}

// uint64 minute_send_times = 11;
inline void atgateway_client_limit_cfg::clear_minute_send_times() {
  minute_send_times_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::_internal_minute_send_times() const {
  return minute_send_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::minute_send_times() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_limit_cfg.minute_send_times)
  return _internal_minute_send_times();
}
inline void atgateway_client_limit_cfg::_internal_set_minute_send_times(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  minute_send_times_ = value;
}
inline void atgateway_client_limit_cfg::set_minute_send_times(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_minute_send_times(value);
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_client_limit_cfg.minute_send_times)
}

// uint64 minute_recv_times = 12;
inline void atgateway_client_limit_cfg::clear_minute_recv_times() {
  minute_recv_times_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::_internal_minute_recv_times() const {
  return minute_recv_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_limit_cfg::minute_recv_times() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_limit_cfg.minute_recv_times)
  return _internal_minute_recv_times();
}
inline void atgateway_client_limit_cfg::_internal_set_minute_recv_times(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  minute_recv_times_ = value;
}
inline void atgateway_client_limit_cfg::set_minute_recv_times(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_minute_recv_times(value);
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_client_limit_cfg.minute_recv_times)
}

// -------------------------------------------------------------------

// atgateway_client_crypt_cfg

// string key = 1;
inline void atgateway_client_crypt_cfg::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& atgateway_client_crypt_cfg::key() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_crypt_cfg.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void atgateway_client_crypt_cfg::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_client_crypt_cfg.key)
}
inline std::string* atgateway_client_crypt_cfg::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:atframe.gw.atgateway_client_crypt_cfg.key)
  return _s;
}
inline const std::string& atgateway_client_crypt_cfg::_internal_key() const {
  return key_.Get();
}
inline void atgateway_client_crypt_cfg::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* atgateway_client_crypt_cfg::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* atgateway_client_crypt_cfg::release_key() {
  // @@protoc_insertion_point(field_release:atframe.gw.atgateway_client_crypt_cfg.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void atgateway_client_crypt_cfg::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:atframe.gw.atgateway_client_crypt_cfg.key)
}

// .google.protobuf.Duration update_interval = 2 [(.atapp.protocol.CONFIGURE) = {
inline bool atgateway_client_crypt_cfg::_internal_has_update_interval() const {
  return this != internal_default_instance() && update_interval_ != nullptr;
}
inline bool atgateway_client_crypt_cfg::has_update_interval() const {
  return _internal_has_update_interval();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& atgateway_client_crypt_cfg::_internal_update_interval() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = update_interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& atgateway_client_crypt_cfg::update_interval() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_crypt_cfg.update_interval)
  return _internal_update_interval();
}
inline void atgateway_client_crypt_cfg::unsafe_arena_set_allocated_update_interval(
    ::PROTOBUF_NAMESPACE_ID::Duration* update_interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_interval_);
  }
  update_interval_ = update_interval;
  if (update_interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframe.gw.atgateway_client_crypt_cfg.update_interval)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* atgateway_client_crypt_cfg::release_update_interval() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = update_interval_;
  update_interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* atgateway_client_crypt_cfg::unsafe_arena_release_update_interval() {
  // @@protoc_insertion_point(field_release:atframe.gw.atgateway_client_crypt_cfg.update_interval)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = update_interval_;
  update_interval_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* atgateway_client_crypt_cfg::_internal_mutable_update_interval() {
  
  if (update_interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    update_interval_ = p;
  }
  return update_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* atgateway_client_crypt_cfg::mutable_update_interval() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_update_interval();
  // @@protoc_insertion_point(field_mutable:atframe.gw.atgateway_client_crypt_cfg.update_interval)
  return _msg;
}
inline void atgateway_client_crypt_cfg::set_allocated_update_interval(::PROTOBUF_NAMESPACE_ID::Duration* update_interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_interval_);
  }
  if (update_interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_interval));
    if (message_arena != submessage_arena) {
      update_interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_interval, submessage_arena);
    }
    
  } else {
    
  }
  update_interval_ = update_interval;
  // @@protoc_insertion_point(field_set_allocated:atframe.gw.atgateway_client_crypt_cfg.update_interval)
}

// string type = 3;
inline void atgateway_client_crypt_cfg::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& atgateway_client_crypt_cfg::type() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_crypt_cfg.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void atgateway_client_crypt_cfg::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_client_crypt_cfg.type)
}
inline std::string* atgateway_client_crypt_cfg::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:atframe.gw.atgateway_client_crypt_cfg.type)
  return _s;
}
inline const std::string& atgateway_client_crypt_cfg::_internal_type() const {
  return type_.Get();
}
inline void atgateway_client_crypt_cfg::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* atgateway_client_crypt_cfg::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* atgateway_client_crypt_cfg::release_type() {
  // @@protoc_insertion_point(field_release:atframe.gw.atgateway_client_crypt_cfg.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void atgateway_client_crypt_cfg::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:atframe.gw.atgateway_client_crypt_cfg.type)
}

// string dhparam = 4;
inline void atgateway_client_crypt_cfg::clear_dhparam() {
  dhparam_.ClearToEmpty();
}
inline const std::string& atgateway_client_crypt_cfg::dhparam() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_crypt_cfg.dhparam)
  return _internal_dhparam();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void atgateway_client_crypt_cfg::set_dhparam(ArgT0&& arg0, ArgT... args) {
 
 dhparam_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_client_crypt_cfg.dhparam)
}
inline std::string* atgateway_client_crypt_cfg::mutable_dhparam() {
  std::string* _s = _internal_mutable_dhparam();
  // @@protoc_insertion_point(field_mutable:atframe.gw.atgateway_client_crypt_cfg.dhparam)
  return _s;
}
inline const std::string& atgateway_client_crypt_cfg::_internal_dhparam() const {
  return dhparam_.Get();
}
inline void atgateway_client_crypt_cfg::_internal_set_dhparam(const std::string& value) {
  
  dhparam_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* atgateway_client_crypt_cfg::_internal_mutable_dhparam() {
  
  return dhparam_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* atgateway_client_crypt_cfg::release_dhparam() {
  // @@protoc_insertion_point(field_release:atframe.gw.atgateway_client_crypt_cfg.dhparam)
  return dhparam_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void atgateway_client_crypt_cfg::set_allocated_dhparam(std::string* dhparam) {
  if (dhparam != nullptr) {
    
  } else {
    
  }
  dhparam_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dhparam,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:atframe.gw.atgateway_client_crypt_cfg.dhparam)
}

// -------------------------------------------------------------------

// atgateway_client_cfg

// .google.protobuf.Duration reconnect_timeout = 1 [(.atapp.protocol.CONFIGURE) = {
inline bool atgateway_client_cfg::_internal_has_reconnect_timeout() const {
  return this != internal_default_instance() && reconnect_timeout_ != nullptr;
}
inline bool atgateway_client_cfg::has_reconnect_timeout() const {
  return _internal_has_reconnect_timeout();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& atgateway_client_cfg::_internal_reconnect_timeout() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = reconnect_timeout_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& atgateway_client_cfg::reconnect_timeout() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_cfg.reconnect_timeout)
  return _internal_reconnect_timeout();
}
inline void atgateway_client_cfg::unsafe_arena_set_allocated_reconnect_timeout(
    ::PROTOBUF_NAMESPACE_ID::Duration* reconnect_timeout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reconnect_timeout_);
  }
  reconnect_timeout_ = reconnect_timeout;
  if (reconnect_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframe.gw.atgateway_client_cfg.reconnect_timeout)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* atgateway_client_cfg::release_reconnect_timeout() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = reconnect_timeout_;
  reconnect_timeout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* atgateway_client_cfg::unsafe_arena_release_reconnect_timeout() {
  // @@protoc_insertion_point(field_release:atframe.gw.atgateway_client_cfg.reconnect_timeout)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = reconnect_timeout_;
  reconnect_timeout_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* atgateway_client_cfg::_internal_mutable_reconnect_timeout() {
  
  if (reconnect_timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    reconnect_timeout_ = p;
  }
  return reconnect_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* atgateway_client_cfg::mutable_reconnect_timeout() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_reconnect_timeout();
  // @@protoc_insertion_point(field_mutable:atframe.gw.atgateway_client_cfg.reconnect_timeout)
  return _msg;
}
inline void atgateway_client_cfg::set_allocated_reconnect_timeout(::PROTOBUF_NAMESPACE_ID::Duration* reconnect_timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reconnect_timeout_);
  }
  if (reconnect_timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reconnect_timeout));
    if (message_arena != submessage_arena) {
      reconnect_timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reconnect_timeout, submessage_arena);
    }
    
  } else {
    
  }
  reconnect_timeout_ = reconnect_timeout;
  // @@protoc_insertion_point(field_set_allocated:atframe.gw.atgateway_client_cfg.reconnect_timeout)
}

// .google.protobuf.Duration first_idle_timeout = 2 [(.atapp.protocol.CONFIGURE) = {
inline bool atgateway_client_cfg::_internal_has_first_idle_timeout() const {
  return this != internal_default_instance() && first_idle_timeout_ != nullptr;
}
inline bool atgateway_client_cfg::has_first_idle_timeout() const {
  return _internal_has_first_idle_timeout();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& atgateway_client_cfg::_internal_first_idle_timeout() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = first_idle_timeout_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& atgateway_client_cfg::first_idle_timeout() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_cfg.first_idle_timeout)
  return _internal_first_idle_timeout();
}
inline void atgateway_client_cfg::unsafe_arena_set_allocated_first_idle_timeout(
    ::PROTOBUF_NAMESPACE_ID::Duration* first_idle_timeout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_idle_timeout_);
  }
  first_idle_timeout_ = first_idle_timeout;
  if (first_idle_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframe.gw.atgateway_client_cfg.first_idle_timeout)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* atgateway_client_cfg::release_first_idle_timeout() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = first_idle_timeout_;
  first_idle_timeout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* atgateway_client_cfg::unsafe_arena_release_first_idle_timeout() {
  // @@protoc_insertion_point(field_release:atframe.gw.atgateway_client_cfg.first_idle_timeout)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = first_idle_timeout_;
  first_idle_timeout_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* atgateway_client_cfg::_internal_mutable_first_idle_timeout() {
  
  if (first_idle_timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    first_idle_timeout_ = p;
  }
  return first_idle_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* atgateway_client_cfg::mutable_first_idle_timeout() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_first_idle_timeout();
  // @@protoc_insertion_point(field_mutable:atframe.gw.atgateway_client_cfg.first_idle_timeout)
  return _msg;
}
inline void atgateway_client_cfg::set_allocated_first_idle_timeout(::PROTOBUF_NAMESPACE_ID::Duration* first_idle_timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_idle_timeout_);
  }
  if (first_idle_timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_idle_timeout));
    if (message_arena != submessage_arena) {
      first_idle_timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, first_idle_timeout, submessage_arena);
    }
    
  } else {
    
  }
  first_idle_timeout_ = first_idle_timeout;
  // @@protoc_insertion_point(field_set_allocated:atframe.gw.atgateway_client_cfg.first_idle_timeout)
}

// uint64 send_buffer_size = 3 [(.atapp.protocol.CONFIGURE) = {
inline void atgateway_client_cfg::clear_send_buffer_size() {
  send_buffer_size_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_cfg::_internal_send_buffer_size() const {
  return send_buffer_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_cfg::send_buffer_size() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_cfg.send_buffer_size)
  return _internal_send_buffer_size();
}
inline void atgateway_client_cfg::_internal_set_send_buffer_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  send_buffer_size_ = value;
}
inline void atgateway_client_cfg::set_send_buffer_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_send_buffer_size(value);
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_client_cfg.send_buffer_size)
}

// uint64 default_router = 4;
inline void atgateway_client_cfg::clear_default_router() {
  default_router_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_cfg::_internal_default_router() const {
  return default_router_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 atgateway_client_cfg::default_router() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_cfg.default_router)
  return _internal_default_router();
}
inline void atgateway_client_cfg::_internal_set_default_router(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  default_router_ = value;
}
inline void atgateway_client_cfg::set_default_router(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_default_router(value);
  // @@protoc_insertion_point(field_set:atframe.gw.atgateway_client_cfg.default_router)
}

// .atframe.gw.atgateway_client_limit_cfg limit = 5;
inline bool atgateway_client_cfg::_internal_has_limit() const {
  return this != internal_default_instance() && limit_ != nullptr;
}
inline bool atgateway_client_cfg::has_limit() const {
  return _internal_has_limit();
}
inline void atgateway_client_cfg::clear_limit() {
  if (GetArenaForAllocation() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
}
inline const ::atframe::gw::atgateway_client_limit_cfg& atgateway_client_cfg::_internal_limit() const {
  const ::atframe::gw::atgateway_client_limit_cfg* p = limit_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframe::gw::atgateway_client_limit_cfg&>(
      ::atframe::gw::_atgateway_client_limit_cfg_default_instance_);
}
inline const ::atframe::gw::atgateway_client_limit_cfg& atgateway_client_cfg::limit() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_cfg.limit)
  return _internal_limit();
}
inline void atgateway_client_cfg::unsafe_arena_set_allocated_limit(
    ::atframe::gw::atgateway_client_limit_cfg* limit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframe.gw.atgateway_client_cfg.limit)
}
inline ::atframe::gw::atgateway_client_limit_cfg* atgateway_client_cfg::release_limit() {
  
  ::atframe::gw::atgateway_client_limit_cfg* temp = limit_;
  limit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframe::gw::atgateway_client_limit_cfg* atgateway_client_cfg::unsafe_arena_release_limit() {
  // @@protoc_insertion_point(field_release:atframe.gw.atgateway_client_cfg.limit)
  
  ::atframe::gw::atgateway_client_limit_cfg* temp = limit_;
  limit_ = nullptr;
  return temp;
}
inline ::atframe::gw::atgateway_client_limit_cfg* atgateway_client_cfg::_internal_mutable_limit() {
  
  if (limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframe::gw::atgateway_client_limit_cfg>(GetArenaForAllocation());
    limit_ = p;
  }
  return limit_;
}
inline ::atframe::gw::atgateway_client_limit_cfg* atgateway_client_cfg::mutable_limit() {
  ::atframe::gw::atgateway_client_limit_cfg* _msg = _internal_mutable_limit();
  // @@protoc_insertion_point(field_mutable:atframe.gw.atgateway_client_cfg.limit)
  return _msg;
}
inline void atgateway_client_cfg::set_allocated_limit(::atframe::gw::atgateway_client_limit_cfg* limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete limit_;
  }
  if (limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframe::gw::atgateway_client_limit_cfg>::GetOwningArena(limit);
    if (message_arena != submessage_arena) {
      limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    
  } else {
    
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:atframe.gw.atgateway_client_cfg.limit)
}

// .atframe.gw.atgateway_client_crypt_cfg crypt = 6;
inline bool atgateway_client_cfg::_internal_has_crypt() const {
  return this != internal_default_instance() && crypt_ != nullptr;
}
inline bool atgateway_client_cfg::has_crypt() const {
  return _internal_has_crypt();
}
inline void atgateway_client_cfg::clear_crypt() {
  if (GetArenaForAllocation() == nullptr && crypt_ != nullptr) {
    delete crypt_;
  }
  crypt_ = nullptr;
}
inline const ::atframe::gw::atgateway_client_crypt_cfg& atgateway_client_cfg::_internal_crypt() const {
  const ::atframe::gw::atgateway_client_crypt_cfg* p = crypt_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframe::gw::atgateway_client_crypt_cfg&>(
      ::atframe::gw::_atgateway_client_crypt_cfg_default_instance_);
}
inline const ::atframe::gw::atgateway_client_crypt_cfg& atgateway_client_cfg::crypt() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_client_cfg.crypt)
  return _internal_crypt();
}
inline void atgateway_client_cfg::unsafe_arena_set_allocated_crypt(
    ::atframe::gw::atgateway_client_crypt_cfg* crypt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crypt_);
  }
  crypt_ = crypt;
  if (crypt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframe.gw.atgateway_client_cfg.crypt)
}
inline ::atframe::gw::atgateway_client_crypt_cfg* atgateway_client_cfg::release_crypt() {
  
  ::atframe::gw::atgateway_client_crypt_cfg* temp = crypt_;
  crypt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframe::gw::atgateway_client_crypt_cfg* atgateway_client_cfg::unsafe_arena_release_crypt() {
  // @@protoc_insertion_point(field_release:atframe.gw.atgateway_client_cfg.crypt)
  
  ::atframe::gw::atgateway_client_crypt_cfg* temp = crypt_;
  crypt_ = nullptr;
  return temp;
}
inline ::atframe::gw::atgateway_client_crypt_cfg* atgateway_client_cfg::_internal_mutable_crypt() {
  
  if (crypt_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframe::gw::atgateway_client_crypt_cfg>(GetArenaForAllocation());
    crypt_ = p;
  }
  return crypt_;
}
inline ::atframe::gw::atgateway_client_crypt_cfg* atgateway_client_cfg::mutable_crypt() {
  ::atframe::gw::atgateway_client_crypt_cfg* _msg = _internal_mutable_crypt();
  // @@protoc_insertion_point(field_mutable:atframe.gw.atgateway_client_cfg.crypt)
  return _msg;
}
inline void atgateway_client_cfg::set_allocated_crypt(::atframe::gw::atgateway_client_crypt_cfg* crypt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete crypt_;
  }
  if (crypt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframe::gw::atgateway_client_crypt_cfg>::GetOwningArena(crypt);
    if (message_arena != submessage_arena) {
      crypt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crypt, submessage_arena);
    }
    
  } else {
    
  }
  crypt_ = crypt;
  // @@protoc_insertion_point(field_set_allocated:atframe.gw.atgateway_client_cfg.crypt)
}

// -------------------------------------------------------------------

// atgateway_cfg

// .atframe.gw.atgateway_listen_cfg listen = 1;
inline bool atgateway_cfg::_internal_has_listen() const {
  return this != internal_default_instance() && listen_ != nullptr;
}
inline bool atgateway_cfg::has_listen() const {
  return _internal_has_listen();
}
inline void atgateway_cfg::clear_listen() {
  if (GetArenaForAllocation() == nullptr && listen_ != nullptr) {
    delete listen_;
  }
  listen_ = nullptr;
}
inline const ::atframe::gw::atgateway_listen_cfg& atgateway_cfg::_internal_listen() const {
  const ::atframe::gw::atgateway_listen_cfg* p = listen_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframe::gw::atgateway_listen_cfg&>(
      ::atframe::gw::_atgateway_listen_cfg_default_instance_);
}
inline const ::atframe::gw::atgateway_listen_cfg& atgateway_cfg::listen() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_cfg.listen)
  return _internal_listen();
}
inline void atgateway_cfg::unsafe_arena_set_allocated_listen(
    ::atframe::gw::atgateway_listen_cfg* listen) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(listen_);
  }
  listen_ = listen;
  if (listen) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframe.gw.atgateway_cfg.listen)
}
inline ::atframe::gw::atgateway_listen_cfg* atgateway_cfg::release_listen() {
  
  ::atframe::gw::atgateway_listen_cfg* temp = listen_;
  listen_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframe::gw::atgateway_listen_cfg* atgateway_cfg::unsafe_arena_release_listen() {
  // @@protoc_insertion_point(field_release:atframe.gw.atgateway_cfg.listen)
  
  ::atframe::gw::atgateway_listen_cfg* temp = listen_;
  listen_ = nullptr;
  return temp;
}
inline ::atframe::gw::atgateway_listen_cfg* atgateway_cfg::_internal_mutable_listen() {
  
  if (listen_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframe::gw::atgateway_listen_cfg>(GetArenaForAllocation());
    listen_ = p;
  }
  return listen_;
}
inline ::atframe::gw::atgateway_listen_cfg* atgateway_cfg::mutable_listen() {
  ::atframe::gw::atgateway_listen_cfg* _msg = _internal_mutable_listen();
  // @@protoc_insertion_point(field_mutable:atframe.gw.atgateway_cfg.listen)
  return _msg;
}
inline void atgateway_cfg::set_allocated_listen(::atframe::gw::atgateway_listen_cfg* listen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete listen_;
  }
  if (listen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframe::gw::atgateway_listen_cfg>::GetOwningArena(listen);
    if (message_arena != submessage_arena) {
      listen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, listen, submessage_arena);
    }
    
  } else {
    
  }
  listen_ = listen;
  // @@protoc_insertion_point(field_set_allocated:atframe.gw.atgateway_cfg.listen)
}

// .atframe.gw.atgateway_client_cfg client = 2;
inline bool atgateway_cfg::_internal_has_client() const {
  return this != internal_default_instance() && client_ != nullptr;
}
inline bool atgateway_cfg::has_client() const {
  return _internal_has_client();
}
inline void atgateway_cfg::clear_client() {
  if (GetArenaForAllocation() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
}
inline const ::atframe::gw::atgateway_client_cfg& atgateway_cfg::_internal_client() const {
  const ::atframe::gw::atgateway_client_cfg* p = client_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframe::gw::atgateway_client_cfg&>(
      ::atframe::gw::_atgateway_client_cfg_default_instance_);
}
inline const ::atframe::gw::atgateway_client_cfg& atgateway_cfg::client() const {
  // @@protoc_insertion_point(field_get:atframe.gw.atgateway_cfg.client)
  return _internal_client();
}
inline void atgateway_cfg::unsafe_arena_set_allocated_client(
    ::atframe::gw::atgateway_client_cfg* client) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_);
  }
  client_ = client;
  if (client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframe.gw.atgateway_cfg.client)
}
inline ::atframe::gw::atgateway_client_cfg* atgateway_cfg::release_client() {
  
  ::atframe::gw::atgateway_client_cfg* temp = client_;
  client_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframe::gw::atgateway_client_cfg* atgateway_cfg::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:atframe.gw.atgateway_cfg.client)
  
  ::atframe::gw::atgateway_client_cfg* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::atframe::gw::atgateway_client_cfg* atgateway_cfg::_internal_mutable_client() {
  
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframe::gw::atgateway_client_cfg>(GetArenaForAllocation());
    client_ = p;
  }
  return client_;
}
inline ::atframe::gw::atgateway_client_cfg* atgateway_cfg::mutable_client() {
  ::atframe::gw::atgateway_client_cfg* _msg = _internal_mutable_client();
  // @@protoc_insertion_point(field_mutable:atframe.gw.atgateway_cfg.client)
  return _msg;
}
inline void atgateway_cfg::set_allocated_client(::atframe::gw::atgateway_client_cfg* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete client_;
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframe::gw::atgateway_client_cfg>::GetOwningArena(client);
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:atframe.gw.atgateway_cfg.client)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gw
}  // namespace atframe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_libatgw_5fserver_5fconfig_2eproto
