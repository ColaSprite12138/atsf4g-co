// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: libatgw_server_config.proto

#include "libatgw_server_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace atframe {
namespace gw {
constexpr atgateway_listen_cfg::atgateway_listen_cfg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_()
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_client_(uint64_t{0u})
  , backlog_(0){}
struct atgateway_listen_cfgDefaultTypeInternal {
  constexpr atgateway_listen_cfgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~atgateway_listen_cfgDefaultTypeInternal() {}
  union {
    atgateway_listen_cfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT atgateway_listen_cfgDefaultTypeInternal _atgateway_listen_cfg_default_instance_;
constexpr atgateway_client_limit_cfg::atgateway_client_limit_cfg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : total_send_bytes_(uint64_t{0u})
  , total_recv_bytes_(uint64_t{0u})
  , hour_send_bytes_(uint64_t{0u})
  , hour_recv_bytes_(uint64_t{0u})
  , minute_send_bytes_(uint64_t{0u})
  , minute_recv_bytes_(uint64_t{0u})
  , total_send_times_(uint64_t{0u})
  , total_recv_times_(uint64_t{0u})
  , hour_send_times_(uint64_t{0u})
  , hour_recv_times_(uint64_t{0u})
  , minute_send_times_(uint64_t{0u})
  , minute_recv_times_(uint64_t{0u}){}
struct atgateway_client_limit_cfgDefaultTypeInternal {
  constexpr atgateway_client_limit_cfgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~atgateway_client_limit_cfgDefaultTypeInternal() {}
  union {
    atgateway_client_limit_cfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT atgateway_client_limit_cfgDefaultTypeInternal _atgateway_client_limit_cfg_default_instance_;
constexpr atgateway_client_crypt_cfg::atgateway_client_crypt_cfg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dhparam_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , update_interval_(nullptr){}
struct atgateway_client_crypt_cfgDefaultTypeInternal {
  constexpr atgateway_client_crypt_cfgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~atgateway_client_crypt_cfgDefaultTypeInternal() {}
  union {
    atgateway_client_crypt_cfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT atgateway_client_crypt_cfgDefaultTypeInternal _atgateway_client_crypt_cfg_default_instance_;
constexpr atgateway_client_cfg::atgateway_client_cfg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reconnect_timeout_(nullptr)
  , first_idle_timeout_(nullptr)
  , limit_(nullptr)
  , crypt_(nullptr)
  , send_buffer_size_(uint64_t{0u})
  , default_router_(uint64_t{0u}){}
struct atgateway_client_cfgDefaultTypeInternal {
  constexpr atgateway_client_cfgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~atgateway_client_cfgDefaultTypeInternal() {}
  union {
    atgateway_client_cfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT atgateway_client_cfgDefaultTypeInternal _atgateway_client_cfg_default_instance_;
constexpr atgateway_cfg::atgateway_cfg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : listen_(nullptr)
  , client_(nullptr){}
struct atgateway_cfgDefaultTypeInternal {
  constexpr atgateway_cfgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~atgateway_cfgDefaultTypeInternal() {}
  union {
    atgateway_cfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT atgateway_cfgDefaultTypeInternal _atgateway_cfg_default_instance_;
}  // namespace gw
}  // namespace atframe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_libatgw_5fserver_5fconfig_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_libatgw_5fserver_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_libatgw_5fserver_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_libatgw_5fserver_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_listen_cfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_listen_cfg, address_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_listen_cfg, type_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_listen_cfg, max_client_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_listen_cfg, backlog_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_limit_cfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_limit_cfg, total_send_bytes_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_limit_cfg, total_recv_bytes_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_limit_cfg, hour_send_bytes_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_limit_cfg, hour_recv_bytes_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_limit_cfg, minute_send_bytes_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_limit_cfg, minute_recv_bytes_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_limit_cfg, total_send_times_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_limit_cfg, total_recv_times_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_limit_cfg, hour_send_times_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_limit_cfg, hour_recv_times_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_limit_cfg, minute_send_times_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_limit_cfg, minute_recv_times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_crypt_cfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_crypt_cfg, key_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_crypt_cfg, update_interval_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_crypt_cfg, type_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_crypt_cfg, dhparam_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_cfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_cfg, reconnect_timeout_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_cfg, first_idle_timeout_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_cfg, send_buffer_size_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_cfg, default_router_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_cfg, limit_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_client_cfg, crypt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_cfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_cfg, listen_),
  PROTOBUF_FIELD_OFFSET(::atframe::gw::atgateway_cfg, client_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::atframe::gw::atgateway_listen_cfg)},
  { 10, -1, -1, sizeof(::atframe::gw::atgateway_client_limit_cfg)},
  { 28, -1, -1, sizeof(::atframe::gw::atgateway_client_crypt_cfg)},
  { 38, -1, -1, sizeof(::atframe::gw::atgateway_client_cfg)},
  { 50, -1, -1, sizeof(::atframe::gw::atgateway_cfg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframe::gw::_atgateway_listen_cfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframe::gw::_atgateway_client_limit_cfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframe::gw::_atgateway_client_crypt_cfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframe::gw::_atgateway_client_cfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframe::gw::_atgateway_cfg_default_instance_),
};

const char descriptor_table_protodef_libatgw_5fserver_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033libatgw_server_config.proto\022\natframe.g"
  "w\032\036google/protobuf/duration.proto\032\037googl"
  "e/protobuf/timestamp.proto\032\030atframe/atap"
  "p_conf.proto\"v\n\024atgateway_listen_cfg\022\017\n\007"
  "address\030\001 \003(\t\022\014\n\004type\030\002 \001(\t\022\037\n\nmax_clien"
  "t\030\003 \001(\004B\013\262\314\001\007\n\00565536\022\036\n\007backlog\030\004 \001(\005B\r\262"
  "\314\001\t\n\0041024\022\0011\"\204\003\n\032atgateway_client_limit_"
  "cfg\022 \n\020total_send_bytes\030\001 \001(\004B\006\262\314\001\002 \001\022 \n"
  "\020total_recv_bytes\030\002 \001(\004B\006\262\314\001\002 \001\022\037\n\017hour_"
  "send_bytes\030\003 \001(\004B\006\262\314\001\002 \001\022\037\n\017hour_recv_by"
  "tes\030\004 \001(\004B\006\262\314\001\002 \001\022!\n\021minute_send_bytes\030\005"
  " \001(\004B\006\262\314\001\002 \001\022!\n\021minute_recv_bytes\030\006 \001(\004B"
  "\006\262\314\001\002 \001\022\030\n\020total_send_times\030\007 \001(\004\022\030\n\020tot"
  "al_recv_times\030\010 \001(\004\022\027\n\017hour_send_times\030\t"
  " \001(\004\022\027\n\017hour_recv_times\030\n \001(\004\022\031\n\021minute_"
  "send_times\030\013 \001(\004\022\031\n\021minute_recv_times\030\014 "
  "\001(\004\"\214\001\n\032atgateway_client_crypt_cfg\022\013\n\003ke"
  "y\030\001 \001(\t\022B\n\017update_interval\030\002 \001(\0132\031.googl"
  "e.protobuf.DurationB\016\262\314\001\n\n\004300s\022\0021s\022\014\n\004t"
  "ype\030\003 \001(\t\022\017\n\007dhparam\030\004 \001(\t\"\317\002\n\024atgateway"
  "_client_cfg\022D\n\021reconnect_timeout\030\001 \001(\0132\031"
  ".google.protobuf.DurationB\016\262\314\001\n\n\004180s\022\0021"
  "s\022D\n\022first_idle_timeout\030\002 \001(\0132\031.google.p"
  "rotobuf.DurationB\r\262\314\001\t\n\00310s\022\0021s\022%\n\020send_"
  "buffer_size\030\003 \001(\004B\013\262\314\001\007\n\0031MB \001\022\026\n\016defaul"
  "t_router\030\004 \001(\004\0225\n\005limit\030\005 \001(\0132&.atframe."
  "gw.atgateway_client_limit_cfg\0225\n\005crypt\030\006"
  " \001(\0132&.atframe.gw.atgateway_client_crypt"
  "_cfg\"s\n\ratgateway_cfg\0220\n\006listen\030\001 \001(\0132 ."
  "atframe.gw.atgateway_listen_cfg\0220\n\006clien"
  "t\030\002 \001(\0132 .atframe.gw.atgateway_client_cf"
  "gB\005H\001\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_libatgw_5fserver_5fconfig_2eproto_deps[3] = {
  &::descriptor_table_atframe_2fatapp_5fconf_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_libatgw_5fserver_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_libatgw_5fserver_5fconfig_2eproto = {
  false, false, 1256, descriptor_table_protodef_libatgw_5fserver_5fconfig_2eproto, "libatgw_server_config.proto", 
  &descriptor_table_libatgw_5fserver_5fconfig_2eproto_once, descriptor_table_libatgw_5fserver_5fconfig_2eproto_deps, 3, 5,
  schemas, file_default_instances, TableStruct_libatgw_5fserver_5fconfig_2eproto::offsets,
  file_level_metadata_libatgw_5fserver_5fconfig_2eproto, file_level_enum_descriptors_libatgw_5fserver_5fconfig_2eproto, file_level_service_descriptors_libatgw_5fserver_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_libatgw_5fserver_5fconfig_2eproto_getter() {
  return &descriptor_table_libatgw_5fserver_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_libatgw_5fserver_5fconfig_2eproto(&descriptor_table_libatgw_5fserver_5fconfig_2eproto);
namespace atframe {
namespace gw {

// ===================================================================

class atgateway_listen_cfg::_Internal {
 public:
};

atgateway_listen_cfg::atgateway_listen_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  address_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframe.gw.atgateway_listen_cfg)
}
atgateway_listen_cfg::atgateway_listen_cfg(const atgateway_listen_cfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      address_(from.address_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  ::memcpy(&max_client_, &from.max_client_,
    static_cast<size_t>(reinterpret_cast<char*>(&backlog_) -
    reinterpret_cast<char*>(&max_client_)) + sizeof(backlog_));
  // @@protoc_insertion_point(copy_constructor:atframe.gw.atgateway_listen_cfg)
}

inline void atgateway_listen_cfg::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_client_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&backlog_) -
    reinterpret_cast<char*>(&max_client_)) + sizeof(backlog_));
}

atgateway_listen_cfg::~atgateway_listen_cfg() {
  // @@protoc_insertion_point(destructor:atframe.gw.atgateway_listen_cfg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void atgateway_listen_cfg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void atgateway_listen_cfg::ArenaDtor(void* object) {
  atgateway_listen_cfg* _this = reinterpret_cast< atgateway_listen_cfg* >(object);
  (void)_this;
}
void atgateway_listen_cfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void atgateway_listen_cfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void atgateway_listen_cfg::Clear() {
// @@protoc_insertion_point(message_clear_start:atframe.gw.atgateway_listen_cfg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.Clear();
  type_.ClearToEmpty();
  ::memset(&max_client_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backlog_) -
      reinterpret_cast<char*>(&max_client_)) + sizeof(backlog_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* atgateway_listen_cfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_address();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atframe.gw.atgateway_listen_cfg.address"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atframe.gw.atgateway_listen_cfg.type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 max_client = 3 [(.atapp.protocol.CONFIGURE) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          max_client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 backlog = 4 [(.atapp.protocol.CONFIGURE) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          backlog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* atgateway_listen_cfg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframe.gw.atgateway_listen_cfg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string address = 1;
  for (int i = 0, n = this->_internal_address_size(); i < n; i++) {
    const auto& s = this->_internal_address(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atframe.gw.atgateway_listen_cfg.address");
    target = stream->WriteString(1, s, target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atframe.gw.atgateway_listen_cfg.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // uint64 max_client = 3 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_max_client() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_max_client(), target);
  }

  // int32 backlog = 4 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_backlog() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_backlog(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframe.gw.atgateway_listen_cfg)
  return target;
}

size_t atgateway_listen_cfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframe.gw.atgateway_listen_cfg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string address = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(address_.size());
  for (int i = 0, n = address_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      address_.Get(i));
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // uint64 max_client = 3 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_max_client() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_max_client());
  }

  // int32 backlog = 4 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_backlog() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_backlog());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData atgateway_listen_cfg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    atgateway_listen_cfg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*atgateway_listen_cfg::GetClassData() const { return &_class_data_; }

void atgateway_listen_cfg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<atgateway_listen_cfg *>(to)->MergeFrom(
      static_cast<const atgateway_listen_cfg &>(from));
}


void atgateway_listen_cfg::MergeFrom(const atgateway_listen_cfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframe.gw.atgateway_listen_cfg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  address_.MergeFrom(from.address_);
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_max_client() != 0) {
    _internal_set_max_client(from._internal_max_client());
  }
  if (from._internal_backlog() != 0) {
    _internal_set_backlog(from._internal_backlog());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void atgateway_listen_cfg::CopyFrom(const atgateway_listen_cfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframe.gw.atgateway_listen_cfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool atgateway_listen_cfg::IsInitialized() const {
  return true;
}

void atgateway_listen_cfg::InternalSwap(atgateway_listen_cfg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  address_.InternalSwap(&other->address_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(atgateway_listen_cfg, backlog_)
      + sizeof(atgateway_listen_cfg::backlog_)
      - PROTOBUF_FIELD_OFFSET(atgateway_listen_cfg, max_client_)>(
          reinterpret_cast<char*>(&max_client_),
          reinterpret_cast<char*>(&other->max_client_));
}

::PROTOBUF_NAMESPACE_ID::Metadata atgateway_listen_cfg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_libatgw_5fserver_5fconfig_2eproto_getter, &descriptor_table_libatgw_5fserver_5fconfig_2eproto_once,
      file_level_metadata_libatgw_5fserver_5fconfig_2eproto[0]);
}

// ===================================================================

class atgateway_client_limit_cfg::_Internal {
 public:
};

atgateway_client_limit_cfg::atgateway_client_limit_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframe.gw.atgateway_client_limit_cfg)
}
atgateway_client_limit_cfg::atgateway_client_limit_cfg(const atgateway_client_limit_cfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_send_bytes_, &from.total_send_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&minute_recv_times_) -
    reinterpret_cast<char*>(&total_send_bytes_)) + sizeof(minute_recv_times_));
  // @@protoc_insertion_point(copy_constructor:atframe.gw.atgateway_client_limit_cfg)
}

inline void atgateway_client_limit_cfg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_send_bytes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&minute_recv_times_) -
    reinterpret_cast<char*>(&total_send_bytes_)) + sizeof(minute_recv_times_));
}

atgateway_client_limit_cfg::~atgateway_client_limit_cfg() {
  // @@protoc_insertion_point(destructor:atframe.gw.atgateway_client_limit_cfg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void atgateway_client_limit_cfg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void atgateway_client_limit_cfg::ArenaDtor(void* object) {
  atgateway_client_limit_cfg* _this = reinterpret_cast< atgateway_client_limit_cfg* >(object);
  (void)_this;
}
void atgateway_client_limit_cfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void atgateway_client_limit_cfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void atgateway_client_limit_cfg::Clear() {
// @@protoc_insertion_point(message_clear_start:atframe.gw.atgateway_client_limit_cfg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_send_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minute_recv_times_) -
      reinterpret_cast<char*>(&total_send_bytes_)) + sizeof(minute_recv_times_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* atgateway_client_limit_cfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 total_send_bytes = 1 [(.atapp.protocol.CONFIGURE) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          total_send_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_recv_bytes = 2 [(.atapp.protocol.CONFIGURE) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          total_recv_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 hour_send_bytes = 3 [(.atapp.protocol.CONFIGURE) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          hour_send_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 hour_recv_bytes = 4 [(.atapp.protocol.CONFIGURE) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          hour_recv_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 minute_send_bytes = 5 [(.atapp.protocol.CONFIGURE) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          minute_send_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 minute_recv_bytes = 6 [(.atapp.protocol.CONFIGURE) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          minute_recv_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_send_times = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          total_send_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_recv_times = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          total_recv_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 hour_send_times = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          hour_send_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 hour_recv_times = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          hour_recv_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 minute_send_times = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          minute_send_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 minute_recv_times = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          minute_recv_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* atgateway_client_limit_cfg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframe.gw.atgateway_client_limit_cfg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 total_send_bytes = 1 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_total_send_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_total_send_bytes(), target);
  }

  // uint64 total_recv_bytes = 2 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_total_recv_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total_recv_bytes(), target);
  }

  // uint64 hour_send_bytes = 3 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_hour_send_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_hour_send_bytes(), target);
  }

  // uint64 hour_recv_bytes = 4 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_hour_recv_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_hour_recv_bytes(), target);
  }

  // uint64 minute_send_bytes = 5 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_minute_send_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_minute_send_bytes(), target);
  }

  // uint64 minute_recv_bytes = 6 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_minute_recv_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_minute_recv_bytes(), target);
  }

  // uint64 total_send_times = 7;
  if (this->_internal_total_send_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_total_send_times(), target);
  }

  // uint64 total_recv_times = 8;
  if (this->_internal_total_recv_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_total_recv_times(), target);
  }

  // uint64 hour_send_times = 9;
  if (this->_internal_hour_send_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_hour_send_times(), target);
  }

  // uint64 hour_recv_times = 10;
  if (this->_internal_hour_recv_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_hour_recv_times(), target);
  }

  // uint64 minute_send_times = 11;
  if (this->_internal_minute_send_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_minute_send_times(), target);
  }

  // uint64 minute_recv_times = 12;
  if (this->_internal_minute_recv_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_minute_recv_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframe.gw.atgateway_client_limit_cfg)
  return target;
}

size_t atgateway_client_limit_cfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframe.gw.atgateway_client_limit_cfg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 total_send_bytes = 1 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_total_send_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_send_bytes());
  }

  // uint64 total_recv_bytes = 2 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_total_recv_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_recv_bytes());
  }

  // uint64 hour_send_bytes = 3 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_hour_send_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_hour_send_bytes());
  }

  // uint64 hour_recv_bytes = 4 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_hour_recv_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_hour_recv_bytes());
  }

  // uint64 minute_send_bytes = 5 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_minute_send_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_minute_send_bytes());
  }

  // uint64 minute_recv_bytes = 6 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_minute_recv_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_minute_recv_bytes());
  }

  // uint64 total_send_times = 7;
  if (this->_internal_total_send_times() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_send_times());
  }

  // uint64 total_recv_times = 8;
  if (this->_internal_total_recv_times() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_recv_times());
  }

  // uint64 hour_send_times = 9;
  if (this->_internal_hour_send_times() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_hour_send_times());
  }

  // uint64 hour_recv_times = 10;
  if (this->_internal_hour_recv_times() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_hour_recv_times());
  }

  // uint64 minute_send_times = 11;
  if (this->_internal_minute_send_times() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_minute_send_times());
  }

  // uint64 minute_recv_times = 12;
  if (this->_internal_minute_recv_times() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_minute_recv_times());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData atgateway_client_limit_cfg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    atgateway_client_limit_cfg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*atgateway_client_limit_cfg::GetClassData() const { return &_class_data_; }

void atgateway_client_limit_cfg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<atgateway_client_limit_cfg *>(to)->MergeFrom(
      static_cast<const atgateway_client_limit_cfg &>(from));
}


void atgateway_client_limit_cfg::MergeFrom(const atgateway_client_limit_cfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframe.gw.atgateway_client_limit_cfg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_total_send_bytes() != 0) {
    _internal_set_total_send_bytes(from._internal_total_send_bytes());
  }
  if (from._internal_total_recv_bytes() != 0) {
    _internal_set_total_recv_bytes(from._internal_total_recv_bytes());
  }
  if (from._internal_hour_send_bytes() != 0) {
    _internal_set_hour_send_bytes(from._internal_hour_send_bytes());
  }
  if (from._internal_hour_recv_bytes() != 0) {
    _internal_set_hour_recv_bytes(from._internal_hour_recv_bytes());
  }
  if (from._internal_minute_send_bytes() != 0) {
    _internal_set_minute_send_bytes(from._internal_minute_send_bytes());
  }
  if (from._internal_minute_recv_bytes() != 0) {
    _internal_set_minute_recv_bytes(from._internal_minute_recv_bytes());
  }
  if (from._internal_total_send_times() != 0) {
    _internal_set_total_send_times(from._internal_total_send_times());
  }
  if (from._internal_total_recv_times() != 0) {
    _internal_set_total_recv_times(from._internal_total_recv_times());
  }
  if (from._internal_hour_send_times() != 0) {
    _internal_set_hour_send_times(from._internal_hour_send_times());
  }
  if (from._internal_hour_recv_times() != 0) {
    _internal_set_hour_recv_times(from._internal_hour_recv_times());
  }
  if (from._internal_minute_send_times() != 0) {
    _internal_set_minute_send_times(from._internal_minute_send_times());
  }
  if (from._internal_minute_recv_times() != 0) {
    _internal_set_minute_recv_times(from._internal_minute_recv_times());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void atgateway_client_limit_cfg::CopyFrom(const atgateway_client_limit_cfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframe.gw.atgateway_client_limit_cfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool atgateway_client_limit_cfg::IsInitialized() const {
  return true;
}

void atgateway_client_limit_cfg::InternalSwap(atgateway_client_limit_cfg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(atgateway_client_limit_cfg, minute_recv_times_)
      + sizeof(atgateway_client_limit_cfg::minute_recv_times_)
      - PROTOBUF_FIELD_OFFSET(atgateway_client_limit_cfg, total_send_bytes_)>(
          reinterpret_cast<char*>(&total_send_bytes_),
          reinterpret_cast<char*>(&other->total_send_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata atgateway_client_limit_cfg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_libatgw_5fserver_5fconfig_2eproto_getter, &descriptor_table_libatgw_5fserver_5fconfig_2eproto_once,
      file_level_metadata_libatgw_5fserver_5fconfig_2eproto[1]);
}

// ===================================================================

class atgateway_client_crypt_cfg::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& update_interval(const atgateway_client_crypt_cfg* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
atgateway_client_crypt_cfg::_Internal::update_interval(const atgateway_client_crypt_cfg* msg) {
  return *msg->update_interval_;
}
void atgateway_client_crypt_cfg::clear_update_interval() {
  if (GetArenaForAllocation() == nullptr && update_interval_ != nullptr) {
    delete update_interval_;
  }
  update_interval_ = nullptr;
}
atgateway_client_crypt_cfg::atgateway_client_crypt_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframe.gw.atgateway_client_crypt_cfg)
}
atgateway_client_crypt_cfg::atgateway_client_crypt_cfg(const atgateway_client_crypt_cfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  dhparam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dhparam_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dhparam().empty()) {
    dhparam_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dhparam(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_update_interval()) {
    update_interval_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.update_interval_);
  } else {
    update_interval_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atframe.gw.atgateway_client_crypt_cfg)
}

inline void atgateway_client_crypt_cfg::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dhparam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dhparam_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
update_interval_ = nullptr;
}

atgateway_client_crypt_cfg::~atgateway_client_crypt_cfg() {
  // @@protoc_insertion_point(destructor:atframe.gw.atgateway_client_crypt_cfg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void atgateway_client_crypt_cfg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dhparam_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete update_interval_;
}

void atgateway_client_crypt_cfg::ArenaDtor(void* object) {
  atgateway_client_crypt_cfg* _this = reinterpret_cast< atgateway_client_crypt_cfg* >(object);
  (void)_this;
}
void atgateway_client_crypt_cfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void atgateway_client_crypt_cfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void atgateway_client_crypt_cfg::Clear() {
// @@protoc_insertion_point(message_clear_start:atframe.gw.atgateway_client_crypt_cfg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  type_.ClearToEmpty();
  dhparam_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && update_interval_ != nullptr) {
    delete update_interval_;
  }
  update_interval_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* atgateway_client_crypt_cfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atframe.gw.atgateway_client_crypt_cfg.key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration update_interval = 2 [(.atapp.protocol.CONFIGURE) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_interval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atframe.gw.atgateway_client_crypt_cfg.type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dhparam = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_dhparam();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atframe.gw.atgateway_client_crypt_cfg.dhparam"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* atgateway_client_crypt_cfg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframe.gw.atgateway_client_crypt_cfg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atframe.gw.atgateway_client_crypt_cfg.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .google.protobuf.Duration update_interval = 2 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_has_update_interval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::update_interval(this), target, stream);
  }

  // string type = 3;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atframe.gw.atgateway_client_crypt_cfg.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // string dhparam = 4;
  if (!this->_internal_dhparam().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dhparam().data(), static_cast<int>(this->_internal_dhparam().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atframe.gw.atgateway_client_crypt_cfg.dhparam");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_dhparam(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframe.gw.atgateway_client_crypt_cfg)
  return target;
}

size_t atgateway_client_crypt_cfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframe.gw.atgateway_client_crypt_cfg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string type = 3;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string dhparam = 4;
  if (!this->_internal_dhparam().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dhparam());
  }

  // .google.protobuf.Duration update_interval = 2 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_has_update_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_interval_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData atgateway_client_crypt_cfg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    atgateway_client_crypt_cfg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*atgateway_client_crypt_cfg::GetClassData() const { return &_class_data_; }

void atgateway_client_crypt_cfg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<atgateway_client_crypt_cfg *>(to)->MergeFrom(
      static_cast<const atgateway_client_crypt_cfg &>(from));
}


void atgateway_client_crypt_cfg::MergeFrom(const atgateway_client_crypt_cfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframe.gw.atgateway_client_crypt_cfg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_dhparam().empty()) {
    _internal_set_dhparam(from._internal_dhparam());
  }
  if (from._internal_has_update_interval()) {
    _internal_mutable_update_interval()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_update_interval());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void atgateway_client_crypt_cfg::CopyFrom(const atgateway_client_crypt_cfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframe.gw.atgateway_client_crypt_cfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool atgateway_client_crypt_cfg::IsInitialized() const {
  return true;
}

void atgateway_client_crypt_cfg::InternalSwap(atgateway_client_crypt_cfg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dhparam_, lhs_arena,
      &other->dhparam_, rhs_arena
  );
  swap(update_interval_, other->update_interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata atgateway_client_crypt_cfg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_libatgw_5fserver_5fconfig_2eproto_getter, &descriptor_table_libatgw_5fserver_5fconfig_2eproto_once,
      file_level_metadata_libatgw_5fserver_5fconfig_2eproto[2]);
}

// ===================================================================

class atgateway_client_cfg::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& reconnect_timeout(const atgateway_client_cfg* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& first_idle_timeout(const atgateway_client_cfg* msg);
  static const ::atframe::gw::atgateway_client_limit_cfg& limit(const atgateway_client_cfg* msg);
  static const ::atframe::gw::atgateway_client_crypt_cfg& crypt(const atgateway_client_cfg* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
atgateway_client_cfg::_Internal::reconnect_timeout(const atgateway_client_cfg* msg) {
  return *msg->reconnect_timeout_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
atgateway_client_cfg::_Internal::first_idle_timeout(const atgateway_client_cfg* msg) {
  return *msg->first_idle_timeout_;
}
const ::atframe::gw::atgateway_client_limit_cfg&
atgateway_client_cfg::_Internal::limit(const atgateway_client_cfg* msg) {
  return *msg->limit_;
}
const ::atframe::gw::atgateway_client_crypt_cfg&
atgateway_client_cfg::_Internal::crypt(const atgateway_client_cfg* msg) {
  return *msg->crypt_;
}
void atgateway_client_cfg::clear_reconnect_timeout() {
  if (GetArenaForAllocation() == nullptr && reconnect_timeout_ != nullptr) {
    delete reconnect_timeout_;
  }
  reconnect_timeout_ = nullptr;
}
void atgateway_client_cfg::clear_first_idle_timeout() {
  if (GetArenaForAllocation() == nullptr && first_idle_timeout_ != nullptr) {
    delete first_idle_timeout_;
  }
  first_idle_timeout_ = nullptr;
}
atgateway_client_cfg::atgateway_client_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframe.gw.atgateway_client_cfg)
}
atgateway_client_cfg::atgateway_client_cfg(const atgateway_client_cfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reconnect_timeout()) {
    reconnect_timeout_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.reconnect_timeout_);
  } else {
    reconnect_timeout_ = nullptr;
  }
  if (from._internal_has_first_idle_timeout()) {
    first_idle_timeout_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.first_idle_timeout_);
  } else {
    first_idle_timeout_ = nullptr;
  }
  if (from._internal_has_limit()) {
    limit_ = new ::atframe::gw::atgateway_client_limit_cfg(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  if (from._internal_has_crypt()) {
    crypt_ = new ::atframe::gw::atgateway_client_crypt_cfg(*from.crypt_);
  } else {
    crypt_ = nullptr;
  }
  ::memcpy(&send_buffer_size_, &from.send_buffer_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_router_) -
    reinterpret_cast<char*>(&send_buffer_size_)) + sizeof(default_router_));
  // @@protoc_insertion_point(copy_constructor:atframe.gw.atgateway_client_cfg)
}

inline void atgateway_client_cfg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reconnect_timeout_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&default_router_) -
    reinterpret_cast<char*>(&reconnect_timeout_)) + sizeof(default_router_));
}

atgateway_client_cfg::~atgateway_client_cfg() {
  // @@protoc_insertion_point(destructor:atframe.gw.atgateway_client_cfg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void atgateway_client_cfg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete reconnect_timeout_;
  if (this != internal_default_instance()) delete first_idle_timeout_;
  if (this != internal_default_instance()) delete limit_;
  if (this != internal_default_instance()) delete crypt_;
}

void atgateway_client_cfg::ArenaDtor(void* object) {
  atgateway_client_cfg* _this = reinterpret_cast< atgateway_client_cfg* >(object);
  (void)_this;
}
void atgateway_client_cfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void atgateway_client_cfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void atgateway_client_cfg::Clear() {
// @@protoc_insertion_point(message_clear_start:atframe.gw.atgateway_client_cfg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && reconnect_timeout_ != nullptr) {
    delete reconnect_timeout_;
  }
  reconnect_timeout_ = nullptr;
  if (GetArenaForAllocation() == nullptr && first_idle_timeout_ != nullptr) {
    delete first_idle_timeout_;
  }
  first_idle_timeout_ = nullptr;
  if (GetArenaForAllocation() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && crypt_ != nullptr) {
    delete crypt_;
  }
  crypt_ = nullptr;
  ::memset(&send_buffer_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_router_) -
      reinterpret_cast<char*>(&send_buffer_size_)) + sizeof(default_router_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* atgateway_client_cfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration reconnect_timeout = 1 [(.atapp.protocol.CONFIGURE) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reconnect_timeout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration first_idle_timeout = 2 [(.atapp.protocol.CONFIGURE) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_idle_timeout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 send_buffer_size = 3 [(.atapp.protocol.CONFIGURE) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          send_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 default_router = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          default_router_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .atframe.gw.atgateway_client_limit_cfg limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .atframe.gw.atgateway_client_crypt_cfg crypt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_crypt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* atgateway_client_cfg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframe.gw.atgateway_client_cfg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration reconnect_timeout = 1 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_has_reconnect_timeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reconnect_timeout(this), target, stream);
  }

  // .google.protobuf.Duration first_idle_timeout = 2 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_has_first_idle_timeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::first_idle_timeout(this), target, stream);
  }

  // uint64 send_buffer_size = 3 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_send_buffer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_send_buffer_size(), target);
  }

  // uint64 default_router = 4;
  if (this->_internal_default_router() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_default_router(), target);
  }

  // .atframe.gw.atgateway_client_limit_cfg limit = 5;
  if (this->_internal_has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::limit(this), target, stream);
  }

  // .atframe.gw.atgateway_client_crypt_cfg crypt = 6;
  if (this->_internal_has_crypt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::crypt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframe.gw.atgateway_client_cfg)
  return target;
}

size_t atgateway_client_cfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframe.gw.atgateway_client_cfg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration reconnect_timeout = 1 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_has_reconnect_timeout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reconnect_timeout_);
  }

  // .google.protobuf.Duration first_idle_timeout = 2 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_has_first_idle_timeout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *first_idle_timeout_);
  }

  // .atframe.gw.atgateway_client_limit_cfg limit = 5;
  if (this->_internal_has_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  // .atframe.gw.atgateway_client_crypt_cfg crypt = 6;
  if (this->_internal_has_crypt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *crypt_);
  }

  // uint64 send_buffer_size = 3 [(.atapp.protocol.CONFIGURE) = {
  if (this->_internal_send_buffer_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_send_buffer_size());
  }

  // uint64 default_router = 4;
  if (this->_internal_default_router() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_default_router());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData atgateway_client_cfg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    atgateway_client_cfg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*atgateway_client_cfg::GetClassData() const { return &_class_data_; }

void atgateway_client_cfg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<atgateway_client_cfg *>(to)->MergeFrom(
      static_cast<const atgateway_client_cfg &>(from));
}


void atgateway_client_cfg::MergeFrom(const atgateway_client_cfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframe.gw.atgateway_client_cfg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reconnect_timeout()) {
    _internal_mutable_reconnect_timeout()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_reconnect_timeout());
  }
  if (from._internal_has_first_idle_timeout()) {
    _internal_mutable_first_idle_timeout()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_first_idle_timeout());
  }
  if (from._internal_has_limit()) {
    _internal_mutable_limit()->::atframe::gw::atgateway_client_limit_cfg::MergeFrom(from._internal_limit());
  }
  if (from._internal_has_crypt()) {
    _internal_mutable_crypt()->::atframe::gw::atgateway_client_crypt_cfg::MergeFrom(from._internal_crypt());
  }
  if (from._internal_send_buffer_size() != 0) {
    _internal_set_send_buffer_size(from._internal_send_buffer_size());
  }
  if (from._internal_default_router() != 0) {
    _internal_set_default_router(from._internal_default_router());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void atgateway_client_cfg::CopyFrom(const atgateway_client_cfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframe.gw.atgateway_client_cfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool atgateway_client_cfg::IsInitialized() const {
  return true;
}

void atgateway_client_cfg::InternalSwap(atgateway_client_cfg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(atgateway_client_cfg, default_router_)
      + sizeof(atgateway_client_cfg::default_router_)
      - PROTOBUF_FIELD_OFFSET(atgateway_client_cfg, reconnect_timeout_)>(
          reinterpret_cast<char*>(&reconnect_timeout_),
          reinterpret_cast<char*>(&other->reconnect_timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata atgateway_client_cfg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_libatgw_5fserver_5fconfig_2eproto_getter, &descriptor_table_libatgw_5fserver_5fconfig_2eproto_once,
      file_level_metadata_libatgw_5fserver_5fconfig_2eproto[3]);
}

// ===================================================================

class atgateway_cfg::_Internal {
 public:
  static const ::atframe::gw::atgateway_listen_cfg& listen(const atgateway_cfg* msg);
  static const ::atframe::gw::atgateway_client_cfg& client(const atgateway_cfg* msg);
};

const ::atframe::gw::atgateway_listen_cfg&
atgateway_cfg::_Internal::listen(const atgateway_cfg* msg) {
  return *msg->listen_;
}
const ::atframe::gw::atgateway_client_cfg&
atgateway_cfg::_Internal::client(const atgateway_cfg* msg) {
  return *msg->client_;
}
atgateway_cfg::atgateway_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframe.gw.atgateway_cfg)
}
atgateway_cfg::atgateway_cfg(const atgateway_cfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_listen()) {
    listen_ = new ::atframe::gw::atgateway_listen_cfg(*from.listen_);
  } else {
    listen_ = nullptr;
  }
  if (from._internal_has_client()) {
    client_ = new ::atframe::gw::atgateway_client_cfg(*from.client_);
  } else {
    client_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atframe.gw.atgateway_cfg)
}

inline void atgateway_cfg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&listen_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_) -
    reinterpret_cast<char*>(&listen_)) + sizeof(client_));
}

atgateway_cfg::~atgateway_cfg() {
  // @@protoc_insertion_point(destructor:atframe.gw.atgateway_cfg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void atgateway_cfg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete listen_;
  if (this != internal_default_instance()) delete client_;
}

void atgateway_cfg::ArenaDtor(void* object) {
  atgateway_cfg* _this = reinterpret_cast< atgateway_cfg* >(object);
  (void)_this;
}
void atgateway_cfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void atgateway_cfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void atgateway_cfg::Clear() {
// @@protoc_insertion_point(message_clear_start:atframe.gw.atgateway_cfg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && listen_ != nullptr) {
    delete listen_;
  }
  listen_ = nullptr;
  if (GetArenaForAllocation() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* atgateway_cfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .atframe.gw.atgateway_listen_cfg listen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_listen(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .atframe.gw.atgateway_client_cfg client = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_client(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* atgateway_cfg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframe.gw.atgateway_cfg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .atframe.gw.atgateway_listen_cfg listen = 1;
  if (this->_internal_has_listen()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::listen(this), target, stream);
  }

  // .atframe.gw.atgateway_client_cfg client = 2;
  if (this->_internal_has_client()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::client(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframe.gw.atgateway_cfg)
  return target;
}

size_t atgateway_cfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframe.gw.atgateway_cfg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atframe.gw.atgateway_listen_cfg listen = 1;
  if (this->_internal_has_listen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *listen_);
  }

  // .atframe.gw.atgateway_client_cfg client = 2;
  if (this->_internal_has_client()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData atgateway_cfg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    atgateway_cfg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*atgateway_cfg::GetClassData() const { return &_class_data_; }

void atgateway_cfg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<atgateway_cfg *>(to)->MergeFrom(
      static_cast<const atgateway_cfg &>(from));
}


void atgateway_cfg::MergeFrom(const atgateway_cfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframe.gw.atgateway_cfg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_listen()) {
    _internal_mutable_listen()->::atframe::gw::atgateway_listen_cfg::MergeFrom(from._internal_listen());
  }
  if (from._internal_has_client()) {
    _internal_mutable_client()->::atframe::gw::atgateway_client_cfg::MergeFrom(from._internal_client());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void atgateway_cfg::CopyFrom(const atgateway_cfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframe.gw.atgateway_cfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool atgateway_cfg::IsInitialized() const {
  return true;
}

void atgateway_cfg::InternalSwap(atgateway_cfg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(atgateway_cfg, client_)
      + sizeof(atgateway_cfg::client_)
      - PROTOBUF_FIELD_OFFSET(atgateway_cfg, listen_)>(
          reinterpret_cast<char*>(&listen_),
          reinterpret_cast<char*>(&other->listen_));
}

::PROTOBUF_NAMESPACE_ID::Metadata atgateway_cfg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_libatgw_5fserver_5fconfig_2eproto_getter, &descriptor_table_libatgw_5fserver_5fconfig_2eproto_once,
      file_level_metadata_libatgw_5fserver_5fconfig_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gw
}  // namespace atframe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::atframe::gw::atgateway_listen_cfg* Arena::CreateMaybeMessage< ::atframe::gw::atgateway_listen_cfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframe::gw::atgateway_listen_cfg >(arena);
}
template<> PROTOBUF_NOINLINE ::atframe::gw::atgateway_client_limit_cfg* Arena::CreateMaybeMessage< ::atframe::gw::atgateway_client_limit_cfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframe::gw::atgateway_client_limit_cfg >(arena);
}
template<> PROTOBUF_NOINLINE ::atframe::gw::atgateway_client_crypt_cfg* Arena::CreateMaybeMessage< ::atframe::gw::atgateway_client_crypt_cfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframe::gw::atgateway_client_crypt_cfg >(arena);
}
template<> PROTOBUF_NOINLINE ::atframe::gw::atgateway_client_cfg* Arena::CreateMaybeMessage< ::atframe::gw::atgateway_client_cfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframe::gw::atgateway_client_cfg >(arena);
}
template<> PROTOBUF_NOINLINE ::atframe::gw::atgateway_cfg* Arena::CreateMaybeMessage< ::atframe::gw::atgateway_cfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframe::gw::atgateway_cfg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
