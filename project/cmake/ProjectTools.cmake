set(LOG_WRAPPER_CATEGORIZE_SIZE
    16
    CACHE STRING "全局日志分类个数限制")
add_compiler_define(LOG_WRAPPER_CATEGORIZE_SIZE=${LOG_WRAPPER_CATEGORIZE_SIZE})

set(PROJECT_INSTALL_EXPORT_NAME "${PROJECT_NAME}-target")
set(PROJECT_INSTALL_EXPORT_FILE
    "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/cmake/${PROJECT_NAME}/${PROJECT_INSTALL_EXPORT_NAME}.cmake")
if(NOT EXISTS "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/cmake/${PROJECT_NAME}")
  file(MAKE_DIRECTORY "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/cmake/${PROJECT_NAME}")
endif()
macro(project_install_and_export_targets)
  foreach(PROJECT_INSTALL_EXPORT_TARGET ${ARGN})
    install(
      TARGETS ${PROJECT_INSTALL_EXPORT_TARGET}
      EXPORT ${PROJECT_INSTALL_EXPORT_NAME}
      RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
      LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}/${SERVER_FRAME_VCS_COMMIT_SHORT_SHA}"
      ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}/${SERVER_FRAME_VCS_COMMIT_SHORT_SHA}")
  endforeach()
  unset(PROJECT_INSTALL_EXPORT_TARGET)
endmacro()

unset(PROJECT_COMMON_PRIVATE_COMPILE_OPTIONS)
if(COMPILER_STRICT_CFLAGS)
  list(APPEND PROJECT_COMMON_PRIVATE_COMPILE_OPTIONS ${COMPILER_STRICT_CFLAGS})
endif()
if(COMPILER_STRICT_EXTRA_CFLAGS)
  list(APPEND PROJECT_COMMON_PRIVATE_COMPILE_OPTIONS ${COMPILER_STRICT_EXTRA_CFLAGS})
endif()

function(project_link_or_copy_files)
  set(FILE_LIST ${ARGN})
  list(POP_BACK FILE_LIST DESTINATION)
  if(NOT EXISTS "${DESTINATION}")
    file(MAKE_DIRECTORY "${DESTINATION}")
  endif()
  foreach(FILE_PATH IN LISTS FILE_LIST)
    if(IS_SYMLINK "${FILE_PATH}")
      get_filename_component(FILE_BASENAME "${FILE_PATH}" NAME)
      file(READ_SYMLINK "${FILE_PATH}" FILE_REALPATH)
      if(EXISTS "${DESTINATION}/${FILE_BASENAME}")
        file(REMOVE "${DESTINATION}/${FILE_BASENAME}")
      endif()
      file(
        CREATE_LINK "${FILE_REALPATH}" "${DESTINATION}/${FILE_BASENAME}"
        RESULT CREATE_LINK_RESULT
        COPY_ON_ERROR SYMBOLIC)
      if(NOT CREATE_LINK_RESULT EQUAL 0)
        echowithcolor(COLOR GREEN
                      "-- Try to link ${FILE_PATH} to ${DESTINATION}/${FILE_BASENAME} failed: ${CREATE_LINK_RESULT}")
      endif()
    elseif(IS_DIRECTORY "${FILE_PATH}")
      get_filename_component(FILE_BASENAME "${FILE_PATH}" NAME)
      file(
        GLOB FILES_IN_SUBDIRECTORY
        LIST_DIRECTORIES TRUE
        "${FILE_PATH}/*")
      if(FILES_IN_SUBDIRECTORY)
        project_link_or_copy_files(${FILES_IN_SUBDIRECTORY} "${DESTINATION}/${FILE_BASENAME}")
      endif()
    else()
      get_filename_component(FILE_BASENAME "${FILE_PATH}" NAME)
      if(EXISTS "${DESTINATION}/${FILE_BASENAME}")
        file(REMOVE "${DESTINATION}/${FILE_BASENAME}")
      endif()
      file(
        CREATE_LINK "${FILE_PATH}" "${DESTINATION}/${FILE_BASENAME}"
        RESULT CREATE_LINK_RESULT
        COPY_ON_ERROR)
      if(NOT CREATE_LINK_RESULT EQUAL 0)
        echowithcolor(COLOR GREEN
                      "-- Try to link ${FILE_PATH} to ${DESTINATION}/${FILE_BASENAME} failed: ${CREATE_LINK_RESULT}")
      endif()
    endif()
  endforeach()
endfunction()
