// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pbdesc/distributed_transaction.proto

#include "pbdesc/distributed_transaction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace atframework {
namespace distributed_system {
constexpr transaction_participator::transaction_participator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : participator_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , participator_data_(nullptr)
  , participator_status_(0)
{}
struct transaction_participatorDefaultTypeInternal {
  constexpr transaction_participatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transaction_participatorDefaultTypeInternal() {}
  union {
    transaction_participator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transaction_participatorDefaultTypeInternal _transaction_participator_default_instance_;
constexpr transaction_configure::transaction_configure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resolve_retry_interval_(nullptr)
  , lock_wait_interval_min_(nullptr)
  , lock_wait_interval_max_(nullptr)
  , force_commit_(false)
  , resolve_max_times_(0u)
  , lock_retry_max_times_(0u){}
struct transaction_configureDefaultTypeInternal {
  constexpr transaction_configureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transaction_configureDefaultTypeInternal() {}
  union {
    transaction_configure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transaction_configureDefaultTypeInternal _transaction_configure_default_instance_;
constexpr transaction_metadata::transaction_metadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : replicate_node_server_id_()
  , _replicate_node_server_id_cached_byte_size_(0)
  , transaction_uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prepare_timepoint_(nullptr)
  , finish_timepoint_(nullptr)
  , expire_timepoint_(nullptr)
  , status_(0)

  , replicate_read_count_(0u)
  , memory_only_(false){}
struct transaction_metadataDefaultTypeInternal {
  constexpr transaction_metadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transaction_metadataDefaultTypeInternal() {}
  union {
    transaction_metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transaction_metadataDefaultTypeInternal _transaction_metadata_default_instance_;
constexpr transaction_blob_storage_ParticipatorsEntry_DoNotUse::transaction_blob_storage_ParticipatorsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct transaction_blob_storage_ParticipatorsEntry_DoNotUseDefaultTypeInternal {
  constexpr transaction_blob_storage_ParticipatorsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transaction_blob_storage_ParticipatorsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    transaction_blob_storage_ParticipatorsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transaction_blob_storage_ParticipatorsEntry_DoNotUseDefaultTypeInternal _transaction_blob_storage_ParticipatorsEntry_DoNotUse_default_instance_;
constexpr transaction_blob_storage::transaction_blob_storage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : participators_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , metadata_(nullptr)
  , configure_(nullptr)
  , transaction_data_(nullptr){}
struct transaction_blob_storageDefaultTypeInternal {
  constexpr transaction_blob_storageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transaction_blob_storageDefaultTypeInternal() {}
  union {
    transaction_blob_storage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transaction_blob_storageDefaultTypeInternal _transaction_blob_storage_default_instance_;
constexpr transaction_participator_storage::transaction_participator_storage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lock_resource_()
  , metadata_(nullptr)
  , configure_(nullptr)
  , participator_data_(nullptr)
  , transaction_data_(nullptr)
  , resolve_timepoint_(nullptr)
  , resolve_times_(0u){}
struct transaction_participator_storageDefaultTypeInternal {
  constexpr transaction_participator_storageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transaction_participator_storageDefaultTypeInternal() {}
  union {
    transaction_participator_storage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transaction_participator_storageDefaultTypeInternal _transaction_participator_storage_default_instance_;
constexpr transaction_participator_failure_reason::transaction_participator_failure_reason(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : locked_resource_()
  , allow_retry_(false){}
struct transaction_participator_failure_reasonDefaultTypeInternal {
  constexpr transaction_participator_failure_reasonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transaction_participator_failure_reasonDefaultTypeInternal() {}
  union {
    transaction_participator_failure_reason _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transaction_participator_failure_reasonDefaultTypeInternal _transaction_participator_failure_reason_default_instance_;
constexpr transaction_participator_snapshot::transaction_participator_snapshot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : running_transaction_()
  , finished_transaction_(){}
struct transaction_participator_snapshotDefaultTypeInternal {
  constexpr transaction_participator_snapshotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transaction_participator_snapshotDefaultTypeInternal() {}
  union {
    transaction_participator_snapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transaction_participator_snapshotDefaultTypeInternal _transaction_participator_snapshot_default_instance_;
constexpr SSDistributeTransactionQueryReq::SSDistributeTransactionQueryReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr){}
struct SSDistributeTransactionQueryReqDefaultTypeInternal {
  constexpr SSDistributeTransactionQueryReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDistributeTransactionQueryReqDefaultTypeInternal() {}
  union {
    SSDistributeTransactionQueryReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDistributeTransactionQueryReqDefaultTypeInternal _SSDistributeTransactionQueryReq_default_instance_;
constexpr SSDistributeTransactionQueryRsp::SSDistributeTransactionQueryRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : storage_(nullptr){}
struct SSDistributeTransactionQueryRspDefaultTypeInternal {
  constexpr SSDistributeTransactionQueryRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDistributeTransactionQueryRspDefaultTypeInternal() {}
  union {
    SSDistributeTransactionQueryRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDistributeTransactionQueryRspDefaultTypeInternal _SSDistributeTransactionQueryRsp_default_instance_;
constexpr SSDistributeTransactionCreateReq::SSDistributeTransactionCreateReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : storage_(nullptr){}
struct SSDistributeTransactionCreateReqDefaultTypeInternal {
  constexpr SSDistributeTransactionCreateReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDistributeTransactionCreateReqDefaultTypeInternal() {}
  union {
    SSDistributeTransactionCreateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDistributeTransactionCreateReqDefaultTypeInternal _SSDistributeTransactionCreateReq_default_instance_;
constexpr SSDistributeTransactionCreateRsp::SSDistributeTransactionCreateRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SSDistributeTransactionCreateRspDefaultTypeInternal {
  constexpr SSDistributeTransactionCreateRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDistributeTransactionCreateRspDefaultTypeInternal() {}
  union {
    SSDistributeTransactionCreateRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDistributeTransactionCreateRspDefaultTypeInternal _SSDistributeTransactionCreateRsp_default_instance_;
constexpr SSDistributeTransactionCommitReq::SSDistributeTransactionCommitReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr){}
struct SSDistributeTransactionCommitReqDefaultTypeInternal {
  constexpr SSDistributeTransactionCommitReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDistributeTransactionCommitReqDefaultTypeInternal() {}
  union {
    SSDistributeTransactionCommitReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDistributeTransactionCommitReqDefaultTypeInternal _SSDistributeTransactionCommitReq_default_instance_;
constexpr SSDistributeTransactionCommitRsp::SSDistributeTransactionCommitRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr){}
struct SSDistributeTransactionCommitRspDefaultTypeInternal {
  constexpr SSDistributeTransactionCommitRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDistributeTransactionCommitRspDefaultTypeInternal() {}
  union {
    SSDistributeTransactionCommitRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDistributeTransactionCommitRspDefaultTypeInternal _SSDistributeTransactionCommitRsp_default_instance_;
constexpr SSDistributeTransactionRejectReq::SSDistributeTransactionRejectReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr){}
struct SSDistributeTransactionRejectReqDefaultTypeInternal {
  constexpr SSDistributeTransactionRejectReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDistributeTransactionRejectReqDefaultTypeInternal() {}
  union {
    SSDistributeTransactionRejectReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDistributeTransactionRejectReqDefaultTypeInternal _SSDistributeTransactionRejectReq_default_instance_;
constexpr SSDistributeTransactionRejectRsp::SSDistributeTransactionRejectRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr){}
struct SSDistributeTransactionRejectRspDefaultTypeInternal {
  constexpr SSDistributeTransactionRejectRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDistributeTransactionRejectRspDefaultTypeInternal() {}
  union {
    SSDistributeTransactionRejectRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDistributeTransactionRejectRspDefaultTypeInternal _SSDistributeTransactionRejectRsp_default_instance_;
constexpr SSDistributeTransactionCommitParticipatorReq::SSDistributeTransactionCommitParticipatorReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : participator_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(nullptr){}
struct SSDistributeTransactionCommitParticipatorReqDefaultTypeInternal {
  constexpr SSDistributeTransactionCommitParticipatorReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDistributeTransactionCommitParticipatorReqDefaultTypeInternal() {}
  union {
    SSDistributeTransactionCommitParticipatorReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDistributeTransactionCommitParticipatorReqDefaultTypeInternal _SSDistributeTransactionCommitParticipatorReq_default_instance_;
constexpr SSDistributeTransactionCommitParticipatorRsp::SSDistributeTransactionCommitParticipatorRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr){}
struct SSDistributeTransactionCommitParticipatorRspDefaultTypeInternal {
  constexpr SSDistributeTransactionCommitParticipatorRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDistributeTransactionCommitParticipatorRspDefaultTypeInternal() {}
  union {
    SSDistributeTransactionCommitParticipatorRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDistributeTransactionCommitParticipatorRspDefaultTypeInternal _SSDistributeTransactionCommitParticipatorRsp_default_instance_;
constexpr SSDistributeTransactionRejectParticipatorReq::SSDistributeTransactionRejectParticipatorReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : participator_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(nullptr){}
struct SSDistributeTransactionRejectParticipatorReqDefaultTypeInternal {
  constexpr SSDistributeTransactionRejectParticipatorReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDistributeTransactionRejectParticipatorReqDefaultTypeInternal() {}
  union {
    SSDistributeTransactionRejectParticipatorReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDistributeTransactionRejectParticipatorReqDefaultTypeInternal _SSDistributeTransactionRejectParticipatorReq_default_instance_;
constexpr SSDistributeTransactionRejectParticipatorRsp::SSDistributeTransactionRejectParticipatorRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr){}
struct SSDistributeTransactionRejectParticipatorRspDefaultTypeInternal {
  constexpr SSDistributeTransactionRejectParticipatorRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDistributeTransactionRejectParticipatorRspDefaultTypeInternal() {}
  union {
    SSDistributeTransactionRejectParticipatorRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDistributeTransactionRejectParticipatorRspDefaultTypeInternal _SSDistributeTransactionRejectParticipatorRsp_default_instance_;
constexpr SSDistributeTransactionRemoveReq::SSDistributeTransactionRemoveReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr){}
struct SSDistributeTransactionRemoveReqDefaultTypeInternal {
  constexpr SSDistributeTransactionRemoveReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDistributeTransactionRemoveReqDefaultTypeInternal() {}
  union {
    SSDistributeTransactionRemoveReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDistributeTransactionRemoveReqDefaultTypeInternal _SSDistributeTransactionRemoveReq_default_instance_;
constexpr SSDistributeTransactionRemoveRsp::SSDistributeTransactionRemoveRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SSDistributeTransactionRemoveRspDefaultTypeInternal {
  constexpr SSDistributeTransactionRemoveRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDistributeTransactionRemoveRspDefaultTypeInternal() {}
  union {
    SSDistributeTransactionRemoveRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDistributeTransactionRemoveRspDefaultTypeInternal _SSDistributeTransactionRemoveRsp_default_instance_;
constexpr SSParticipatorTransactionPrepareReq::SSParticipatorTransactionPrepareReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : storage_(nullptr){}
struct SSParticipatorTransactionPrepareReqDefaultTypeInternal {
  constexpr SSParticipatorTransactionPrepareReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSParticipatorTransactionPrepareReqDefaultTypeInternal() {}
  union {
    SSParticipatorTransactionPrepareReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSParticipatorTransactionPrepareReqDefaultTypeInternal _SSParticipatorTransactionPrepareReq_default_instance_;
constexpr SSParticipatorTransactionPrepareRsp::SSParticipatorTransactionPrepareRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(nullptr){}
struct SSParticipatorTransactionPrepareRspDefaultTypeInternal {
  constexpr SSParticipatorTransactionPrepareRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSParticipatorTransactionPrepareRspDefaultTypeInternal() {}
  union {
    SSParticipatorTransactionPrepareRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSParticipatorTransactionPrepareRspDefaultTypeInternal _SSParticipatorTransactionPrepareRsp_default_instance_;
constexpr SSParticipatorTransactionCommitReq::SSParticipatorTransactionCommitReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SSParticipatorTransactionCommitReqDefaultTypeInternal {
  constexpr SSParticipatorTransactionCommitReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSParticipatorTransactionCommitReqDefaultTypeInternal() {}
  union {
    SSParticipatorTransactionCommitReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSParticipatorTransactionCommitReqDefaultTypeInternal _SSParticipatorTransactionCommitReq_default_instance_;
constexpr SSParticipatorTransactionCommitRsp::SSParticipatorTransactionCommitRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SSParticipatorTransactionCommitRspDefaultTypeInternal {
  constexpr SSParticipatorTransactionCommitRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSParticipatorTransactionCommitRspDefaultTypeInternal() {}
  union {
    SSParticipatorTransactionCommitRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSParticipatorTransactionCommitRspDefaultTypeInternal _SSParticipatorTransactionCommitRsp_default_instance_;
constexpr SSParticipatorTransactionRejectReq::SSParticipatorTransactionRejectReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , storage_(nullptr){}
struct SSParticipatorTransactionRejectReqDefaultTypeInternal {
  constexpr SSParticipatorTransactionRejectReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSParticipatorTransactionRejectReqDefaultTypeInternal() {}
  union {
    SSParticipatorTransactionRejectReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSParticipatorTransactionRejectReqDefaultTypeInternal _SSParticipatorTransactionRejectReq_default_instance_;
constexpr SSParticipatorTransactionRejectRsp::SSParticipatorTransactionRejectRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SSParticipatorTransactionRejectRspDefaultTypeInternal {
  constexpr SSParticipatorTransactionRejectRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSParticipatorTransactionRejectRspDefaultTypeInternal() {}
  union {
    SSParticipatorTransactionRejectRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSParticipatorTransactionRejectRspDefaultTypeInternal _SSParticipatorTransactionRejectRsp_default_instance_;
}  // namespace distributed_system
}  // namespace atframework
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[28];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pbdesc_2fdistributed_5ftransaction_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_pbdesc_2fdistributed_5ftransaction_2eproto[1];

const uint32_t TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_participator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_participator, participator_key_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_participator, participator_status_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_participator, participator_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_configure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_configure, force_commit_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_configure, resolve_max_times_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_configure, resolve_retry_interval_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_configure, lock_wait_interval_min_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_configure, lock_wait_interval_max_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_configure, lock_retry_max_times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_metadata, transaction_uuid_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_metadata, status_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_metadata, replicate_read_count_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_metadata, replicate_node_server_id_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_metadata, memory_only_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_metadata, prepare_timepoint_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_metadata, finish_timepoint_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_metadata, expire_timepoint_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_blob_storage_ParticipatorsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_blob_storage_ParticipatorsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_blob_storage_ParticipatorsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_blob_storage_ParticipatorsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_blob_storage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_blob_storage, metadata_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_blob_storage, configure_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_blob_storage, participators_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_blob_storage, transaction_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_participator_storage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_participator_storage, metadata_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_participator_storage, configure_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_participator_storage, participator_data_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_participator_storage, transaction_data_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_participator_storage, resolve_times_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_participator_storage, resolve_timepoint_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_participator_storage, lock_resource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_participator_failure_reason, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_participator_failure_reason, allow_retry_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_participator_failure_reason, locked_resource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_participator_snapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_participator_snapshot, running_transaction_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::transaction_participator_snapshot, finished_transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionQueryReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionQueryReq, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionQueryRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionQueryRsp, storage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionCreateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionCreateReq, storage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionCreateRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionCommitReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionCommitReq, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionCommitRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionCommitRsp, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionRejectReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionRejectReq, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionRejectRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionRejectRsp, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionCommitParticipatorReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionCommitParticipatorReq, metadata_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionCommitParticipatorReq, participator_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionCommitParticipatorRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionCommitParticipatorRsp, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionRejectParticipatorReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionRejectParticipatorReq, metadata_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionRejectParticipatorReq, participator_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionRejectParticipatorRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionRejectParticipatorRsp, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionRemoveReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionRemoveReq, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSDistributeTransactionRemoveRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSParticipatorTransactionPrepareReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSParticipatorTransactionPrepareReq, storage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSParticipatorTransactionPrepareRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSParticipatorTransactionPrepareRsp, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSParticipatorTransactionCommitReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSParticipatorTransactionCommitReq, transaction_uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSParticipatorTransactionCommitRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSParticipatorTransactionRejectReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSParticipatorTransactionRejectReq, transaction_uuid_),
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSParticipatorTransactionRejectReq, storage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::atframework::distributed_system::SSParticipatorTransactionRejectRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::atframework::distributed_system::transaction_participator)},
  { 9, -1, -1, sizeof(::atframework::distributed_system::transaction_configure)},
  { 21, -1, -1, sizeof(::atframework::distributed_system::transaction_metadata)},
  { 35, 43, -1, sizeof(::atframework::distributed_system::transaction_blob_storage_ParticipatorsEntry_DoNotUse)},
  { 45, -1, -1, sizeof(::atframework::distributed_system::transaction_blob_storage)},
  { 55, -1, -1, sizeof(::atframework::distributed_system::transaction_participator_storage)},
  { 68, -1, -1, sizeof(::atframework::distributed_system::transaction_participator_failure_reason)},
  { 76, -1, -1, sizeof(::atframework::distributed_system::transaction_participator_snapshot)},
  { 84, -1, -1, sizeof(::atframework::distributed_system::SSDistributeTransactionQueryReq)},
  { 91, -1, -1, sizeof(::atframework::distributed_system::SSDistributeTransactionQueryRsp)},
  { 98, -1, -1, sizeof(::atframework::distributed_system::SSDistributeTransactionCreateReq)},
  { 105, -1, -1, sizeof(::atframework::distributed_system::SSDistributeTransactionCreateRsp)},
  { 111, -1, -1, sizeof(::atframework::distributed_system::SSDistributeTransactionCommitReq)},
  { 118, -1, -1, sizeof(::atframework::distributed_system::SSDistributeTransactionCommitRsp)},
  { 125, -1, -1, sizeof(::atframework::distributed_system::SSDistributeTransactionRejectReq)},
  { 132, -1, -1, sizeof(::atframework::distributed_system::SSDistributeTransactionRejectRsp)},
  { 139, -1, -1, sizeof(::atframework::distributed_system::SSDistributeTransactionCommitParticipatorReq)},
  { 147, -1, -1, sizeof(::atframework::distributed_system::SSDistributeTransactionCommitParticipatorRsp)},
  { 154, -1, -1, sizeof(::atframework::distributed_system::SSDistributeTransactionRejectParticipatorReq)},
  { 162, -1, -1, sizeof(::atframework::distributed_system::SSDistributeTransactionRejectParticipatorRsp)},
  { 169, -1, -1, sizeof(::atframework::distributed_system::SSDistributeTransactionRemoveReq)},
  { 176, -1, -1, sizeof(::atframework::distributed_system::SSDistributeTransactionRemoveRsp)},
  { 182, -1, -1, sizeof(::atframework::distributed_system::SSParticipatorTransactionPrepareReq)},
  { 189, -1, -1, sizeof(::atframework::distributed_system::SSParticipatorTransactionPrepareRsp)},
  { 196, -1, -1, sizeof(::atframework::distributed_system::SSParticipatorTransactionCommitReq)},
  { 203, -1, -1, sizeof(::atframework::distributed_system::SSParticipatorTransactionCommitRsp)},
  { 209, -1, -1, sizeof(::atframework::distributed_system::SSParticipatorTransactionRejectReq)},
  { 217, -1, -1, sizeof(::atframework::distributed_system::SSParticipatorTransactionRejectRsp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_transaction_participator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_transaction_configure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_transaction_metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_transaction_blob_storage_ParticipatorsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_transaction_blob_storage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_transaction_participator_storage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_transaction_participator_failure_reason_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_transaction_participator_snapshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_SSDistributeTransactionQueryReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_SSDistributeTransactionQueryRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_SSDistributeTransactionCreateReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_SSDistributeTransactionCreateRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_SSDistributeTransactionCommitReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_SSDistributeTransactionCommitRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_SSDistributeTransactionRejectReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_SSDistributeTransactionRejectRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_SSDistributeTransactionCommitParticipatorReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_SSDistributeTransactionCommitParticipatorRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_SSDistributeTransactionRejectParticipatorReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_SSDistributeTransactionRejectParticipatorRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_SSDistributeTransactionRemoveReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_SSDistributeTransactionRemoveRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_SSParticipatorTransactionPrepareReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_SSParticipatorTransactionPrepareRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_SSParticipatorTransactionCommitReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_SSParticipatorTransactionCommitRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_SSParticipatorTransactionRejectReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::atframework::distributed_system::_SSParticipatorTransactionRejectRsp_default_instance_),
};

const char descriptor_table_protodef_pbdesc_2fdistributed_5ftransaction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$pbdesc/distributed_transaction.proto\022\036"
  "atframework.distributed_system\032\031google/p"
  "rotobuf/any.proto\032\036google/protobuf/durat"
  "ion.proto\032\037google/protobuf/timestamp.pro"
  "to\032\021atframework.proto\"\301\001\n\030transaction_pa"
  "rticipator\022\030\n\020participator_key\030\001 \001(\t\022Z\n\023"
  "participator_status\030\013 \001(\0162=.atframework."
  "distributed_system.EnDistibutedTransacti"
  "onStatus\022/\n\021participator_data\030\014 \001(\0132\024.go"
  "ogle.protobuf.Any\"\227\002\n\025transaction_config"
  "ure\022\024\n\014force_commit\030\001 \001(\010\022\031\n\021resolve_max"
  "_times\030\013 \001(\r\0229\n\026resolve_retry_interval\030\014"
  " \001(\0132\031.google.protobuf.Duration\0229\n\026lock_"
  "wait_interval_min\030\r \001(\0132\031.google.protobu"
  "f.Duration\0229\n\026lock_wait_interval_max\030\016 \001"
  "(\0132\031.google.protobuf.Duration\022\034\n\024lock_re"
  "try_max_times\030\017 \001(\r\"\367\002\n\024transaction_meta"
  "data\022\030\n\020transaction_uuid\030\001 \001(\014\022M\n\006status"
  "\030\002 \001(\0162=.atframework.distributed_system."
  "EnDistibutedTransactionStatus\022\034\n\024replica"
  "te_read_count\030\003 \001(\r\022 \n\030replicate_node_se"
  "rver_id\030\004 \003(\004\022\023\n\013memory_only\030\005 \001(\010\0225\n\021pr"
  "epare_timepoint\030\013 \001(\0132\032.google.protobuf."
  "Timestamp\0224\n\020finish_timepoint\030\014 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\0224\n\020expire_timepo"
  "int\030\r \001(\0132\032.google.protobuf.Timestamp\"\260\003"
  "\n\030transaction_blob_storage\022F\n\010metadata\030\001"
  " \001(\01324.atframework.distributed_system.tr"
  "ansaction_metadata\022H\n\tconfigure\030\002 \001(\01325."
  "atframework.distributed_system.transacti"
  "on_configure\022b\n\rparticipators\030\003 \003(\0132K.at"
  "framework.distributed_system.transaction"
  "_blob_storage.ParticipatorsEntry\022.\n\020tran"
  "saction_data\030\004 \001(\0132\024.google.protobuf.Any"
  "\032n\n\022ParticipatorsEntry\022\013\n\003key\030\001 \001(\t\022G\n\005v"
  "alue\030\002 \001(\01328.atframework.distributed_sys"
  "tem.transaction_participator:\0028\001\"\372\002\n tra"
  "nsaction_participator_storage\022F\n\010metadat"
  "a\030\001 \001(\01324.atframework.distributed_system"
  ".transaction_metadata\022H\n\tconfigure\030\002 \001(\013"
  "25.atframework.distributed_system.transa"
  "ction_configure\022/\n\021participator_data\030\003 \001"
  "(\0132\024.google.protobuf.Any\022.\n\020transaction_"
  "data\030\004 \001(\0132\024.google.protobuf.Any\022\025\n\rreso"
  "lve_times\030\013 \001(\r\0225\n\021resolve_timepoint\030\014 \001"
  "(\0132\032.google.protobuf.Timestamp\022\025\n\rlock_r"
  "esource\030\025 \003(\014\"W\n\'transaction_participato"
  "r_failure_reason\022\023\n\013allow_retry\030\001 \001(\010\022\027\n"
  "\017locked_resource\030\014 \003(\014\"\342\001\n!transaction_p"
  "articipator_snapshot\022]\n\023running_transact"
  "ion\030\002 \003(\0132@.atframework.distributed_syst"
  "em.transaction_participator_storage\022^\n\024f"
  "inished_transaction\030\003 \003(\0132@.atframework."
  "distributed_system.transaction_participa"
  "tor_storage\"i\n\037SSDistributeTransactionQu"
  "eryReq\022F\n\010metadata\030\001 \001(\01324.atframework.d"
  "istributed_system.transaction_metadata\"l"
  "\n\037SSDistributeTransactionQueryRsp\022I\n\007sto"
  "rage\030\001 \001(\01328.atframework.distributed_sys"
  "tem.transaction_blob_storage\"m\n SSDistri"
  "buteTransactionCreateReq\022I\n\007storage\030\001 \001("
  "\01328.atframework.distributed_system.trans"
  "action_blob_storage\"\"\n SSDistributeTrans"
  "actionCreateRsp\"j\n SSDistributeTransacti"
  "onCommitReq\022F\n\010metadata\030\001 \001(\01324.atframew"
  "ork.distributed_system.transaction_metad"
  "ata\"j\n SSDistributeTransactionCommitRsp\022"
  "F\n\010metadata\030\001 \001(\01324.atframework.distribu"
  "ted_system.transaction_metadata\"j\n SSDis"
  "tributeTransactionRejectReq\022F\n\010metadata\030"
  "\001 \001(\01324.atframework.distributed_system.t"
  "ransaction_metadata\"j\n SSDistributeTrans"
  "actionRejectRsp\022F\n\010metadata\030\001 \001(\01324.atfr"
  "amework.distributed_system.transaction_m"
  "etadata\"\220\001\n,SSDistributeTransactionCommi"
  "tParticipatorReq\022F\n\010metadata\030\001 \001(\01324.atf"
  "ramework.distributed_system.transaction_"
  "metadata\022\030\n\020participator_key\030\002 \001(\t\"v\n,SS"
  "DistributeTransactionCommitParticipatorR"
  "sp\022F\n\010metadata\030\001 \001(\01324.atframework.distr"
  "ibuted_system.transaction_metadata\"\220\001\n,S"
  "SDistributeTransactionRejectParticipator"
  "Req\022F\n\010metadata\030\001 \001(\01324.atframework.dist"
  "ributed_system.transaction_metadata\022\030\n\020p"
  "articipator_key\030\002 \001(\t\"v\n,SSDistributeTra"
  "nsactionRejectParticipatorRsp\022F\n\010metadat"
  "a\030\001 \001(\01324.atframework.distributed_system"
  ".transaction_metadata\"j\n SSDistributeTra"
  "nsactionRemoveReq\022F\n\010metadata\030\001 \001(\01324.at"
  "framework.distributed_system.transaction"
  "_metadata\"\"\n SSDistributeTransactionRemo"
  "veRsp\"x\n#SSParticipatorTransactionPrepar"
  "eReq\022Q\n\007storage\030\001 \001(\0132@.atframework.dist"
  "ributed_system.transaction_participator_"
  "storage\"~\n#SSParticipatorTransactionPrep"
  "areRsp\022W\n\006reason\030\001 \001(\0132G.atframework.dis"
  "tributed_system.transaction_participator"
  "_failure_reason\">\n\"SSParticipatorTransac"
  "tionCommitReq\022\030\n\020transaction_uuid\030\001 \001(\014\""
  "$\n\"SSParticipatorTransactionCommitRsp\"\221\001"
  "\n\"SSParticipatorTransactionRejectReq\022\030\n\020"
  "transaction_uuid\030\001 \001(\014\022Q\n\007storage\030\002 \001(\0132"
  "@.atframework.distributed_system.transac"
  "tion_participator_storage\"$\n\"SSParticipa"
  "torTransactionRejectRsp*\364\002\n\035EnDistibuted"
  "TransactionStatus\022-\n)EN_DISTRIBUTED_TRAN"
  "SACTION_STATUS_CREATED\020\000\022.\n*EN_DISTRIBUT"
  "ED_TRANSACTION_STATUS_PREPARED\020\001\022.\n*EN_D"
  "ISTRIBUTED_TRANSACTION_STATUS_FINISHED\020\002"
  "\022/\n+EN_DISTRIBUTED_TRANSACTION_STATUS_RE"
  "JECTING\020\002\022/\n+EN_DISTRIBUTED_TRANSACTION_"
  "STATUS_COMMITING\020\003\022.\n*EN_DISTRIBUTED_TRA"
  "NSACTION_STATUS_REJECTED\020\004\022.\n*EN_DISTRIB"
  "UTED_TRANSACTION_STATUS_COMMITED\020\005\032\002\020\0012\217"
  "\016\n\021DtcoordsvrService\022\324\001\n\005query\022\?.atframe"
  "work.distributed_system.SSDistributeTran"
  "sactionQueryReq\032\?.atframework.distribute"
  "d_system.SSDistributeTransactionQueryRsp"
  "\"I\272\314\001E\262\006\022\346\213\211\345\217\226\344\272\213\345\212\241\346\225\260\346\215\256\220\023\001\232\023*PROJECT"
  "_NAMESPACE_ID::err::EN_SYS_NOTFOUND\022\255\001\n\006"
  "create\022@.atframework.distributed_system."
  "SSDistributeTransactionCreateReq\032@.atfra"
  "mework.distributed_system.SSDistributeTr"
  "ansactionCreateRsp\"\037\272\314\001\033\262\006\025\345\210\233\345\273\272\345\210\206\345\270\203\345"
  "\274\217\344\272\213\345\212\241\220\023\001\022\335\001\n\006commit\022@.atframework.dis"
  "tributed_system.SSDistributeTransactionC"
  "ommitReq\032@.atframework.distributed_syste"
  "m.SSDistributeTransactionCommitRsp\"O\272\314\001K"
  "\262\006\026\345\210\206\345\270\203\345\274\217\344\272\213\345\212\241-\346\217\220\344\272\244\220\023\001\232\023,PROJECT_N"
  "AMESPACE_ID::err::EN_DB_OLD_VERSION\022\335\001\n\006"
  "reject\022@.atframework.distributed_system."
  "SSDistributeTransactionRejectReq\032@.atfra"
  "mework.distributed_system.SSDistributeTr"
  "ansactionRejectRsp\"O\272\314\001K\262\006\026\345\210\206\345\270\203\345\274\217\344\272\213\345"
  "\212\241-\346\213\222\347\273\235\220\023\001\232\023,PROJECT_NAMESPACE_ID::err"
  "::EN_DB_OLD_VERSION\022\300\002\n\023commit_participa"
  "tor\022L.atframework.distributed_system.SSD"
  "istributeTransactionCommitParticipatorRe"
  "q\032L.atframework.distributed_system.SSDis"
  "tributeTransactionCommitParticipatorRsp\""
  "\214\001\272\314\001\207\001\262\006%\345\210\206\345\270\203\345\274\217\344\272\213\345\212\241-\345\215\225\344\270\252\345\217\202\344\270\216\350\200"
  "\205\346\217\220\344\272\244\220\023\001\232\023*PROJECT_NAMESPACE_ID::err::"
  "EN_SYS_NOTFOUND\232\023,PROJECT_NAMESPACE_ID::"
  "err::EN_DB_OLD_VERSION\022\300\002\n\023reject_partic"
  "ipator\022L.atframework.distributed_system."
  "SSDistributeTransactionRejectParticipato"
  "rReq\032L.atframework.distributed_system.SS"
  "DistributeTransactionRejectParticipatorR"
  "sp\"\214\001\272\314\001\207\001\262\006%\345\210\206\345\270\203\345\274\217\344\272\213\345\212\241-\345\215\225\344\270\252\345\217\202\344\270"
  "\216\350\200\205\346\213\222\347\273\235\220\023\001\232\023*PROJECT_NAMESPACE_ID::er"
  "r::EN_SYS_NOTFOUND\232\023,PROJECT_NAMESPACE_I"
  "D::err::EN_DB_OLD_VERSION\022\230\002\n\006remove\022@.a"
  "tframework.distributed_system.SSDistribu"
  "teTransactionRemoveReq\032@.atframework.dis"
  "tributed_system.SSDistributeTransactionR"
  "emoveRsp\"\211\001\272\314\001\204\001\262\006\033\345\274\272\345\210\266\345\210\240\351\231\244\345\210\206\345\270\203\345\274\217"
  "\344\272\213\345\212\241\220\023\001\232\023,PROJECT_NAMESPACE_ID::err::E"
  "N_DB_OLD_VERSION\242\0231PROJECT_NAMESPACE_ID:"
  ":err::EN_DB_RECORD_NOT_FOUND\032\022\272\314\001\016\252\006\013tra"
  "nsactionB\010H\001\200\001\001\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_deps[4] = {
  &::descriptor_table_atframework_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto = {
  false, false, 6386, descriptor_table_protodef_pbdesc_2fdistributed_5ftransaction_2eproto, "pbdesc/distributed_transaction.proto", 
  &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once, descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_deps, 4, 28,
  schemas, file_default_instances, TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto::offsets,
  file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto, file_level_enum_descriptors_pbdesc_2fdistributed_5ftransaction_2eproto, file_level_service_descriptors_pbdesc_2fdistributed_5ftransaction_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter() {
  return &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_pbdesc_2fdistributed_5ftransaction_2eproto(&descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto);
namespace atframework {
namespace distributed_system {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnDistibutedTransactionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto);
  return file_level_enum_descriptors_pbdesc_2fdistributed_5ftransaction_2eproto[0];
}
bool EnDistibutedTransactionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class transaction_participator::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& participator_data(const transaction_participator* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
transaction_participator::_Internal::participator_data(const transaction_participator* msg) {
  return *msg->participator_data_;
}
void transaction_participator::clear_participator_data() {
  if (GetArenaForAllocation() == nullptr && participator_data_ != nullptr) {
    delete participator_data_;
  }
  participator_data_ = nullptr;
}
transaction_participator::transaction_participator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.transaction_participator)
}
transaction_participator::transaction_participator(const transaction_participator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  participator_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    participator_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participator_key().empty()) {
    participator_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_participator_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_participator_data()) {
    participator_data_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.participator_data_);
  } else {
    participator_data_ = nullptr;
  }
  participator_status_ = from.participator_status_;
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.transaction_participator)
}

inline void transaction_participator::SharedCtor() {
participator_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  participator_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&participator_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&participator_status_) -
    reinterpret_cast<char*>(&participator_data_)) + sizeof(participator_status_));
}

transaction_participator::~transaction_participator() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.transaction_participator)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction_participator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  participator_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete participator_data_;
}

void transaction_participator::ArenaDtor(void* object) {
  transaction_participator* _this = reinterpret_cast< transaction_participator* >(object);
  (void)_this;
}
void transaction_participator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_participator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction_participator::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.transaction_participator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  participator_key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && participator_data_ != nullptr) {
    delete participator_data_;
  }
  participator_data_ = nullptr;
  participator_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_participator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string participator_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_participator_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atframework.distributed_system.transaction_participator.participator_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .atframework.distributed_system.EnDistibutedTransactionStatus participator_status = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_participator_status(static_cast<::atframework::distributed_system::EnDistibutedTransactionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any participator_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_participator_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* transaction_participator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.transaction_participator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string participator_key = 1;
  if (!this->_internal_participator_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participator_key().data(), static_cast<int>(this->_internal_participator_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atframework.distributed_system.transaction_participator.participator_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_participator_key(), target);
  }

  // .atframework.distributed_system.EnDistibutedTransactionStatus participator_status = 11;
  if (this->_internal_participator_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_participator_status(), target);
  }

  // .google.protobuf.Any participator_data = 12;
  if (this->_internal_has_participator_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::participator_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.transaction_participator)
  return target;
}

size_t transaction_participator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.transaction_participator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string participator_key = 1;
  if (!this->_internal_participator_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participator_key());
  }

  // .google.protobuf.Any participator_data = 12;
  if (this->_internal_has_participator_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *participator_data_);
  }

  // .atframework.distributed_system.EnDistibutedTransactionStatus participator_status = 11;
  if (this->_internal_participator_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_participator_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction_participator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction_participator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction_participator::GetClassData() const { return &_class_data_; }

void transaction_participator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<transaction_participator *>(to)->MergeFrom(
      static_cast<const transaction_participator &>(from));
}


void transaction_participator::MergeFrom(const transaction_participator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.transaction_participator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_participator_key().empty()) {
    _internal_set_participator_key(from._internal_participator_key());
  }
  if (from._internal_has_participator_data()) {
    _internal_mutable_participator_data()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_participator_data());
  }
  if (from._internal_participator_status() != 0) {
    _internal_set_participator_status(from._internal_participator_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction_participator::CopyFrom(const transaction_participator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.transaction_participator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_participator::IsInitialized() const {
  return true;
}

void transaction_participator::InternalSwap(transaction_participator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &participator_key_, lhs_arena,
      &other->participator_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(transaction_participator, participator_status_)
      + sizeof(transaction_participator::participator_status_)
      - PROTOBUF_FIELD_OFFSET(transaction_participator, participator_data_)>(
          reinterpret_cast<char*>(&participator_data_),
          reinterpret_cast<char*>(&other->participator_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_participator::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[0]);
}

// ===================================================================

class transaction_configure::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& resolve_retry_interval(const transaction_configure* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& lock_wait_interval_min(const transaction_configure* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& lock_wait_interval_max(const transaction_configure* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
transaction_configure::_Internal::resolve_retry_interval(const transaction_configure* msg) {
  return *msg->resolve_retry_interval_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
transaction_configure::_Internal::lock_wait_interval_min(const transaction_configure* msg) {
  return *msg->lock_wait_interval_min_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
transaction_configure::_Internal::lock_wait_interval_max(const transaction_configure* msg) {
  return *msg->lock_wait_interval_max_;
}
void transaction_configure::clear_resolve_retry_interval() {
  if (GetArenaForAllocation() == nullptr && resolve_retry_interval_ != nullptr) {
    delete resolve_retry_interval_;
  }
  resolve_retry_interval_ = nullptr;
}
void transaction_configure::clear_lock_wait_interval_min() {
  if (GetArenaForAllocation() == nullptr && lock_wait_interval_min_ != nullptr) {
    delete lock_wait_interval_min_;
  }
  lock_wait_interval_min_ = nullptr;
}
void transaction_configure::clear_lock_wait_interval_max() {
  if (GetArenaForAllocation() == nullptr && lock_wait_interval_max_ != nullptr) {
    delete lock_wait_interval_max_;
  }
  lock_wait_interval_max_ = nullptr;
}
transaction_configure::transaction_configure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.transaction_configure)
}
transaction_configure::transaction_configure(const transaction_configure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resolve_retry_interval()) {
    resolve_retry_interval_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.resolve_retry_interval_);
  } else {
    resolve_retry_interval_ = nullptr;
  }
  if (from._internal_has_lock_wait_interval_min()) {
    lock_wait_interval_min_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.lock_wait_interval_min_);
  } else {
    lock_wait_interval_min_ = nullptr;
  }
  if (from._internal_has_lock_wait_interval_max()) {
    lock_wait_interval_max_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.lock_wait_interval_max_);
  } else {
    lock_wait_interval_max_ = nullptr;
  }
  ::memcpy(&force_commit_, &from.force_commit_,
    static_cast<size_t>(reinterpret_cast<char*>(&lock_retry_max_times_) -
    reinterpret_cast<char*>(&force_commit_)) + sizeof(lock_retry_max_times_));
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.transaction_configure)
}

inline void transaction_configure::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&resolve_retry_interval_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lock_retry_max_times_) -
    reinterpret_cast<char*>(&resolve_retry_interval_)) + sizeof(lock_retry_max_times_));
}

transaction_configure::~transaction_configure() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.transaction_configure)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction_configure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete resolve_retry_interval_;
  if (this != internal_default_instance()) delete lock_wait_interval_min_;
  if (this != internal_default_instance()) delete lock_wait_interval_max_;
}

void transaction_configure::ArenaDtor(void* object) {
  transaction_configure* _this = reinterpret_cast< transaction_configure* >(object);
  (void)_this;
}
void transaction_configure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_configure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction_configure::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.transaction_configure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && resolve_retry_interval_ != nullptr) {
    delete resolve_retry_interval_;
  }
  resolve_retry_interval_ = nullptr;
  if (GetArenaForAllocation() == nullptr && lock_wait_interval_min_ != nullptr) {
    delete lock_wait_interval_min_;
  }
  lock_wait_interval_min_ = nullptr;
  if (GetArenaForAllocation() == nullptr && lock_wait_interval_max_ != nullptr) {
    delete lock_wait_interval_max_;
  }
  lock_wait_interval_max_ = nullptr;
  ::memset(&force_commit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lock_retry_max_times_) -
      reinterpret_cast<char*>(&force_commit_)) + sizeof(lock_retry_max_times_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_configure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool force_commit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          force_commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 resolve_max_times = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          resolve_max_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration resolve_retry_interval = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_resolve_retry_interval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration lock_wait_interval_min = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_lock_wait_interval_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration lock_wait_interval_max = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_lock_wait_interval_max(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 lock_retry_max_times = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          lock_retry_max_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* transaction_configure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.transaction_configure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool force_commit = 1;
  if (this->_internal_force_commit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_force_commit(), target);
  }

  // uint32 resolve_max_times = 11;
  if (this->_internal_resolve_max_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_resolve_max_times(), target);
  }

  // .google.protobuf.Duration resolve_retry_interval = 12;
  if (this->_internal_has_resolve_retry_interval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::resolve_retry_interval(this), target, stream);
  }

  // .google.protobuf.Duration lock_wait_interval_min = 13;
  if (this->_internal_has_lock_wait_interval_min()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::lock_wait_interval_min(this), target, stream);
  }

  // .google.protobuf.Duration lock_wait_interval_max = 14;
  if (this->_internal_has_lock_wait_interval_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::lock_wait_interval_max(this), target, stream);
  }

  // uint32 lock_retry_max_times = 15;
  if (this->_internal_lock_retry_max_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_lock_retry_max_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.transaction_configure)
  return target;
}

size_t transaction_configure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.transaction_configure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration resolve_retry_interval = 12;
  if (this->_internal_has_resolve_retry_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resolve_retry_interval_);
  }

  // .google.protobuf.Duration lock_wait_interval_min = 13;
  if (this->_internal_has_lock_wait_interval_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lock_wait_interval_min_);
  }

  // .google.protobuf.Duration lock_wait_interval_max = 14;
  if (this->_internal_has_lock_wait_interval_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lock_wait_interval_max_);
  }

  // bool force_commit = 1;
  if (this->_internal_force_commit() != 0) {
    total_size += 1 + 1;
  }

  // uint32 resolve_max_times = 11;
  if (this->_internal_resolve_max_times() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_resolve_max_times());
  }

  // uint32 lock_retry_max_times = 15;
  if (this->_internal_lock_retry_max_times() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_lock_retry_max_times());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction_configure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction_configure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction_configure::GetClassData() const { return &_class_data_; }

void transaction_configure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<transaction_configure *>(to)->MergeFrom(
      static_cast<const transaction_configure &>(from));
}


void transaction_configure::MergeFrom(const transaction_configure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.transaction_configure)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_resolve_retry_interval()) {
    _internal_mutable_resolve_retry_interval()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_resolve_retry_interval());
  }
  if (from._internal_has_lock_wait_interval_min()) {
    _internal_mutable_lock_wait_interval_min()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_lock_wait_interval_min());
  }
  if (from._internal_has_lock_wait_interval_max()) {
    _internal_mutable_lock_wait_interval_max()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_lock_wait_interval_max());
  }
  if (from._internal_force_commit() != 0) {
    _internal_set_force_commit(from._internal_force_commit());
  }
  if (from._internal_resolve_max_times() != 0) {
    _internal_set_resolve_max_times(from._internal_resolve_max_times());
  }
  if (from._internal_lock_retry_max_times() != 0) {
    _internal_set_lock_retry_max_times(from._internal_lock_retry_max_times());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction_configure::CopyFrom(const transaction_configure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.transaction_configure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_configure::IsInitialized() const {
  return true;
}

void transaction_configure::InternalSwap(transaction_configure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(transaction_configure, lock_retry_max_times_)
      + sizeof(transaction_configure::lock_retry_max_times_)
      - PROTOBUF_FIELD_OFFSET(transaction_configure, resolve_retry_interval_)>(
          reinterpret_cast<char*>(&resolve_retry_interval_),
          reinterpret_cast<char*>(&other->resolve_retry_interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_configure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[1]);
}

// ===================================================================

class transaction_metadata::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& prepare_timepoint(const transaction_metadata* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& finish_timepoint(const transaction_metadata* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expire_timepoint(const transaction_metadata* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
transaction_metadata::_Internal::prepare_timepoint(const transaction_metadata* msg) {
  return *msg->prepare_timepoint_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
transaction_metadata::_Internal::finish_timepoint(const transaction_metadata* msg) {
  return *msg->finish_timepoint_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
transaction_metadata::_Internal::expire_timepoint(const transaction_metadata* msg) {
  return *msg->expire_timepoint_;
}
void transaction_metadata::clear_prepare_timepoint() {
  if (GetArenaForAllocation() == nullptr && prepare_timepoint_ != nullptr) {
    delete prepare_timepoint_;
  }
  prepare_timepoint_ = nullptr;
}
void transaction_metadata::clear_finish_timepoint() {
  if (GetArenaForAllocation() == nullptr && finish_timepoint_ != nullptr) {
    delete finish_timepoint_;
  }
  finish_timepoint_ = nullptr;
}
void transaction_metadata::clear_expire_timepoint() {
  if (GetArenaForAllocation() == nullptr && expire_timepoint_ != nullptr) {
    delete expire_timepoint_;
  }
  expire_timepoint_ = nullptr;
}
transaction_metadata::transaction_metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  replicate_node_server_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.transaction_metadata)
}
transaction_metadata::transaction_metadata(const transaction_metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      replicate_node_server_id_(from.replicate_node_server_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transaction_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    transaction_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transaction_uuid().empty()) {
    transaction_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_uuid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_prepare_timepoint()) {
    prepare_timepoint_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.prepare_timepoint_);
  } else {
    prepare_timepoint_ = nullptr;
  }
  if (from._internal_has_finish_timepoint()) {
    finish_timepoint_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.finish_timepoint_);
  } else {
    finish_timepoint_ = nullptr;
  }
  if (from._internal_has_expire_timepoint()) {
    expire_timepoint_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.expire_timepoint_);
  } else {
    expire_timepoint_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&memory_only_) -
    reinterpret_cast<char*>(&status_)) + sizeof(memory_only_));
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.transaction_metadata)
}

inline void transaction_metadata::SharedCtor() {
transaction_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  transaction_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&prepare_timepoint_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&memory_only_) -
    reinterpret_cast<char*>(&prepare_timepoint_)) + sizeof(memory_only_));
}

transaction_metadata::~transaction_metadata() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.transaction_metadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction_metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transaction_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete prepare_timepoint_;
  if (this != internal_default_instance()) delete finish_timepoint_;
  if (this != internal_default_instance()) delete expire_timepoint_;
}

void transaction_metadata::ArenaDtor(void* object) {
  transaction_metadata* _this = reinterpret_cast< transaction_metadata* >(object);
  (void)_this;
}
void transaction_metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction_metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.transaction_metadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replicate_node_server_id_.Clear();
  transaction_uuid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && prepare_timepoint_ != nullptr) {
    delete prepare_timepoint_;
  }
  prepare_timepoint_ = nullptr;
  if (GetArenaForAllocation() == nullptr && finish_timepoint_ != nullptr) {
    delete finish_timepoint_;
  }
  finish_timepoint_ = nullptr;
  if (GetArenaForAllocation() == nullptr && expire_timepoint_ != nullptr) {
    delete expire_timepoint_;
  }
  expire_timepoint_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_only_) -
      reinterpret_cast<char*>(&status_)) + sizeof(memory_only_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes transaction_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_transaction_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .atframework.distributed_system.EnDistibutedTransactionStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::atframework::distributed_system::EnDistibutedTransactionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 replicate_read_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          replicate_read_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 replicate_node_server_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_replicate_node_server_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_replicate_node_server_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool memory_only = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          memory_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp prepare_timepoint = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_prepare_timepoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp finish_timepoint = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_finish_timepoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expire_timepoint = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_expire_timepoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* transaction_metadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.transaction_metadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction_uuid = 1;
  if (!this->_internal_transaction_uuid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_transaction_uuid(), target);
  }

  // .atframework.distributed_system.EnDistibutedTransactionStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // uint32 replicate_read_count = 3;
  if (this->_internal_replicate_read_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_replicate_read_count(), target);
  }

  // repeated uint64 replicate_node_server_id = 4;
  {
    int byte_size = _replicate_node_server_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_replicate_node_server_id(), byte_size, target);
    }
  }

  // bool memory_only = 5;
  if (this->_internal_memory_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_memory_only(), target);
  }

  // .google.protobuf.Timestamp prepare_timepoint = 11;
  if (this->_internal_has_prepare_timepoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::prepare_timepoint(this), target, stream);
  }

  // .google.protobuf.Timestamp finish_timepoint = 12;
  if (this->_internal_has_finish_timepoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::finish_timepoint(this), target, stream);
  }

  // .google.protobuf.Timestamp expire_timepoint = 13;
  if (this->_internal_has_expire_timepoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::expire_timepoint(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.transaction_metadata)
  return target;
}

size_t transaction_metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.transaction_metadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 replicate_node_server_id = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->replicate_node_server_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _replicate_node_server_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes transaction_uuid = 1;
  if (!this->_internal_transaction_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_uuid());
  }

  // .google.protobuf.Timestamp prepare_timepoint = 11;
  if (this->_internal_has_prepare_timepoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prepare_timepoint_);
  }

  // .google.protobuf.Timestamp finish_timepoint = 12;
  if (this->_internal_has_finish_timepoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *finish_timepoint_);
  }

  // .google.protobuf.Timestamp expire_timepoint = 13;
  if (this->_internal_has_expire_timepoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expire_timepoint_);
  }

  // .atframework.distributed_system.EnDistibutedTransactionStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // uint32 replicate_read_count = 3;
  if (this->_internal_replicate_read_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_replicate_read_count());
  }

  // bool memory_only = 5;
  if (this->_internal_memory_only() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction_metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction_metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction_metadata::GetClassData() const { return &_class_data_; }

void transaction_metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<transaction_metadata *>(to)->MergeFrom(
      static_cast<const transaction_metadata &>(from));
}


void transaction_metadata::MergeFrom(const transaction_metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.transaction_metadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  replicate_node_server_id_.MergeFrom(from.replicate_node_server_id_);
  if (!from._internal_transaction_uuid().empty()) {
    _internal_set_transaction_uuid(from._internal_transaction_uuid());
  }
  if (from._internal_has_prepare_timepoint()) {
    _internal_mutable_prepare_timepoint()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_prepare_timepoint());
  }
  if (from._internal_has_finish_timepoint()) {
    _internal_mutable_finish_timepoint()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_finish_timepoint());
  }
  if (from._internal_has_expire_timepoint()) {
    _internal_mutable_expire_timepoint()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expire_timepoint());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_replicate_read_count() != 0) {
    _internal_set_replicate_read_count(from._internal_replicate_read_count());
  }
  if (from._internal_memory_only() != 0) {
    _internal_set_memory_only(from._internal_memory_only());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction_metadata::CopyFrom(const transaction_metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.transaction_metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_metadata::IsInitialized() const {
  return true;
}

void transaction_metadata::InternalSwap(transaction_metadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  replicate_node_server_id_.InternalSwap(&other->replicate_node_server_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transaction_uuid_, lhs_arena,
      &other->transaction_uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(transaction_metadata, memory_only_)
      + sizeof(transaction_metadata::memory_only_)
      - PROTOBUF_FIELD_OFFSET(transaction_metadata, prepare_timepoint_)>(
          reinterpret_cast<char*>(&prepare_timepoint_),
          reinterpret_cast<char*>(&other->prepare_timepoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_metadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[2]);
}

// ===================================================================

transaction_blob_storage_ParticipatorsEntry_DoNotUse::transaction_blob_storage_ParticipatorsEntry_DoNotUse() {}
transaction_blob_storage_ParticipatorsEntry_DoNotUse::transaction_blob_storage_ParticipatorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void transaction_blob_storage_ParticipatorsEntry_DoNotUse::MergeFrom(const transaction_blob_storage_ParticipatorsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata transaction_blob_storage_ParticipatorsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[3]);
}

// ===================================================================

class transaction_blob_storage::_Internal {
 public:
  static const ::atframework::distributed_system::transaction_metadata& metadata(const transaction_blob_storage* msg);
  static const ::atframework::distributed_system::transaction_configure& configure(const transaction_blob_storage* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& transaction_data(const transaction_blob_storage* msg);
};

const ::atframework::distributed_system::transaction_metadata&
transaction_blob_storage::_Internal::metadata(const transaction_blob_storage* msg) {
  return *msg->metadata_;
}
const ::atframework::distributed_system::transaction_configure&
transaction_blob_storage::_Internal::configure(const transaction_blob_storage* msg) {
  return *msg->configure_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
transaction_blob_storage::_Internal::transaction_data(const transaction_blob_storage* msg) {
  return *msg->transaction_data_;
}
void transaction_blob_storage::clear_transaction_data() {
  if (GetArenaForAllocation() == nullptr && transaction_data_ != nullptr) {
    delete transaction_data_;
  }
  transaction_data_ = nullptr;
}
transaction_blob_storage::transaction_blob_storage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  participators_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.transaction_blob_storage)
}
transaction_blob_storage::transaction_blob_storage(const transaction_blob_storage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  participators_.MergeFrom(from.participators_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::atframework::distributed_system::transaction_metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_configure()) {
    configure_ = new ::atframework::distributed_system::transaction_configure(*from.configure_);
  } else {
    configure_ = nullptr;
  }
  if (from._internal_has_transaction_data()) {
    transaction_data_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.transaction_data_);
  } else {
    transaction_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.transaction_blob_storage)
}

inline void transaction_blob_storage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&transaction_data_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(transaction_data_));
}

transaction_blob_storage::~transaction_blob_storage() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.transaction_blob_storage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction_blob_storage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete configure_;
  if (this != internal_default_instance()) delete transaction_data_;
}

void transaction_blob_storage::ArenaDtor(void* object) {
  transaction_blob_storage* _this = reinterpret_cast< transaction_blob_storage* >(object);
  (void)_this;
  _this->participators_. ~MapField();
}
inline void transaction_blob_storage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &transaction_blob_storage::ArenaDtor);
  }
}
void transaction_blob_storage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction_blob_storage::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.transaction_blob_storage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  participators_.Clear();
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && configure_ != nullptr) {
    delete configure_;
  }
  configure_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transaction_data_ != nullptr) {
    delete transaction_data_;
  }
  transaction_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_blob_storage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .atframework.distributed_system.transaction_metadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .atframework.distributed_system.transaction_configure configure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_configure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .atframework.distributed_system.transaction_participator> participators = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&participators_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any transaction_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* transaction_blob_storage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.transaction_blob_storage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // .atframework.distributed_system.transaction_configure configure = 2;
  if (this->_internal_has_configure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::configure(this), target, stream);
  }

  // map<string, .atframework.distributed_system.transaction_participator> participators = 3;
  if (!this->_internal_participators().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::atframework::distributed_system::transaction_participator >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "atframework.distributed_system.transaction_blob_storage.ParticipatorsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_participators().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_participators().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::atframework::distributed_system::transaction_participator >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::atframework::distributed_system::transaction_participator >::const_iterator
          it = this->_internal_participators().begin();
          it != this->_internal_participators().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = transaction_blob_storage_ParticipatorsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::atframework::distributed_system::transaction_participator >::const_iterator
          it = this->_internal_participators().begin();
          it != this->_internal_participators().end(); ++it) {
        target = transaction_blob_storage_ParticipatorsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.protobuf.Any transaction_data = 4;
  if (this->_internal_has_transaction_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::transaction_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.transaction_blob_storage)
  return target;
}

size_t transaction_blob_storage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.transaction_blob_storage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .atframework.distributed_system.transaction_participator> participators = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_participators_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::atframework::distributed_system::transaction_participator >::const_iterator
      it = this->_internal_participators().begin();
      it != this->_internal_participators().end(); ++it) {
    total_size += transaction_blob_storage_ParticipatorsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .atframework.distributed_system.transaction_configure configure = 2;
  if (this->_internal_has_configure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *configure_);
  }

  // .google.protobuf.Any transaction_data = 4;
  if (this->_internal_has_transaction_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction_blob_storage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction_blob_storage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction_blob_storage::GetClassData() const { return &_class_data_; }

void transaction_blob_storage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<transaction_blob_storage *>(to)->MergeFrom(
      static_cast<const transaction_blob_storage &>(from));
}


void transaction_blob_storage::MergeFrom(const transaction_blob_storage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.transaction_blob_storage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  participators_.MergeFrom(from.participators_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::atframework::distributed_system::transaction_metadata::MergeFrom(from._internal_metadata());
  }
  if (from._internal_has_configure()) {
    _internal_mutable_configure()->::atframework::distributed_system::transaction_configure::MergeFrom(from._internal_configure());
  }
  if (from._internal_has_transaction_data()) {
    _internal_mutable_transaction_data()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_transaction_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction_blob_storage::CopyFrom(const transaction_blob_storage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.transaction_blob_storage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_blob_storage::IsInitialized() const {
  return true;
}

void transaction_blob_storage::InternalSwap(transaction_blob_storage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  participators_.InternalSwap(&other->participators_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(transaction_blob_storage, transaction_data_)
      + sizeof(transaction_blob_storage::transaction_data_)
      - PROTOBUF_FIELD_OFFSET(transaction_blob_storage, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_blob_storage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[4]);
}

// ===================================================================

class transaction_participator_storage::_Internal {
 public:
  static const ::atframework::distributed_system::transaction_metadata& metadata(const transaction_participator_storage* msg);
  static const ::atframework::distributed_system::transaction_configure& configure(const transaction_participator_storage* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& participator_data(const transaction_participator_storage* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& transaction_data(const transaction_participator_storage* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& resolve_timepoint(const transaction_participator_storage* msg);
};

const ::atframework::distributed_system::transaction_metadata&
transaction_participator_storage::_Internal::metadata(const transaction_participator_storage* msg) {
  return *msg->metadata_;
}
const ::atframework::distributed_system::transaction_configure&
transaction_participator_storage::_Internal::configure(const transaction_participator_storage* msg) {
  return *msg->configure_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
transaction_participator_storage::_Internal::participator_data(const transaction_participator_storage* msg) {
  return *msg->participator_data_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
transaction_participator_storage::_Internal::transaction_data(const transaction_participator_storage* msg) {
  return *msg->transaction_data_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
transaction_participator_storage::_Internal::resolve_timepoint(const transaction_participator_storage* msg) {
  return *msg->resolve_timepoint_;
}
void transaction_participator_storage::clear_participator_data() {
  if (GetArenaForAllocation() == nullptr && participator_data_ != nullptr) {
    delete participator_data_;
  }
  participator_data_ = nullptr;
}
void transaction_participator_storage::clear_transaction_data() {
  if (GetArenaForAllocation() == nullptr && transaction_data_ != nullptr) {
    delete transaction_data_;
  }
  transaction_data_ = nullptr;
}
void transaction_participator_storage::clear_resolve_timepoint() {
  if (GetArenaForAllocation() == nullptr && resolve_timepoint_ != nullptr) {
    delete resolve_timepoint_;
  }
  resolve_timepoint_ = nullptr;
}
transaction_participator_storage::transaction_participator_storage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  lock_resource_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.transaction_participator_storage)
}
transaction_participator_storage::transaction_participator_storage(const transaction_participator_storage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lock_resource_(from.lock_resource_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::atframework::distributed_system::transaction_metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_configure()) {
    configure_ = new ::atframework::distributed_system::transaction_configure(*from.configure_);
  } else {
    configure_ = nullptr;
  }
  if (from._internal_has_participator_data()) {
    participator_data_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.participator_data_);
  } else {
    participator_data_ = nullptr;
  }
  if (from._internal_has_transaction_data()) {
    transaction_data_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.transaction_data_);
  } else {
    transaction_data_ = nullptr;
  }
  if (from._internal_has_resolve_timepoint()) {
    resolve_timepoint_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.resolve_timepoint_);
  } else {
    resolve_timepoint_ = nullptr;
  }
  resolve_times_ = from.resolve_times_;
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.transaction_participator_storage)
}

inline void transaction_participator_storage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&resolve_times_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(resolve_times_));
}

transaction_participator_storage::~transaction_participator_storage() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.transaction_participator_storage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction_participator_storage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete configure_;
  if (this != internal_default_instance()) delete participator_data_;
  if (this != internal_default_instance()) delete transaction_data_;
  if (this != internal_default_instance()) delete resolve_timepoint_;
}

void transaction_participator_storage::ArenaDtor(void* object) {
  transaction_participator_storage* _this = reinterpret_cast< transaction_participator_storage* >(object);
  (void)_this;
}
void transaction_participator_storage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_participator_storage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction_participator_storage::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.transaction_participator_storage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lock_resource_.Clear();
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && configure_ != nullptr) {
    delete configure_;
  }
  configure_ = nullptr;
  if (GetArenaForAllocation() == nullptr && participator_data_ != nullptr) {
    delete participator_data_;
  }
  participator_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transaction_data_ != nullptr) {
    delete transaction_data_;
  }
  transaction_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && resolve_timepoint_ != nullptr) {
    delete resolve_timepoint_;
  }
  resolve_timepoint_ = nullptr;
  resolve_times_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_participator_storage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .atframework.distributed_system.transaction_metadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .atframework.distributed_system.transaction_configure configure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_configure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any participator_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_participator_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any transaction_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 resolve_times = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          resolve_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp resolve_timepoint = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_resolve_timepoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes lock_resource = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_lock_resource();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* transaction_participator_storage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.transaction_participator_storage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // .atframework.distributed_system.transaction_configure configure = 2;
  if (this->_internal_has_configure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::configure(this), target, stream);
  }

  // .google.protobuf.Any participator_data = 3;
  if (this->_internal_has_participator_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::participator_data(this), target, stream);
  }

  // .google.protobuf.Any transaction_data = 4;
  if (this->_internal_has_transaction_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::transaction_data(this), target, stream);
  }

  // uint32 resolve_times = 11;
  if (this->_internal_resolve_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_resolve_times(), target);
  }

  // .google.protobuf.Timestamp resolve_timepoint = 12;
  if (this->_internal_has_resolve_timepoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::resolve_timepoint(this), target, stream);
  }

  // repeated bytes lock_resource = 21;
  for (int i = 0, n = this->_internal_lock_resource_size(); i < n; i++) {
    const auto& s = this->_internal_lock_resource(i);
    target = stream->WriteBytes(21, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.transaction_participator_storage)
  return target;
}

size_t transaction_participator_storage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.transaction_participator_storage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes lock_resource = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(lock_resource_.size());
  for (int i = 0, n = lock_resource_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      lock_resource_.Get(i));
  }

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .atframework.distributed_system.transaction_configure configure = 2;
  if (this->_internal_has_configure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *configure_);
  }

  // .google.protobuf.Any participator_data = 3;
  if (this->_internal_has_participator_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *participator_data_);
  }

  // .google.protobuf.Any transaction_data = 4;
  if (this->_internal_has_transaction_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_data_);
  }

  // .google.protobuf.Timestamp resolve_timepoint = 12;
  if (this->_internal_has_resolve_timepoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resolve_timepoint_);
  }

  // uint32 resolve_times = 11;
  if (this->_internal_resolve_times() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_resolve_times());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction_participator_storage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction_participator_storage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction_participator_storage::GetClassData() const { return &_class_data_; }

void transaction_participator_storage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<transaction_participator_storage *>(to)->MergeFrom(
      static_cast<const transaction_participator_storage &>(from));
}


void transaction_participator_storage::MergeFrom(const transaction_participator_storage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.transaction_participator_storage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  lock_resource_.MergeFrom(from.lock_resource_);
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::atframework::distributed_system::transaction_metadata::MergeFrom(from._internal_metadata());
  }
  if (from._internal_has_configure()) {
    _internal_mutable_configure()->::atframework::distributed_system::transaction_configure::MergeFrom(from._internal_configure());
  }
  if (from._internal_has_participator_data()) {
    _internal_mutable_participator_data()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_participator_data());
  }
  if (from._internal_has_transaction_data()) {
    _internal_mutable_transaction_data()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_transaction_data());
  }
  if (from._internal_has_resolve_timepoint()) {
    _internal_mutable_resolve_timepoint()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_resolve_timepoint());
  }
  if (from._internal_resolve_times() != 0) {
    _internal_set_resolve_times(from._internal_resolve_times());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction_participator_storage::CopyFrom(const transaction_participator_storage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.transaction_participator_storage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_participator_storage::IsInitialized() const {
  return true;
}

void transaction_participator_storage::InternalSwap(transaction_participator_storage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  lock_resource_.InternalSwap(&other->lock_resource_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(transaction_participator_storage, resolve_times_)
      + sizeof(transaction_participator_storage::resolve_times_)
      - PROTOBUF_FIELD_OFFSET(transaction_participator_storage, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_participator_storage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[5]);
}

// ===================================================================

class transaction_participator_failure_reason::_Internal {
 public:
};

transaction_participator_failure_reason::transaction_participator_failure_reason(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  locked_resource_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.transaction_participator_failure_reason)
}
transaction_participator_failure_reason::transaction_participator_failure_reason(const transaction_participator_failure_reason& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      locked_resource_(from.locked_resource_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  allow_retry_ = from.allow_retry_;
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.transaction_participator_failure_reason)
}

inline void transaction_participator_failure_reason::SharedCtor() {
allow_retry_ = false;
}

transaction_participator_failure_reason::~transaction_participator_failure_reason() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.transaction_participator_failure_reason)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction_participator_failure_reason::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void transaction_participator_failure_reason::ArenaDtor(void* object) {
  transaction_participator_failure_reason* _this = reinterpret_cast< transaction_participator_failure_reason* >(object);
  (void)_this;
}
void transaction_participator_failure_reason::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_participator_failure_reason::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction_participator_failure_reason::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.transaction_participator_failure_reason)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locked_resource_.Clear();
  allow_retry_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_participator_failure_reason::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool allow_retry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          allow_retry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes locked_resource = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_locked_resource();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* transaction_participator_failure_reason::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.transaction_participator_failure_reason)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool allow_retry = 1;
  if (this->_internal_allow_retry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_allow_retry(), target);
  }

  // repeated bytes locked_resource = 12;
  for (int i = 0, n = this->_internal_locked_resource_size(); i < n; i++) {
    const auto& s = this->_internal_locked_resource(i);
    target = stream->WriteBytes(12, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.transaction_participator_failure_reason)
  return target;
}

size_t transaction_participator_failure_reason::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.transaction_participator_failure_reason)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes locked_resource = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(locked_resource_.size());
  for (int i = 0, n = locked_resource_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      locked_resource_.Get(i));
  }

  // bool allow_retry = 1;
  if (this->_internal_allow_retry() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction_participator_failure_reason::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction_participator_failure_reason::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction_participator_failure_reason::GetClassData() const { return &_class_data_; }

void transaction_participator_failure_reason::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<transaction_participator_failure_reason *>(to)->MergeFrom(
      static_cast<const transaction_participator_failure_reason &>(from));
}


void transaction_participator_failure_reason::MergeFrom(const transaction_participator_failure_reason& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.transaction_participator_failure_reason)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  locked_resource_.MergeFrom(from.locked_resource_);
  if (from._internal_allow_retry() != 0) {
    _internal_set_allow_retry(from._internal_allow_retry());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction_participator_failure_reason::CopyFrom(const transaction_participator_failure_reason& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.transaction_participator_failure_reason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_participator_failure_reason::IsInitialized() const {
  return true;
}

void transaction_participator_failure_reason::InternalSwap(transaction_participator_failure_reason* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  locked_resource_.InternalSwap(&other->locked_resource_);
  swap(allow_retry_, other->allow_retry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_participator_failure_reason::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[6]);
}

// ===================================================================

class transaction_participator_snapshot::_Internal {
 public:
};

transaction_participator_snapshot::transaction_participator_snapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  running_transaction_(arena),
  finished_transaction_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.transaction_participator_snapshot)
}
transaction_participator_snapshot::transaction_participator_snapshot(const transaction_participator_snapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      running_transaction_(from.running_transaction_),
      finished_transaction_(from.finished_transaction_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.transaction_participator_snapshot)
}

inline void transaction_participator_snapshot::SharedCtor() {
}

transaction_participator_snapshot::~transaction_participator_snapshot() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.transaction_participator_snapshot)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction_participator_snapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void transaction_participator_snapshot::ArenaDtor(void* object) {
  transaction_participator_snapshot* _this = reinterpret_cast< transaction_participator_snapshot* >(object);
  (void)_this;
}
void transaction_participator_snapshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_participator_snapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction_participator_snapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.transaction_participator_snapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  running_transaction_.Clear();
  finished_transaction_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_participator_snapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .atframework.distributed_system.transaction_participator_storage running_transaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_running_transaction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .atframework.distributed_system.transaction_participator_storage finished_transaction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_finished_transaction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* transaction_participator_snapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.transaction_participator_snapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .atframework.distributed_system.transaction_participator_storage running_transaction = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_running_transaction_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_running_transaction(i), target, stream);
  }

  // repeated .atframework.distributed_system.transaction_participator_storage finished_transaction = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_finished_transaction_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_finished_transaction(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.transaction_participator_snapshot)
  return target;
}

size_t transaction_participator_snapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.transaction_participator_snapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .atframework.distributed_system.transaction_participator_storage running_transaction = 2;
  total_size += 1UL * this->_internal_running_transaction_size();
  for (const auto& msg : this->running_transaction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .atframework.distributed_system.transaction_participator_storage finished_transaction = 3;
  total_size += 1UL * this->_internal_finished_transaction_size();
  for (const auto& msg : this->finished_transaction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction_participator_snapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction_participator_snapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction_participator_snapshot::GetClassData() const { return &_class_data_; }

void transaction_participator_snapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<transaction_participator_snapshot *>(to)->MergeFrom(
      static_cast<const transaction_participator_snapshot &>(from));
}


void transaction_participator_snapshot::MergeFrom(const transaction_participator_snapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.transaction_participator_snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  running_transaction_.MergeFrom(from.running_transaction_);
  finished_transaction_.MergeFrom(from.finished_transaction_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction_participator_snapshot::CopyFrom(const transaction_participator_snapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.transaction_participator_snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_participator_snapshot::IsInitialized() const {
  return true;
}

void transaction_participator_snapshot::InternalSwap(transaction_participator_snapshot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  running_transaction_.InternalSwap(&other->running_transaction_);
  finished_transaction_.InternalSwap(&other->finished_transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_participator_snapshot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[7]);
}

// ===================================================================

class SSDistributeTransactionQueryReq::_Internal {
 public:
  static const ::atframework::distributed_system::transaction_metadata& metadata(const SSDistributeTransactionQueryReq* msg);
};

const ::atframework::distributed_system::transaction_metadata&
SSDistributeTransactionQueryReq::_Internal::metadata(const SSDistributeTransactionQueryReq* msg) {
  return *msg->metadata_;
}
SSDistributeTransactionQueryReq::SSDistributeTransactionQueryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.SSDistributeTransactionQueryReq)
}
SSDistributeTransactionQueryReq::SSDistributeTransactionQueryReq(const SSDistributeTransactionQueryReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::atframework::distributed_system::transaction_metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.SSDistributeTransactionQueryReq)
}

inline void SSDistributeTransactionQueryReq::SharedCtor() {
metadata_ = nullptr;
}

SSDistributeTransactionQueryReq::~SSDistributeTransactionQueryReq() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.SSDistributeTransactionQueryReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDistributeTransactionQueryReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void SSDistributeTransactionQueryReq::ArenaDtor(void* object) {
  SSDistributeTransactionQueryReq* _this = reinterpret_cast< SSDistributeTransactionQueryReq* >(object);
  (void)_this;
}
void SSDistributeTransactionQueryReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSDistributeTransactionQueryReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDistributeTransactionQueryReq::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.SSDistributeTransactionQueryReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDistributeTransactionQueryReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .atframework.distributed_system.transaction_metadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDistributeTransactionQueryReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.SSDistributeTransactionQueryReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.SSDistributeTransactionQueryReq)
  return target;
}

size_t SSDistributeTransactionQueryReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.SSDistributeTransactionQueryReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDistributeTransactionQueryReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDistributeTransactionQueryReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDistributeTransactionQueryReq::GetClassData() const { return &_class_data_; }

void SSDistributeTransactionQueryReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDistributeTransactionQueryReq *>(to)->MergeFrom(
      static_cast<const SSDistributeTransactionQueryReq &>(from));
}


void SSDistributeTransactionQueryReq::MergeFrom(const SSDistributeTransactionQueryReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.SSDistributeTransactionQueryReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::atframework::distributed_system::transaction_metadata::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDistributeTransactionQueryReq::CopyFrom(const SSDistributeTransactionQueryReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.SSDistributeTransactionQueryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDistributeTransactionQueryReq::IsInitialized() const {
  return true;
}

void SSDistributeTransactionQueryReq::InternalSwap(SSDistributeTransactionQueryReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDistributeTransactionQueryReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[8]);
}

// ===================================================================

class SSDistributeTransactionQueryRsp::_Internal {
 public:
  static const ::atframework::distributed_system::transaction_blob_storage& storage(const SSDistributeTransactionQueryRsp* msg);
};

const ::atframework::distributed_system::transaction_blob_storage&
SSDistributeTransactionQueryRsp::_Internal::storage(const SSDistributeTransactionQueryRsp* msg) {
  return *msg->storage_;
}
SSDistributeTransactionQueryRsp::SSDistributeTransactionQueryRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.SSDistributeTransactionQueryRsp)
}
SSDistributeTransactionQueryRsp::SSDistributeTransactionQueryRsp(const SSDistributeTransactionQueryRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_storage()) {
    storage_ = new ::atframework::distributed_system::transaction_blob_storage(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.SSDistributeTransactionQueryRsp)
}

inline void SSDistributeTransactionQueryRsp::SharedCtor() {
storage_ = nullptr;
}

SSDistributeTransactionQueryRsp::~SSDistributeTransactionQueryRsp() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.SSDistributeTransactionQueryRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDistributeTransactionQueryRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete storage_;
}

void SSDistributeTransactionQueryRsp::ArenaDtor(void* object) {
  SSDistributeTransactionQueryRsp* _this = reinterpret_cast< SSDistributeTransactionQueryRsp* >(object);
  (void)_this;
}
void SSDistributeTransactionQueryRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSDistributeTransactionQueryRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDistributeTransactionQueryRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.SSDistributeTransactionQueryRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && storage_ != nullptr) {
    delete storage_;
  }
  storage_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDistributeTransactionQueryRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .atframework.distributed_system.transaction_blob_storage storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDistributeTransactionQueryRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.SSDistributeTransactionQueryRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_blob_storage storage = 1;
  if (this->_internal_has_storage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::storage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.SSDistributeTransactionQueryRsp)
  return target;
}

size_t SSDistributeTransactionQueryRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.SSDistributeTransactionQueryRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_blob_storage storage = 1;
  if (this->_internal_has_storage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storage_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDistributeTransactionQueryRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDistributeTransactionQueryRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDistributeTransactionQueryRsp::GetClassData() const { return &_class_data_; }

void SSDistributeTransactionQueryRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDistributeTransactionQueryRsp *>(to)->MergeFrom(
      static_cast<const SSDistributeTransactionQueryRsp &>(from));
}


void SSDistributeTransactionQueryRsp::MergeFrom(const SSDistributeTransactionQueryRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.SSDistributeTransactionQueryRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_storage()) {
    _internal_mutable_storage()->::atframework::distributed_system::transaction_blob_storage::MergeFrom(from._internal_storage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDistributeTransactionQueryRsp::CopyFrom(const SSDistributeTransactionQueryRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.SSDistributeTransactionQueryRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDistributeTransactionQueryRsp::IsInitialized() const {
  return true;
}

void SSDistributeTransactionQueryRsp::InternalSwap(SSDistributeTransactionQueryRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(storage_, other->storage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDistributeTransactionQueryRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[9]);
}

// ===================================================================

class SSDistributeTransactionCreateReq::_Internal {
 public:
  static const ::atframework::distributed_system::transaction_blob_storage& storage(const SSDistributeTransactionCreateReq* msg);
};

const ::atframework::distributed_system::transaction_blob_storage&
SSDistributeTransactionCreateReq::_Internal::storage(const SSDistributeTransactionCreateReq* msg) {
  return *msg->storage_;
}
SSDistributeTransactionCreateReq::SSDistributeTransactionCreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.SSDistributeTransactionCreateReq)
}
SSDistributeTransactionCreateReq::SSDistributeTransactionCreateReq(const SSDistributeTransactionCreateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_storage()) {
    storage_ = new ::atframework::distributed_system::transaction_blob_storage(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.SSDistributeTransactionCreateReq)
}

inline void SSDistributeTransactionCreateReq::SharedCtor() {
storage_ = nullptr;
}

SSDistributeTransactionCreateReq::~SSDistributeTransactionCreateReq() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.SSDistributeTransactionCreateReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDistributeTransactionCreateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete storage_;
}

void SSDistributeTransactionCreateReq::ArenaDtor(void* object) {
  SSDistributeTransactionCreateReq* _this = reinterpret_cast< SSDistributeTransactionCreateReq* >(object);
  (void)_this;
}
void SSDistributeTransactionCreateReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSDistributeTransactionCreateReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDistributeTransactionCreateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.SSDistributeTransactionCreateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && storage_ != nullptr) {
    delete storage_;
  }
  storage_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDistributeTransactionCreateReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .atframework.distributed_system.transaction_blob_storage storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDistributeTransactionCreateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.SSDistributeTransactionCreateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_blob_storage storage = 1;
  if (this->_internal_has_storage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::storage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.SSDistributeTransactionCreateReq)
  return target;
}

size_t SSDistributeTransactionCreateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.SSDistributeTransactionCreateReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_blob_storage storage = 1;
  if (this->_internal_has_storage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storage_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDistributeTransactionCreateReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDistributeTransactionCreateReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDistributeTransactionCreateReq::GetClassData() const { return &_class_data_; }

void SSDistributeTransactionCreateReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDistributeTransactionCreateReq *>(to)->MergeFrom(
      static_cast<const SSDistributeTransactionCreateReq &>(from));
}


void SSDistributeTransactionCreateReq::MergeFrom(const SSDistributeTransactionCreateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.SSDistributeTransactionCreateReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_storage()) {
    _internal_mutable_storage()->::atframework::distributed_system::transaction_blob_storage::MergeFrom(from._internal_storage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDistributeTransactionCreateReq::CopyFrom(const SSDistributeTransactionCreateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.SSDistributeTransactionCreateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDistributeTransactionCreateReq::IsInitialized() const {
  return true;
}

void SSDistributeTransactionCreateReq::InternalSwap(SSDistributeTransactionCreateReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(storage_, other->storage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDistributeTransactionCreateReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[10]);
}

// ===================================================================

class SSDistributeTransactionCreateRsp::_Internal {
 public:
};

SSDistributeTransactionCreateRsp::SSDistributeTransactionCreateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.SSDistributeTransactionCreateRsp)
}
SSDistributeTransactionCreateRsp::SSDistributeTransactionCreateRsp(const SSDistributeTransactionCreateRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.SSDistributeTransactionCreateRsp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDistributeTransactionCreateRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDistributeTransactionCreateRsp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SSDistributeTransactionCreateRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[11]);
}

// ===================================================================

class SSDistributeTransactionCommitReq::_Internal {
 public:
  static const ::atframework::distributed_system::transaction_metadata& metadata(const SSDistributeTransactionCommitReq* msg);
};

const ::atframework::distributed_system::transaction_metadata&
SSDistributeTransactionCommitReq::_Internal::metadata(const SSDistributeTransactionCommitReq* msg) {
  return *msg->metadata_;
}
SSDistributeTransactionCommitReq::SSDistributeTransactionCommitReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.SSDistributeTransactionCommitReq)
}
SSDistributeTransactionCommitReq::SSDistributeTransactionCommitReq(const SSDistributeTransactionCommitReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::atframework::distributed_system::transaction_metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.SSDistributeTransactionCommitReq)
}

inline void SSDistributeTransactionCommitReq::SharedCtor() {
metadata_ = nullptr;
}

SSDistributeTransactionCommitReq::~SSDistributeTransactionCommitReq() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.SSDistributeTransactionCommitReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDistributeTransactionCommitReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void SSDistributeTransactionCommitReq::ArenaDtor(void* object) {
  SSDistributeTransactionCommitReq* _this = reinterpret_cast< SSDistributeTransactionCommitReq* >(object);
  (void)_this;
}
void SSDistributeTransactionCommitReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSDistributeTransactionCommitReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDistributeTransactionCommitReq::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.SSDistributeTransactionCommitReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDistributeTransactionCommitReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .atframework.distributed_system.transaction_metadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDistributeTransactionCommitReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.SSDistributeTransactionCommitReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.SSDistributeTransactionCommitReq)
  return target;
}

size_t SSDistributeTransactionCommitReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.SSDistributeTransactionCommitReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDistributeTransactionCommitReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDistributeTransactionCommitReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDistributeTransactionCommitReq::GetClassData() const { return &_class_data_; }

void SSDistributeTransactionCommitReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDistributeTransactionCommitReq *>(to)->MergeFrom(
      static_cast<const SSDistributeTransactionCommitReq &>(from));
}


void SSDistributeTransactionCommitReq::MergeFrom(const SSDistributeTransactionCommitReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.SSDistributeTransactionCommitReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::atframework::distributed_system::transaction_metadata::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDistributeTransactionCommitReq::CopyFrom(const SSDistributeTransactionCommitReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.SSDistributeTransactionCommitReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDistributeTransactionCommitReq::IsInitialized() const {
  return true;
}

void SSDistributeTransactionCommitReq::InternalSwap(SSDistributeTransactionCommitReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDistributeTransactionCommitReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[12]);
}

// ===================================================================

class SSDistributeTransactionCommitRsp::_Internal {
 public:
  static const ::atframework::distributed_system::transaction_metadata& metadata(const SSDistributeTransactionCommitRsp* msg);
};

const ::atframework::distributed_system::transaction_metadata&
SSDistributeTransactionCommitRsp::_Internal::metadata(const SSDistributeTransactionCommitRsp* msg) {
  return *msg->metadata_;
}
SSDistributeTransactionCommitRsp::SSDistributeTransactionCommitRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.SSDistributeTransactionCommitRsp)
}
SSDistributeTransactionCommitRsp::SSDistributeTransactionCommitRsp(const SSDistributeTransactionCommitRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::atframework::distributed_system::transaction_metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.SSDistributeTransactionCommitRsp)
}

inline void SSDistributeTransactionCommitRsp::SharedCtor() {
metadata_ = nullptr;
}

SSDistributeTransactionCommitRsp::~SSDistributeTransactionCommitRsp() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.SSDistributeTransactionCommitRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDistributeTransactionCommitRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void SSDistributeTransactionCommitRsp::ArenaDtor(void* object) {
  SSDistributeTransactionCommitRsp* _this = reinterpret_cast< SSDistributeTransactionCommitRsp* >(object);
  (void)_this;
}
void SSDistributeTransactionCommitRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSDistributeTransactionCommitRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDistributeTransactionCommitRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.SSDistributeTransactionCommitRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDistributeTransactionCommitRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .atframework.distributed_system.transaction_metadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDistributeTransactionCommitRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.SSDistributeTransactionCommitRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.SSDistributeTransactionCommitRsp)
  return target;
}

size_t SSDistributeTransactionCommitRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.SSDistributeTransactionCommitRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDistributeTransactionCommitRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDistributeTransactionCommitRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDistributeTransactionCommitRsp::GetClassData() const { return &_class_data_; }

void SSDistributeTransactionCommitRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDistributeTransactionCommitRsp *>(to)->MergeFrom(
      static_cast<const SSDistributeTransactionCommitRsp &>(from));
}


void SSDistributeTransactionCommitRsp::MergeFrom(const SSDistributeTransactionCommitRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.SSDistributeTransactionCommitRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::atframework::distributed_system::transaction_metadata::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDistributeTransactionCommitRsp::CopyFrom(const SSDistributeTransactionCommitRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.SSDistributeTransactionCommitRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDistributeTransactionCommitRsp::IsInitialized() const {
  return true;
}

void SSDistributeTransactionCommitRsp::InternalSwap(SSDistributeTransactionCommitRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDistributeTransactionCommitRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[13]);
}

// ===================================================================

class SSDistributeTransactionRejectReq::_Internal {
 public:
  static const ::atframework::distributed_system::transaction_metadata& metadata(const SSDistributeTransactionRejectReq* msg);
};

const ::atframework::distributed_system::transaction_metadata&
SSDistributeTransactionRejectReq::_Internal::metadata(const SSDistributeTransactionRejectReq* msg) {
  return *msg->metadata_;
}
SSDistributeTransactionRejectReq::SSDistributeTransactionRejectReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.SSDistributeTransactionRejectReq)
}
SSDistributeTransactionRejectReq::SSDistributeTransactionRejectReq(const SSDistributeTransactionRejectReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::atframework::distributed_system::transaction_metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.SSDistributeTransactionRejectReq)
}

inline void SSDistributeTransactionRejectReq::SharedCtor() {
metadata_ = nullptr;
}

SSDistributeTransactionRejectReq::~SSDistributeTransactionRejectReq() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.SSDistributeTransactionRejectReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDistributeTransactionRejectReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void SSDistributeTransactionRejectReq::ArenaDtor(void* object) {
  SSDistributeTransactionRejectReq* _this = reinterpret_cast< SSDistributeTransactionRejectReq* >(object);
  (void)_this;
}
void SSDistributeTransactionRejectReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSDistributeTransactionRejectReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDistributeTransactionRejectReq::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.SSDistributeTransactionRejectReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDistributeTransactionRejectReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .atframework.distributed_system.transaction_metadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDistributeTransactionRejectReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.SSDistributeTransactionRejectReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.SSDistributeTransactionRejectReq)
  return target;
}

size_t SSDistributeTransactionRejectReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.SSDistributeTransactionRejectReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDistributeTransactionRejectReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDistributeTransactionRejectReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDistributeTransactionRejectReq::GetClassData() const { return &_class_data_; }

void SSDistributeTransactionRejectReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDistributeTransactionRejectReq *>(to)->MergeFrom(
      static_cast<const SSDistributeTransactionRejectReq &>(from));
}


void SSDistributeTransactionRejectReq::MergeFrom(const SSDistributeTransactionRejectReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.SSDistributeTransactionRejectReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::atframework::distributed_system::transaction_metadata::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDistributeTransactionRejectReq::CopyFrom(const SSDistributeTransactionRejectReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.SSDistributeTransactionRejectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDistributeTransactionRejectReq::IsInitialized() const {
  return true;
}

void SSDistributeTransactionRejectReq::InternalSwap(SSDistributeTransactionRejectReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDistributeTransactionRejectReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[14]);
}

// ===================================================================

class SSDistributeTransactionRejectRsp::_Internal {
 public:
  static const ::atframework::distributed_system::transaction_metadata& metadata(const SSDistributeTransactionRejectRsp* msg);
};

const ::atframework::distributed_system::transaction_metadata&
SSDistributeTransactionRejectRsp::_Internal::metadata(const SSDistributeTransactionRejectRsp* msg) {
  return *msg->metadata_;
}
SSDistributeTransactionRejectRsp::SSDistributeTransactionRejectRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.SSDistributeTransactionRejectRsp)
}
SSDistributeTransactionRejectRsp::SSDistributeTransactionRejectRsp(const SSDistributeTransactionRejectRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::atframework::distributed_system::transaction_metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.SSDistributeTransactionRejectRsp)
}

inline void SSDistributeTransactionRejectRsp::SharedCtor() {
metadata_ = nullptr;
}

SSDistributeTransactionRejectRsp::~SSDistributeTransactionRejectRsp() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.SSDistributeTransactionRejectRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDistributeTransactionRejectRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void SSDistributeTransactionRejectRsp::ArenaDtor(void* object) {
  SSDistributeTransactionRejectRsp* _this = reinterpret_cast< SSDistributeTransactionRejectRsp* >(object);
  (void)_this;
}
void SSDistributeTransactionRejectRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSDistributeTransactionRejectRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDistributeTransactionRejectRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.SSDistributeTransactionRejectRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDistributeTransactionRejectRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .atframework.distributed_system.transaction_metadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDistributeTransactionRejectRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.SSDistributeTransactionRejectRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.SSDistributeTransactionRejectRsp)
  return target;
}

size_t SSDistributeTransactionRejectRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.SSDistributeTransactionRejectRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDistributeTransactionRejectRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDistributeTransactionRejectRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDistributeTransactionRejectRsp::GetClassData() const { return &_class_data_; }

void SSDistributeTransactionRejectRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDistributeTransactionRejectRsp *>(to)->MergeFrom(
      static_cast<const SSDistributeTransactionRejectRsp &>(from));
}


void SSDistributeTransactionRejectRsp::MergeFrom(const SSDistributeTransactionRejectRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.SSDistributeTransactionRejectRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::atframework::distributed_system::transaction_metadata::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDistributeTransactionRejectRsp::CopyFrom(const SSDistributeTransactionRejectRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.SSDistributeTransactionRejectRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDistributeTransactionRejectRsp::IsInitialized() const {
  return true;
}

void SSDistributeTransactionRejectRsp::InternalSwap(SSDistributeTransactionRejectRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDistributeTransactionRejectRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[15]);
}

// ===================================================================

class SSDistributeTransactionCommitParticipatorReq::_Internal {
 public:
  static const ::atframework::distributed_system::transaction_metadata& metadata(const SSDistributeTransactionCommitParticipatorReq* msg);
};

const ::atframework::distributed_system::transaction_metadata&
SSDistributeTransactionCommitParticipatorReq::_Internal::metadata(const SSDistributeTransactionCommitParticipatorReq* msg) {
  return *msg->metadata_;
}
SSDistributeTransactionCommitParticipatorReq::SSDistributeTransactionCommitParticipatorReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq)
}
SSDistributeTransactionCommitParticipatorReq::SSDistributeTransactionCommitParticipatorReq(const SSDistributeTransactionCommitParticipatorReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  participator_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    participator_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participator_key().empty()) {
    participator_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_participator_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::atframework::distributed_system::transaction_metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq)
}

inline void SSDistributeTransactionCommitParticipatorReq::SharedCtor() {
participator_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  participator_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
metadata_ = nullptr;
}

SSDistributeTransactionCommitParticipatorReq::~SSDistributeTransactionCommitParticipatorReq() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDistributeTransactionCommitParticipatorReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  participator_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void SSDistributeTransactionCommitParticipatorReq::ArenaDtor(void* object) {
  SSDistributeTransactionCommitParticipatorReq* _this = reinterpret_cast< SSDistributeTransactionCommitParticipatorReq* >(object);
  (void)_this;
}
void SSDistributeTransactionCommitParticipatorReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSDistributeTransactionCommitParticipatorReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDistributeTransactionCommitParticipatorReq::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  participator_key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDistributeTransactionCommitParticipatorReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .atframework.distributed_system.transaction_metadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string participator_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_participator_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq.participator_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDistributeTransactionCommitParticipatorReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // string participator_key = 2;
  if (!this->_internal_participator_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participator_key().data(), static_cast<int>(this->_internal_participator_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq.participator_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_participator_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq)
  return target;
}

size_t SSDistributeTransactionCommitParticipatorReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string participator_key = 2;
  if (!this->_internal_participator_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participator_key());
  }

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDistributeTransactionCommitParticipatorReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDistributeTransactionCommitParticipatorReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDistributeTransactionCommitParticipatorReq::GetClassData() const { return &_class_data_; }

void SSDistributeTransactionCommitParticipatorReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDistributeTransactionCommitParticipatorReq *>(to)->MergeFrom(
      static_cast<const SSDistributeTransactionCommitParticipatorReq &>(from));
}


void SSDistributeTransactionCommitParticipatorReq::MergeFrom(const SSDistributeTransactionCommitParticipatorReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_participator_key().empty()) {
    _internal_set_participator_key(from._internal_participator_key());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::atframework::distributed_system::transaction_metadata::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDistributeTransactionCommitParticipatorReq::CopyFrom(const SSDistributeTransactionCommitParticipatorReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDistributeTransactionCommitParticipatorReq::IsInitialized() const {
  return true;
}

void SSDistributeTransactionCommitParticipatorReq::InternalSwap(SSDistributeTransactionCommitParticipatorReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &participator_key_, lhs_arena,
      &other->participator_key_, rhs_arena
  );
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDistributeTransactionCommitParticipatorReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[16]);
}

// ===================================================================

class SSDistributeTransactionCommitParticipatorRsp::_Internal {
 public:
  static const ::atframework::distributed_system::transaction_metadata& metadata(const SSDistributeTransactionCommitParticipatorRsp* msg);
};

const ::atframework::distributed_system::transaction_metadata&
SSDistributeTransactionCommitParticipatorRsp::_Internal::metadata(const SSDistributeTransactionCommitParticipatorRsp* msg) {
  return *msg->metadata_;
}
SSDistributeTransactionCommitParticipatorRsp::SSDistributeTransactionCommitParticipatorRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.SSDistributeTransactionCommitParticipatorRsp)
}
SSDistributeTransactionCommitParticipatorRsp::SSDistributeTransactionCommitParticipatorRsp(const SSDistributeTransactionCommitParticipatorRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::atframework::distributed_system::transaction_metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.SSDistributeTransactionCommitParticipatorRsp)
}

inline void SSDistributeTransactionCommitParticipatorRsp::SharedCtor() {
metadata_ = nullptr;
}

SSDistributeTransactionCommitParticipatorRsp::~SSDistributeTransactionCommitParticipatorRsp() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.SSDistributeTransactionCommitParticipatorRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDistributeTransactionCommitParticipatorRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void SSDistributeTransactionCommitParticipatorRsp::ArenaDtor(void* object) {
  SSDistributeTransactionCommitParticipatorRsp* _this = reinterpret_cast< SSDistributeTransactionCommitParticipatorRsp* >(object);
  (void)_this;
}
void SSDistributeTransactionCommitParticipatorRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSDistributeTransactionCommitParticipatorRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDistributeTransactionCommitParticipatorRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.SSDistributeTransactionCommitParticipatorRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDistributeTransactionCommitParticipatorRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .atframework.distributed_system.transaction_metadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDistributeTransactionCommitParticipatorRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.SSDistributeTransactionCommitParticipatorRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.SSDistributeTransactionCommitParticipatorRsp)
  return target;
}

size_t SSDistributeTransactionCommitParticipatorRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.SSDistributeTransactionCommitParticipatorRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDistributeTransactionCommitParticipatorRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDistributeTransactionCommitParticipatorRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDistributeTransactionCommitParticipatorRsp::GetClassData() const { return &_class_data_; }

void SSDistributeTransactionCommitParticipatorRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDistributeTransactionCommitParticipatorRsp *>(to)->MergeFrom(
      static_cast<const SSDistributeTransactionCommitParticipatorRsp &>(from));
}


void SSDistributeTransactionCommitParticipatorRsp::MergeFrom(const SSDistributeTransactionCommitParticipatorRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.SSDistributeTransactionCommitParticipatorRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::atframework::distributed_system::transaction_metadata::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDistributeTransactionCommitParticipatorRsp::CopyFrom(const SSDistributeTransactionCommitParticipatorRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.SSDistributeTransactionCommitParticipatorRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDistributeTransactionCommitParticipatorRsp::IsInitialized() const {
  return true;
}

void SSDistributeTransactionCommitParticipatorRsp::InternalSwap(SSDistributeTransactionCommitParticipatorRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDistributeTransactionCommitParticipatorRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[17]);
}

// ===================================================================

class SSDistributeTransactionRejectParticipatorReq::_Internal {
 public:
  static const ::atframework::distributed_system::transaction_metadata& metadata(const SSDistributeTransactionRejectParticipatorReq* msg);
};

const ::atframework::distributed_system::transaction_metadata&
SSDistributeTransactionRejectParticipatorReq::_Internal::metadata(const SSDistributeTransactionRejectParticipatorReq* msg) {
  return *msg->metadata_;
}
SSDistributeTransactionRejectParticipatorReq::SSDistributeTransactionRejectParticipatorReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq)
}
SSDistributeTransactionRejectParticipatorReq::SSDistributeTransactionRejectParticipatorReq(const SSDistributeTransactionRejectParticipatorReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  participator_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    participator_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_participator_key().empty()) {
    participator_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_participator_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::atframework::distributed_system::transaction_metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq)
}

inline void SSDistributeTransactionRejectParticipatorReq::SharedCtor() {
participator_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  participator_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
metadata_ = nullptr;
}

SSDistributeTransactionRejectParticipatorReq::~SSDistributeTransactionRejectParticipatorReq() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDistributeTransactionRejectParticipatorReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  participator_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void SSDistributeTransactionRejectParticipatorReq::ArenaDtor(void* object) {
  SSDistributeTransactionRejectParticipatorReq* _this = reinterpret_cast< SSDistributeTransactionRejectParticipatorReq* >(object);
  (void)_this;
}
void SSDistributeTransactionRejectParticipatorReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSDistributeTransactionRejectParticipatorReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDistributeTransactionRejectParticipatorReq::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  participator_key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDistributeTransactionRejectParticipatorReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .atframework.distributed_system.transaction_metadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string participator_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_participator_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq.participator_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDistributeTransactionRejectParticipatorReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // string participator_key = 2;
  if (!this->_internal_participator_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_participator_key().data(), static_cast<int>(this->_internal_participator_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq.participator_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_participator_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq)
  return target;
}

size_t SSDistributeTransactionRejectParticipatorReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string participator_key = 2;
  if (!this->_internal_participator_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_participator_key());
  }

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDistributeTransactionRejectParticipatorReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDistributeTransactionRejectParticipatorReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDistributeTransactionRejectParticipatorReq::GetClassData() const { return &_class_data_; }

void SSDistributeTransactionRejectParticipatorReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDistributeTransactionRejectParticipatorReq *>(to)->MergeFrom(
      static_cast<const SSDistributeTransactionRejectParticipatorReq &>(from));
}


void SSDistributeTransactionRejectParticipatorReq::MergeFrom(const SSDistributeTransactionRejectParticipatorReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_participator_key().empty()) {
    _internal_set_participator_key(from._internal_participator_key());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::atframework::distributed_system::transaction_metadata::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDistributeTransactionRejectParticipatorReq::CopyFrom(const SSDistributeTransactionRejectParticipatorReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDistributeTransactionRejectParticipatorReq::IsInitialized() const {
  return true;
}

void SSDistributeTransactionRejectParticipatorReq::InternalSwap(SSDistributeTransactionRejectParticipatorReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &participator_key_, lhs_arena,
      &other->participator_key_, rhs_arena
  );
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDistributeTransactionRejectParticipatorReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[18]);
}

// ===================================================================

class SSDistributeTransactionRejectParticipatorRsp::_Internal {
 public:
  static const ::atframework::distributed_system::transaction_metadata& metadata(const SSDistributeTransactionRejectParticipatorRsp* msg);
};

const ::atframework::distributed_system::transaction_metadata&
SSDistributeTransactionRejectParticipatorRsp::_Internal::metadata(const SSDistributeTransactionRejectParticipatorRsp* msg) {
  return *msg->metadata_;
}
SSDistributeTransactionRejectParticipatorRsp::SSDistributeTransactionRejectParticipatorRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.SSDistributeTransactionRejectParticipatorRsp)
}
SSDistributeTransactionRejectParticipatorRsp::SSDistributeTransactionRejectParticipatorRsp(const SSDistributeTransactionRejectParticipatorRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::atframework::distributed_system::transaction_metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.SSDistributeTransactionRejectParticipatorRsp)
}

inline void SSDistributeTransactionRejectParticipatorRsp::SharedCtor() {
metadata_ = nullptr;
}

SSDistributeTransactionRejectParticipatorRsp::~SSDistributeTransactionRejectParticipatorRsp() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.SSDistributeTransactionRejectParticipatorRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDistributeTransactionRejectParticipatorRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void SSDistributeTransactionRejectParticipatorRsp::ArenaDtor(void* object) {
  SSDistributeTransactionRejectParticipatorRsp* _this = reinterpret_cast< SSDistributeTransactionRejectParticipatorRsp* >(object);
  (void)_this;
}
void SSDistributeTransactionRejectParticipatorRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSDistributeTransactionRejectParticipatorRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDistributeTransactionRejectParticipatorRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.SSDistributeTransactionRejectParticipatorRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDistributeTransactionRejectParticipatorRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .atframework.distributed_system.transaction_metadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDistributeTransactionRejectParticipatorRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.SSDistributeTransactionRejectParticipatorRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.SSDistributeTransactionRejectParticipatorRsp)
  return target;
}

size_t SSDistributeTransactionRejectParticipatorRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.SSDistributeTransactionRejectParticipatorRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDistributeTransactionRejectParticipatorRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDistributeTransactionRejectParticipatorRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDistributeTransactionRejectParticipatorRsp::GetClassData() const { return &_class_data_; }

void SSDistributeTransactionRejectParticipatorRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDistributeTransactionRejectParticipatorRsp *>(to)->MergeFrom(
      static_cast<const SSDistributeTransactionRejectParticipatorRsp &>(from));
}


void SSDistributeTransactionRejectParticipatorRsp::MergeFrom(const SSDistributeTransactionRejectParticipatorRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.SSDistributeTransactionRejectParticipatorRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::atframework::distributed_system::transaction_metadata::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDistributeTransactionRejectParticipatorRsp::CopyFrom(const SSDistributeTransactionRejectParticipatorRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.SSDistributeTransactionRejectParticipatorRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDistributeTransactionRejectParticipatorRsp::IsInitialized() const {
  return true;
}

void SSDistributeTransactionRejectParticipatorRsp::InternalSwap(SSDistributeTransactionRejectParticipatorRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDistributeTransactionRejectParticipatorRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[19]);
}

// ===================================================================

class SSDistributeTransactionRemoveReq::_Internal {
 public:
  static const ::atframework::distributed_system::transaction_metadata& metadata(const SSDistributeTransactionRemoveReq* msg);
};

const ::atframework::distributed_system::transaction_metadata&
SSDistributeTransactionRemoveReq::_Internal::metadata(const SSDistributeTransactionRemoveReq* msg) {
  return *msg->metadata_;
}
SSDistributeTransactionRemoveReq::SSDistributeTransactionRemoveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.SSDistributeTransactionRemoveReq)
}
SSDistributeTransactionRemoveReq::SSDistributeTransactionRemoveReq(const SSDistributeTransactionRemoveReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::atframework::distributed_system::transaction_metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.SSDistributeTransactionRemoveReq)
}

inline void SSDistributeTransactionRemoveReq::SharedCtor() {
metadata_ = nullptr;
}

SSDistributeTransactionRemoveReq::~SSDistributeTransactionRemoveReq() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.SSDistributeTransactionRemoveReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDistributeTransactionRemoveReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void SSDistributeTransactionRemoveReq::ArenaDtor(void* object) {
  SSDistributeTransactionRemoveReq* _this = reinterpret_cast< SSDistributeTransactionRemoveReq* >(object);
  (void)_this;
}
void SSDistributeTransactionRemoveReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSDistributeTransactionRemoveReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDistributeTransactionRemoveReq::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.SSDistributeTransactionRemoveReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDistributeTransactionRemoveReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .atframework.distributed_system.transaction_metadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDistributeTransactionRemoveReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.SSDistributeTransactionRemoveReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.SSDistributeTransactionRemoveReq)
  return target;
}

size_t SSDistributeTransactionRemoveReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.SSDistributeTransactionRemoveReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDistributeTransactionRemoveReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDistributeTransactionRemoveReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDistributeTransactionRemoveReq::GetClassData() const { return &_class_data_; }

void SSDistributeTransactionRemoveReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDistributeTransactionRemoveReq *>(to)->MergeFrom(
      static_cast<const SSDistributeTransactionRemoveReq &>(from));
}


void SSDistributeTransactionRemoveReq::MergeFrom(const SSDistributeTransactionRemoveReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.SSDistributeTransactionRemoveReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::atframework::distributed_system::transaction_metadata::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDistributeTransactionRemoveReq::CopyFrom(const SSDistributeTransactionRemoveReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.SSDistributeTransactionRemoveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDistributeTransactionRemoveReq::IsInitialized() const {
  return true;
}

void SSDistributeTransactionRemoveReq::InternalSwap(SSDistributeTransactionRemoveReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDistributeTransactionRemoveReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[20]);
}

// ===================================================================

class SSDistributeTransactionRemoveRsp::_Internal {
 public:
};

SSDistributeTransactionRemoveRsp::SSDistributeTransactionRemoveRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.SSDistributeTransactionRemoveRsp)
}
SSDistributeTransactionRemoveRsp::SSDistributeTransactionRemoveRsp(const SSDistributeTransactionRemoveRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.SSDistributeTransactionRemoveRsp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDistributeTransactionRemoveRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDistributeTransactionRemoveRsp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SSDistributeTransactionRemoveRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[21]);
}

// ===================================================================

class SSParticipatorTransactionPrepareReq::_Internal {
 public:
  static const ::atframework::distributed_system::transaction_participator_storage& storage(const SSParticipatorTransactionPrepareReq* msg);
};

const ::atframework::distributed_system::transaction_participator_storage&
SSParticipatorTransactionPrepareReq::_Internal::storage(const SSParticipatorTransactionPrepareReq* msg) {
  return *msg->storage_;
}
SSParticipatorTransactionPrepareReq::SSParticipatorTransactionPrepareReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.SSParticipatorTransactionPrepareReq)
}
SSParticipatorTransactionPrepareReq::SSParticipatorTransactionPrepareReq(const SSParticipatorTransactionPrepareReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_storage()) {
    storage_ = new ::atframework::distributed_system::transaction_participator_storage(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.SSParticipatorTransactionPrepareReq)
}

inline void SSParticipatorTransactionPrepareReq::SharedCtor() {
storage_ = nullptr;
}

SSParticipatorTransactionPrepareReq::~SSParticipatorTransactionPrepareReq() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.SSParticipatorTransactionPrepareReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSParticipatorTransactionPrepareReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete storage_;
}

void SSParticipatorTransactionPrepareReq::ArenaDtor(void* object) {
  SSParticipatorTransactionPrepareReq* _this = reinterpret_cast< SSParticipatorTransactionPrepareReq* >(object);
  (void)_this;
}
void SSParticipatorTransactionPrepareReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSParticipatorTransactionPrepareReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSParticipatorTransactionPrepareReq::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.SSParticipatorTransactionPrepareReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && storage_ != nullptr) {
    delete storage_;
  }
  storage_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSParticipatorTransactionPrepareReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .atframework.distributed_system.transaction_participator_storage storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSParticipatorTransactionPrepareReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.SSParticipatorTransactionPrepareReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_participator_storage storage = 1;
  if (this->_internal_has_storage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::storage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.SSParticipatorTransactionPrepareReq)
  return target;
}

size_t SSParticipatorTransactionPrepareReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.SSParticipatorTransactionPrepareReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_participator_storage storage = 1;
  if (this->_internal_has_storage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storage_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSParticipatorTransactionPrepareReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSParticipatorTransactionPrepareReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSParticipatorTransactionPrepareReq::GetClassData() const { return &_class_data_; }

void SSParticipatorTransactionPrepareReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSParticipatorTransactionPrepareReq *>(to)->MergeFrom(
      static_cast<const SSParticipatorTransactionPrepareReq &>(from));
}


void SSParticipatorTransactionPrepareReq::MergeFrom(const SSParticipatorTransactionPrepareReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.SSParticipatorTransactionPrepareReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_storage()) {
    _internal_mutable_storage()->::atframework::distributed_system::transaction_participator_storage::MergeFrom(from._internal_storage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSParticipatorTransactionPrepareReq::CopyFrom(const SSParticipatorTransactionPrepareReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.SSParticipatorTransactionPrepareReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSParticipatorTransactionPrepareReq::IsInitialized() const {
  return true;
}

void SSParticipatorTransactionPrepareReq::InternalSwap(SSParticipatorTransactionPrepareReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(storage_, other->storage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSParticipatorTransactionPrepareReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[22]);
}

// ===================================================================

class SSParticipatorTransactionPrepareRsp::_Internal {
 public:
  static const ::atframework::distributed_system::transaction_participator_failure_reason& reason(const SSParticipatorTransactionPrepareRsp* msg);
};

const ::atframework::distributed_system::transaction_participator_failure_reason&
SSParticipatorTransactionPrepareRsp::_Internal::reason(const SSParticipatorTransactionPrepareRsp* msg) {
  return *msg->reason_;
}
SSParticipatorTransactionPrepareRsp::SSParticipatorTransactionPrepareRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.SSParticipatorTransactionPrepareRsp)
}
SSParticipatorTransactionPrepareRsp::SSParticipatorTransactionPrepareRsp(const SSParticipatorTransactionPrepareRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reason()) {
    reason_ = new ::atframework::distributed_system::transaction_participator_failure_reason(*from.reason_);
  } else {
    reason_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.SSParticipatorTransactionPrepareRsp)
}

inline void SSParticipatorTransactionPrepareRsp::SharedCtor() {
reason_ = nullptr;
}

SSParticipatorTransactionPrepareRsp::~SSParticipatorTransactionPrepareRsp() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.SSParticipatorTransactionPrepareRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSParticipatorTransactionPrepareRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete reason_;
}

void SSParticipatorTransactionPrepareRsp::ArenaDtor(void* object) {
  SSParticipatorTransactionPrepareRsp* _this = reinterpret_cast< SSParticipatorTransactionPrepareRsp* >(object);
  (void)_this;
}
void SSParticipatorTransactionPrepareRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSParticipatorTransactionPrepareRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSParticipatorTransactionPrepareRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.SSParticipatorTransactionPrepareRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && reason_ != nullptr) {
    delete reason_;
  }
  reason_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSParticipatorTransactionPrepareRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .atframework.distributed_system.transaction_participator_failure_reason reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reason(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSParticipatorTransactionPrepareRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.SSParticipatorTransactionPrepareRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_participator_failure_reason reason = 1;
  if (this->_internal_has_reason()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reason(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.SSParticipatorTransactionPrepareRsp)
  return target;
}

size_t SSParticipatorTransactionPrepareRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.SSParticipatorTransactionPrepareRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atframework.distributed_system.transaction_participator_failure_reason reason = 1;
  if (this->_internal_has_reason()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reason_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSParticipatorTransactionPrepareRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSParticipatorTransactionPrepareRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSParticipatorTransactionPrepareRsp::GetClassData() const { return &_class_data_; }

void SSParticipatorTransactionPrepareRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSParticipatorTransactionPrepareRsp *>(to)->MergeFrom(
      static_cast<const SSParticipatorTransactionPrepareRsp &>(from));
}


void SSParticipatorTransactionPrepareRsp::MergeFrom(const SSParticipatorTransactionPrepareRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.SSParticipatorTransactionPrepareRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_mutable_reason()->::atframework::distributed_system::transaction_participator_failure_reason::MergeFrom(from._internal_reason());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSParticipatorTransactionPrepareRsp::CopyFrom(const SSParticipatorTransactionPrepareRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.SSParticipatorTransactionPrepareRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSParticipatorTransactionPrepareRsp::IsInitialized() const {
  return true;
}

void SSParticipatorTransactionPrepareRsp::InternalSwap(SSParticipatorTransactionPrepareRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSParticipatorTransactionPrepareRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[23]);
}

// ===================================================================

class SSParticipatorTransactionCommitReq::_Internal {
 public:
};

SSParticipatorTransactionCommitReq::SSParticipatorTransactionCommitReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.SSParticipatorTransactionCommitReq)
}
SSParticipatorTransactionCommitReq::SSParticipatorTransactionCommitReq(const SSParticipatorTransactionCommitReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transaction_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    transaction_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transaction_uuid().empty()) {
    transaction_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_uuid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.SSParticipatorTransactionCommitReq)
}

inline void SSParticipatorTransactionCommitReq::SharedCtor() {
transaction_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  transaction_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SSParticipatorTransactionCommitReq::~SSParticipatorTransactionCommitReq() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.SSParticipatorTransactionCommitReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSParticipatorTransactionCommitReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transaction_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SSParticipatorTransactionCommitReq::ArenaDtor(void* object) {
  SSParticipatorTransactionCommitReq* _this = reinterpret_cast< SSParticipatorTransactionCommitReq* >(object);
  (void)_this;
}
void SSParticipatorTransactionCommitReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSParticipatorTransactionCommitReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSParticipatorTransactionCommitReq::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.SSParticipatorTransactionCommitReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_uuid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSParticipatorTransactionCommitReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes transaction_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_transaction_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSParticipatorTransactionCommitReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.SSParticipatorTransactionCommitReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction_uuid = 1;
  if (!this->_internal_transaction_uuid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_transaction_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.SSParticipatorTransactionCommitReq)
  return target;
}

size_t SSParticipatorTransactionCommitReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.SSParticipatorTransactionCommitReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes transaction_uuid = 1;
  if (!this->_internal_transaction_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_uuid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSParticipatorTransactionCommitReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSParticipatorTransactionCommitReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSParticipatorTransactionCommitReq::GetClassData() const { return &_class_data_; }

void SSParticipatorTransactionCommitReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSParticipatorTransactionCommitReq *>(to)->MergeFrom(
      static_cast<const SSParticipatorTransactionCommitReq &>(from));
}


void SSParticipatorTransactionCommitReq::MergeFrom(const SSParticipatorTransactionCommitReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.SSParticipatorTransactionCommitReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_transaction_uuid().empty()) {
    _internal_set_transaction_uuid(from._internal_transaction_uuid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSParticipatorTransactionCommitReq::CopyFrom(const SSParticipatorTransactionCommitReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.SSParticipatorTransactionCommitReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSParticipatorTransactionCommitReq::IsInitialized() const {
  return true;
}

void SSParticipatorTransactionCommitReq::InternalSwap(SSParticipatorTransactionCommitReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transaction_uuid_, lhs_arena,
      &other->transaction_uuid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SSParticipatorTransactionCommitReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[24]);
}

// ===================================================================

class SSParticipatorTransactionCommitRsp::_Internal {
 public:
};

SSParticipatorTransactionCommitRsp::SSParticipatorTransactionCommitRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.SSParticipatorTransactionCommitRsp)
}
SSParticipatorTransactionCommitRsp::SSParticipatorTransactionCommitRsp(const SSParticipatorTransactionCommitRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.SSParticipatorTransactionCommitRsp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSParticipatorTransactionCommitRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSParticipatorTransactionCommitRsp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SSParticipatorTransactionCommitRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[25]);
}

// ===================================================================

class SSParticipatorTransactionRejectReq::_Internal {
 public:
  static const ::atframework::distributed_system::transaction_participator_storage& storage(const SSParticipatorTransactionRejectReq* msg);
};

const ::atframework::distributed_system::transaction_participator_storage&
SSParticipatorTransactionRejectReq::_Internal::storage(const SSParticipatorTransactionRejectReq* msg) {
  return *msg->storage_;
}
SSParticipatorTransactionRejectReq::SSParticipatorTransactionRejectReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.SSParticipatorTransactionRejectReq)
}
SSParticipatorTransactionRejectReq::SSParticipatorTransactionRejectReq(const SSParticipatorTransactionRejectReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transaction_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    transaction_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transaction_uuid().empty()) {
    transaction_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_uuid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_storage()) {
    storage_ = new ::atframework::distributed_system::transaction_participator_storage(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.SSParticipatorTransactionRejectReq)
}

inline void SSParticipatorTransactionRejectReq::SharedCtor() {
transaction_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  transaction_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
storage_ = nullptr;
}

SSParticipatorTransactionRejectReq::~SSParticipatorTransactionRejectReq() {
  // @@protoc_insertion_point(destructor:atframework.distributed_system.SSParticipatorTransactionRejectReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSParticipatorTransactionRejectReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transaction_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete storage_;
}

void SSParticipatorTransactionRejectReq::ArenaDtor(void* object) {
  SSParticipatorTransactionRejectReq* _this = reinterpret_cast< SSParticipatorTransactionRejectReq* >(object);
  (void)_this;
}
void SSParticipatorTransactionRejectReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSParticipatorTransactionRejectReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSParticipatorTransactionRejectReq::Clear() {
// @@protoc_insertion_point(message_clear_start:atframework.distributed_system.SSParticipatorTransactionRejectReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_uuid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && storage_ != nullptr) {
    delete storage_;
  }
  storage_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSParticipatorTransactionRejectReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes transaction_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_transaction_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .atframework.distributed_system.transaction_participator_storage storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSParticipatorTransactionRejectReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atframework.distributed_system.SSParticipatorTransactionRejectReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction_uuid = 1;
  if (!this->_internal_transaction_uuid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_transaction_uuid(), target);
  }

  // .atframework.distributed_system.transaction_participator_storage storage = 2;
  if (this->_internal_has_storage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atframework.distributed_system.SSParticipatorTransactionRejectReq)
  return target;
}

size_t SSParticipatorTransactionRejectReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atframework.distributed_system.SSParticipatorTransactionRejectReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes transaction_uuid = 1;
  if (!this->_internal_transaction_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_uuid());
  }

  // .atframework.distributed_system.transaction_participator_storage storage = 2;
  if (this->_internal_has_storage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storage_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSParticipatorTransactionRejectReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSParticipatorTransactionRejectReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSParticipatorTransactionRejectReq::GetClassData() const { return &_class_data_; }

void SSParticipatorTransactionRejectReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSParticipatorTransactionRejectReq *>(to)->MergeFrom(
      static_cast<const SSParticipatorTransactionRejectReq &>(from));
}


void SSParticipatorTransactionRejectReq::MergeFrom(const SSParticipatorTransactionRejectReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atframework.distributed_system.SSParticipatorTransactionRejectReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_transaction_uuid().empty()) {
    _internal_set_transaction_uuid(from._internal_transaction_uuid());
  }
  if (from._internal_has_storage()) {
    _internal_mutable_storage()->::atframework::distributed_system::transaction_participator_storage::MergeFrom(from._internal_storage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSParticipatorTransactionRejectReq::CopyFrom(const SSParticipatorTransactionRejectReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atframework.distributed_system.SSParticipatorTransactionRejectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSParticipatorTransactionRejectReq::IsInitialized() const {
  return true;
}

void SSParticipatorTransactionRejectReq::InternalSwap(SSParticipatorTransactionRejectReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transaction_uuid_, lhs_arena,
      &other->transaction_uuid_, rhs_arena
  );
  swap(storage_, other->storage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSParticipatorTransactionRejectReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[26]);
}

// ===================================================================

class SSParticipatorTransactionRejectRsp::_Internal {
 public:
};

SSParticipatorTransactionRejectRsp::SSParticipatorTransactionRejectRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:atframework.distributed_system.SSParticipatorTransactionRejectRsp)
}
SSParticipatorTransactionRejectRsp::SSParticipatorTransactionRejectRsp(const SSParticipatorTransactionRejectRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:atframework.distributed_system.SSParticipatorTransactionRejectRsp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSParticipatorTransactionRejectRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSParticipatorTransactionRejectRsp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SSParticipatorTransactionRejectRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_getter, &descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto_once,
      file_level_metadata_pbdesc_2fdistributed_5ftransaction_2eproto[27]);
}

// ===================================================================

DtcoordsvrService::~DtcoordsvrService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DtcoordsvrService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto);
  return file_level_service_descriptors_pbdesc_2fdistributed_5ftransaction_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DtcoordsvrService::GetDescriptor() {
  return descriptor();
}

void DtcoordsvrService::query(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::atframework::distributed_system::SSDistributeTransactionQueryReq*,
                         ::atframework::distributed_system::SSDistributeTransactionQueryRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method query() not implemented.");
  done->Run();
}

void DtcoordsvrService::create(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::atframework::distributed_system::SSDistributeTransactionCreateReq*,
                         ::atframework::distributed_system::SSDistributeTransactionCreateRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method create() not implemented.");
  done->Run();
}

void DtcoordsvrService::commit(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::atframework::distributed_system::SSDistributeTransactionCommitReq*,
                         ::atframework::distributed_system::SSDistributeTransactionCommitRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method commit() not implemented.");
  done->Run();
}

void DtcoordsvrService::reject(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::atframework::distributed_system::SSDistributeTransactionRejectReq*,
                         ::atframework::distributed_system::SSDistributeTransactionRejectRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method reject() not implemented.");
  done->Run();
}

void DtcoordsvrService::commit_participator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::atframework::distributed_system::SSDistributeTransactionCommitParticipatorReq*,
                         ::atframework::distributed_system::SSDistributeTransactionCommitParticipatorRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method commit_participator() not implemented.");
  done->Run();
}

void DtcoordsvrService::reject_participator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::atframework::distributed_system::SSDistributeTransactionRejectParticipatorReq*,
                         ::atframework::distributed_system::SSDistributeTransactionRejectParticipatorRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method reject_participator() not implemented.");
  done->Run();
}

void DtcoordsvrService::remove(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::atframework::distributed_system::SSDistributeTransactionRemoveReq*,
                         ::atframework::distributed_system::SSDistributeTransactionRemoveRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method remove() not implemented.");
  done->Run();
}

void DtcoordsvrService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_pbdesc_2fdistributed_5ftransaction_2eproto[0]);
  switch(method->index()) {
    case 0:
      query(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::atframework::distributed_system::SSDistributeTransactionQueryReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::atframework::distributed_system::SSDistributeTransactionQueryRsp*>(
                 response),
             done);
      break;
    case 1:
      create(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::atframework::distributed_system::SSDistributeTransactionCreateReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::atframework::distributed_system::SSDistributeTransactionCreateRsp*>(
                 response),
             done);
      break;
    case 2:
      commit(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::atframework::distributed_system::SSDistributeTransactionCommitReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::atframework::distributed_system::SSDistributeTransactionCommitRsp*>(
                 response),
             done);
      break;
    case 3:
      reject(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::atframework::distributed_system::SSDistributeTransactionRejectReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::atframework::distributed_system::SSDistributeTransactionRejectRsp*>(
                 response),
             done);
      break;
    case 4:
      commit_participator(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::atframework::distributed_system::SSDistributeTransactionCommitParticipatorReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::atframework::distributed_system::SSDistributeTransactionCommitParticipatorRsp*>(
                 response),
             done);
      break;
    case 5:
      reject_participator(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::atframework::distributed_system::SSDistributeTransactionRejectParticipatorReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::atframework::distributed_system::SSDistributeTransactionRejectParticipatorRsp*>(
                 response),
             done);
      break;
    case 6:
      remove(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::atframework::distributed_system::SSDistributeTransactionRemoveReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::atframework::distributed_system::SSDistributeTransactionRemoveRsp*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DtcoordsvrService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::atframework::distributed_system::SSDistributeTransactionQueryReq::default_instance();
    case 1:
      return ::atframework::distributed_system::SSDistributeTransactionCreateReq::default_instance();
    case 2:
      return ::atframework::distributed_system::SSDistributeTransactionCommitReq::default_instance();
    case 3:
      return ::atframework::distributed_system::SSDistributeTransactionRejectReq::default_instance();
    case 4:
      return ::atframework::distributed_system::SSDistributeTransactionCommitParticipatorReq::default_instance();
    case 5:
      return ::atframework::distributed_system::SSDistributeTransactionRejectParticipatorReq::default_instance();
    case 6:
      return ::atframework::distributed_system::SSDistributeTransactionRemoveReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DtcoordsvrService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::atframework::distributed_system::SSDistributeTransactionQueryRsp::default_instance();
    case 1:
      return ::atframework::distributed_system::SSDistributeTransactionCreateRsp::default_instance();
    case 2:
      return ::atframework::distributed_system::SSDistributeTransactionCommitRsp::default_instance();
    case 3:
      return ::atframework::distributed_system::SSDistributeTransactionRejectRsp::default_instance();
    case 4:
      return ::atframework::distributed_system::SSDistributeTransactionCommitParticipatorRsp::default_instance();
    case 5:
      return ::atframework::distributed_system::SSDistributeTransactionRejectParticipatorRsp::default_instance();
    case 6:
      return ::atframework::distributed_system::SSDistributeTransactionRemoveRsp::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

DtcoordsvrService_Stub::DtcoordsvrService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DtcoordsvrService_Stub::DtcoordsvrService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
DtcoordsvrService_Stub::~DtcoordsvrService_Stub() {
  if (owns_channel_) delete channel_;
}

void DtcoordsvrService_Stub::query(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::atframework::distributed_system::SSDistributeTransactionQueryReq* request,
                              ::atframework::distributed_system::SSDistributeTransactionQueryRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void DtcoordsvrService_Stub::create(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::atframework::distributed_system::SSDistributeTransactionCreateReq* request,
                              ::atframework::distributed_system::SSDistributeTransactionCreateRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void DtcoordsvrService_Stub::commit(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::atframework::distributed_system::SSDistributeTransactionCommitReq* request,
                              ::atframework::distributed_system::SSDistributeTransactionCommitRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void DtcoordsvrService_Stub::reject(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::atframework::distributed_system::SSDistributeTransactionRejectReq* request,
                              ::atframework::distributed_system::SSDistributeTransactionRejectRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void DtcoordsvrService_Stub::commit_participator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::atframework::distributed_system::SSDistributeTransactionCommitParticipatorReq* request,
                              ::atframework::distributed_system::SSDistributeTransactionCommitParticipatorRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void DtcoordsvrService_Stub::reject_participator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::atframework::distributed_system::SSDistributeTransactionRejectParticipatorReq* request,
                              ::atframework::distributed_system::SSDistributeTransactionRejectParticipatorRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void DtcoordsvrService_Stub::remove(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::atframework::distributed_system::SSDistributeTransactionRemoveReq* request,
                              ::atframework::distributed_system::SSDistributeTransactionRemoveRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace distributed_system
}  // namespace atframework
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::transaction_participator* Arena::CreateMaybeMessage< ::atframework::distributed_system::transaction_participator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::transaction_participator >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::transaction_configure* Arena::CreateMaybeMessage< ::atframework::distributed_system::transaction_configure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::transaction_configure >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::transaction_metadata* Arena::CreateMaybeMessage< ::atframework::distributed_system::transaction_metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::transaction_metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::transaction_blob_storage_ParticipatorsEntry_DoNotUse* Arena::CreateMaybeMessage< ::atframework::distributed_system::transaction_blob_storage_ParticipatorsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::transaction_blob_storage_ParticipatorsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::transaction_blob_storage* Arena::CreateMaybeMessage< ::atframework::distributed_system::transaction_blob_storage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::transaction_blob_storage >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::transaction_participator_storage* Arena::CreateMaybeMessage< ::atframework::distributed_system::transaction_participator_storage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::transaction_participator_storage >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::transaction_participator_failure_reason* Arena::CreateMaybeMessage< ::atframework::distributed_system::transaction_participator_failure_reason >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::transaction_participator_failure_reason >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::transaction_participator_snapshot* Arena::CreateMaybeMessage< ::atframework::distributed_system::transaction_participator_snapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::transaction_participator_snapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::SSDistributeTransactionQueryReq* Arena::CreateMaybeMessage< ::atframework::distributed_system::SSDistributeTransactionQueryReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::SSDistributeTransactionQueryReq >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::SSDistributeTransactionQueryRsp* Arena::CreateMaybeMessage< ::atframework::distributed_system::SSDistributeTransactionQueryRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::SSDistributeTransactionQueryRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::SSDistributeTransactionCreateReq* Arena::CreateMaybeMessage< ::atframework::distributed_system::SSDistributeTransactionCreateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::SSDistributeTransactionCreateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::SSDistributeTransactionCreateRsp* Arena::CreateMaybeMessage< ::atframework::distributed_system::SSDistributeTransactionCreateRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::SSDistributeTransactionCreateRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::SSDistributeTransactionCommitReq* Arena::CreateMaybeMessage< ::atframework::distributed_system::SSDistributeTransactionCommitReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::SSDistributeTransactionCommitReq >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::SSDistributeTransactionCommitRsp* Arena::CreateMaybeMessage< ::atframework::distributed_system::SSDistributeTransactionCommitRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::SSDistributeTransactionCommitRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::SSDistributeTransactionRejectReq* Arena::CreateMaybeMessage< ::atframework::distributed_system::SSDistributeTransactionRejectReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::SSDistributeTransactionRejectReq >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::SSDistributeTransactionRejectRsp* Arena::CreateMaybeMessage< ::atframework::distributed_system::SSDistributeTransactionRejectRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::SSDistributeTransactionRejectRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::SSDistributeTransactionCommitParticipatorReq* Arena::CreateMaybeMessage< ::atframework::distributed_system::SSDistributeTransactionCommitParticipatorReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::SSDistributeTransactionCommitParticipatorReq >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::SSDistributeTransactionCommitParticipatorRsp* Arena::CreateMaybeMessage< ::atframework::distributed_system::SSDistributeTransactionCommitParticipatorRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::SSDistributeTransactionCommitParticipatorRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::SSDistributeTransactionRejectParticipatorReq* Arena::CreateMaybeMessage< ::atframework::distributed_system::SSDistributeTransactionRejectParticipatorReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::SSDistributeTransactionRejectParticipatorReq >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::SSDistributeTransactionRejectParticipatorRsp* Arena::CreateMaybeMessage< ::atframework::distributed_system::SSDistributeTransactionRejectParticipatorRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::SSDistributeTransactionRejectParticipatorRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::SSDistributeTransactionRemoveReq* Arena::CreateMaybeMessage< ::atframework::distributed_system::SSDistributeTransactionRemoveReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::SSDistributeTransactionRemoveReq >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::SSDistributeTransactionRemoveRsp* Arena::CreateMaybeMessage< ::atframework::distributed_system::SSDistributeTransactionRemoveRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::SSDistributeTransactionRemoveRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::SSParticipatorTransactionPrepareReq* Arena::CreateMaybeMessage< ::atframework::distributed_system::SSParticipatorTransactionPrepareReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::SSParticipatorTransactionPrepareReq >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::SSParticipatorTransactionPrepareRsp* Arena::CreateMaybeMessage< ::atframework::distributed_system::SSParticipatorTransactionPrepareRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::SSParticipatorTransactionPrepareRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::SSParticipatorTransactionCommitReq* Arena::CreateMaybeMessage< ::atframework::distributed_system::SSParticipatorTransactionCommitReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::SSParticipatorTransactionCommitReq >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::SSParticipatorTransactionCommitRsp* Arena::CreateMaybeMessage< ::atframework::distributed_system::SSParticipatorTransactionCommitRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::SSParticipatorTransactionCommitRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::SSParticipatorTransactionRejectReq* Arena::CreateMaybeMessage< ::atframework::distributed_system::SSParticipatorTransactionRejectReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::SSParticipatorTransactionRejectReq >(arena);
}
template<> PROTOBUF_NOINLINE ::atframework::distributed_system::SSParticipatorTransactionRejectRsp* Arena::CreateMaybeMessage< ::atframework::distributed_system::SSParticipatorTransactionRejectRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atframework::distributed_system::SSParticipatorTransactionRejectRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
