// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pbdesc/distributed_transaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pbdesc_2fdistributed_5ftransaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pbdesc_2fdistributed_5ftransaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "atframework.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pbdesc_2fdistributed_5ftransaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[28]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pbdesc_2fdistributed_5ftransaction_2eproto;
namespace atframework {
namespace distributed_system {
class SSDistributeTransactionCommitParticipatorReq;
struct SSDistributeTransactionCommitParticipatorReqDefaultTypeInternal;
extern SSDistributeTransactionCommitParticipatorReqDefaultTypeInternal _SSDistributeTransactionCommitParticipatorReq_default_instance_;
class SSDistributeTransactionCommitParticipatorRsp;
struct SSDistributeTransactionCommitParticipatorRspDefaultTypeInternal;
extern SSDistributeTransactionCommitParticipatorRspDefaultTypeInternal _SSDistributeTransactionCommitParticipatorRsp_default_instance_;
class SSDistributeTransactionCommitReq;
struct SSDistributeTransactionCommitReqDefaultTypeInternal;
extern SSDistributeTransactionCommitReqDefaultTypeInternal _SSDistributeTransactionCommitReq_default_instance_;
class SSDistributeTransactionCommitRsp;
struct SSDistributeTransactionCommitRspDefaultTypeInternal;
extern SSDistributeTransactionCommitRspDefaultTypeInternal _SSDistributeTransactionCommitRsp_default_instance_;
class SSDistributeTransactionCreateReq;
struct SSDistributeTransactionCreateReqDefaultTypeInternal;
extern SSDistributeTransactionCreateReqDefaultTypeInternal _SSDistributeTransactionCreateReq_default_instance_;
class SSDistributeTransactionCreateRsp;
struct SSDistributeTransactionCreateRspDefaultTypeInternal;
extern SSDistributeTransactionCreateRspDefaultTypeInternal _SSDistributeTransactionCreateRsp_default_instance_;
class SSDistributeTransactionQueryReq;
struct SSDistributeTransactionQueryReqDefaultTypeInternal;
extern SSDistributeTransactionQueryReqDefaultTypeInternal _SSDistributeTransactionQueryReq_default_instance_;
class SSDistributeTransactionQueryRsp;
struct SSDistributeTransactionQueryRspDefaultTypeInternal;
extern SSDistributeTransactionQueryRspDefaultTypeInternal _SSDistributeTransactionQueryRsp_default_instance_;
class SSDistributeTransactionRejectParticipatorReq;
struct SSDistributeTransactionRejectParticipatorReqDefaultTypeInternal;
extern SSDistributeTransactionRejectParticipatorReqDefaultTypeInternal _SSDistributeTransactionRejectParticipatorReq_default_instance_;
class SSDistributeTransactionRejectParticipatorRsp;
struct SSDistributeTransactionRejectParticipatorRspDefaultTypeInternal;
extern SSDistributeTransactionRejectParticipatorRspDefaultTypeInternal _SSDistributeTransactionRejectParticipatorRsp_default_instance_;
class SSDistributeTransactionRejectReq;
struct SSDistributeTransactionRejectReqDefaultTypeInternal;
extern SSDistributeTransactionRejectReqDefaultTypeInternal _SSDistributeTransactionRejectReq_default_instance_;
class SSDistributeTransactionRejectRsp;
struct SSDistributeTransactionRejectRspDefaultTypeInternal;
extern SSDistributeTransactionRejectRspDefaultTypeInternal _SSDistributeTransactionRejectRsp_default_instance_;
class SSDistributeTransactionRemoveReq;
struct SSDistributeTransactionRemoveReqDefaultTypeInternal;
extern SSDistributeTransactionRemoveReqDefaultTypeInternal _SSDistributeTransactionRemoveReq_default_instance_;
class SSDistributeTransactionRemoveRsp;
struct SSDistributeTransactionRemoveRspDefaultTypeInternal;
extern SSDistributeTransactionRemoveRspDefaultTypeInternal _SSDistributeTransactionRemoveRsp_default_instance_;
class SSParticipatorTransactionCommitReq;
struct SSParticipatorTransactionCommitReqDefaultTypeInternal;
extern SSParticipatorTransactionCommitReqDefaultTypeInternal _SSParticipatorTransactionCommitReq_default_instance_;
class SSParticipatorTransactionCommitRsp;
struct SSParticipatorTransactionCommitRspDefaultTypeInternal;
extern SSParticipatorTransactionCommitRspDefaultTypeInternal _SSParticipatorTransactionCommitRsp_default_instance_;
class SSParticipatorTransactionPrepareReq;
struct SSParticipatorTransactionPrepareReqDefaultTypeInternal;
extern SSParticipatorTransactionPrepareReqDefaultTypeInternal _SSParticipatorTransactionPrepareReq_default_instance_;
class SSParticipatorTransactionPrepareRsp;
struct SSParticipatorTransactionPrepareRspDefaultTypeInternal;
extern SSParticipatorTransactionPrepareRspDefaultTypeInternal _SSParticipatorTransactionPrepareRsp_default_instance_;
class SSParticipatorTransactionRejectReq;
struct SSParticipatorTransactionRejectReqDefaultTypeInternal;
extern SSParticipatorTransactionRejectReqDefaultTypeInternal _SSParticipatorTransactionRejectReq_default_instance_;
class SSParticipatorTransactionRejectRsp;
struct SSParticipatorTransactionRejectRspDefaultTypeInternal;
extern SSParticipatorTransactionRejectRspDefaultTypeInternal _SSParticipatorTransactionRejectRsp_default_instance_;
class transaction_blob_storage;
struct transaction_blob_storageDefaultTypeInternal;
extern transaction_blob_storageDefaultTypeInternal _transaction_blob_storage_default_instance_;
class transaction_blob_storage_ParticipatorsEntry_DoNotUse;
struct transaction_blob_storage_ParticipatorsEntry_DoNotUseDefaultTypeInternal;
extern transaction_blob_storage_ParticipatorsEntry_DoNotUseDefaultTypeInternal _transaction_blob_storage_ParticipatorsEntry_DoNotUse_default_instance_;
class transaction_configure;
struct transaction_configureDefaultTypeInternal;
extern transaction_configureDefaultTypeInternal _transaction_configure_default_instance_;
class transaction_metadata;
struct transaction_metadataDefaultTypeInternal;
extern transaction_metadataDefaultTypeInternal _transaction_metadata_default_instance_;
class transaction_participator;
struct transaction_participatorDefaultTypeInternal;
extern transaction_participatorDefaultTypeInternal _transaction_participator_default_instance_;
class transaction_participator_failure_reason;
struct transaction_participator_failure_reasonDefaultTypeInternal;
extern transaction_participator_failure_reasonDefaultTypeInternal _transaction_participator_failure_reason_default_instance_;
class transaction_participator_snapshot;
struct transaction_participator_snapshotDefaultTypeInternal;
extern transaction_participator_snapshotDefaultTypeInternal _transaction_participator_snapshot_default_instance_;
class transaction_participator_storage;
struct transaction_participator_storageDefaultTypeInternal;
extern transaction_participator_storageDefaultTypeInternal _transaction_participator_storage_default_instance_;
}  // namespace distributed_system
}  // namespace atframework
PROTOBUF_NAMESPACE_OPEN
template<> ::atframework::distributed_system::SSDistributeTransactionCommitParticipatorReq* Arena::CreateMaybeMessage<::atframework::distributed_system::SSDistributeTransactionCommitParticipatorReq>(Arena*);
template<> ::atframework::distributed_system::SSDistributeTransactionCommitParticipatorRsp* Arena::CreateMaybeMessage<::atframework::distributed_system::SSDistributeTransactionCommitParticipatorRsp>(Arena*);
template<> ::atframework::distributed_system::SSDistributeTransactionCommitReq* Arena::CreateMaybeMessage<::atframework::distributed_system::SSDistributeTransactionCommitReq>(Arena*);
template<> ::atframework::distributed_system::SSDistributeTransactionCommitRsp* Arena::CreateMaybeMessage<::atframework::distributed_system::SSDistributeTransactionCommitRsp>(Arena*);
template<> ::atframework::distributed_system::SSDistributeTransactionCreateReq* Arena::CreateMaybeMessage<::atframework::distributed_system::SSDistributeTransactionCreateReq>(Arena*);
template<> ::atframework::distributed_system::SSDistributeTransactionCreateRsp* Arena::CreateMaybeMessage<::atframework::distributed_system::SSDistributeTransactionCreateRsp>(Arena*);
template<> ::atframework::distributed_system::SSDistributeTransactionQueryReq* Arena::CreateMaybeMessage<::atframework::distributed_system::SSDistributeTransactionQueryReq>(Arena*);
template<> ::atframework::distributed_system::SSDistributeTransactionQueryRsp* Arena::CreateMaybeMessage<::atframework::distributed_system::SSDistributeTransactionQueryRsp>(Arena*);
template<> ::atframework::distributed_system::SSDistributeTransactionRejectParticipatorReq* Arena::CreateMaybeMessage<::atframework::distributed_system::SSDistributeTransactionRejectParticipatorReq>(Arena*);
template<> ::atframework::distributed_system::SSDistributeTransactionRejectParticipatorRsp* Arena::CreateMaybeMessage<::atframework::distributed_system::SSDistributeTransactionRejectParticipatorRsp>(Arena*);
template<> ::atframework::distributed_system::SSDistributeTransactionRejectReq* Arena::CreateMaybeMessage<::atframework::distributed_system::SSDistributeTransactionRejectReq>(Arena*);
template<> ::atframework::distributed_system::SSDistributeTransactionRejectRsp* Arena::CreateMaybeMessage<::atframework::distributed_system::SSDistributeTransactionRejectRsp>(Arena*);
template<> ::atframework::distributed_system::SSDistributeTransactionRemoveReq* Arena::CreateMaybeMessage<::atframework::distributed_system::SSDistributeTransactionRemoveReq>(Arena*);
template<> ::atframework::distributed_system::SSDistributeTransactionRemoveRsp* Arena::CreateMaybeMessage<::atframework::distributed_system::SSDistributeTransactionRemoveRsp>(Arena*);
template<> ::atframework::distributed_system::SSParticipatorTransactionCommitReq* Arena::CreateMaybeMessage<::atframework::distributed_system::SSParticipatorTransactionCommitReq>(Arena*);
template<> ::atframework::distributed_system::SSParticipatorTransactionCommitRsp* Arena::CreateMaybeMessage<::atframework::distributed_system::SSParticipatorTransactionCommitRsp>(Arena*);
template<> ::atframework::distributed_system::SSParticipatorTransactionPrepareReq* Arena::CreateMaybeMessage<::atframework::distributed_system::SSParticipatorTransactionPrepareReq>(Arena*);
template<> ::atframework::distributed_system::SSParticipatorTransactionPrepareRsp* Arena::CreateMaybeMessage<::atframework::distributed_system::SSParticipatorTransactionPrepareRsp>(Arena*);
template<> ::atframework::distributed_system::SSParticipatorTransactionRejectReq* Arena::CreateMaybeMessage<::atframework::distributed_system::SSParticipatorTransactionRejectReq>(Arena*);
template<> ::atframework::distributed_system::SSParticipatorTransactionRejectRsp* Arena::CreateMaybeMessage<::atframework::distributed_system::SSParticipatorTransactionRejectRsp>(Arena*);
template<> ::atframework::distributed_system::transaction_blob_storage* Arena::CreateMaybeMessage<::atframework::distributed_system::transaction_blob_storage>(Arena*);
template<> ::atframework::distributed_system::transaction_blob_storage_ParticipatorsEntry_DoNotUse* Arena::CreateMaybeMessage<::atframework::distributed_system::transaction_blob_storage_ParticipatorsEntry_DoNotUse>(Arena*);
template<> ::atframework::distributed_system::transaction_configure* Arena::CreateMaybeMessage<::atframework::distributed_system::transaction_configure>(Arena*);
template<> ::atframework::distributed_system::transaction_metadata* Arena::CreateMaybeMessage<::atframework::distributed_system::transaction_metadata>(Arena*);
template<> ::atframework::distributed_system::transaction_participator* Arena::CreateMaybeMessage<::atframework::distributed_system::transaction_participator>(Arena*);
template<> ::atframework::distributed_system::transaction_participator_failure_reason* Arena::CreateMaybeMessage<::atframework::distributed_system::transaction_participator_failure_reason>(Arena*);
template<> ::atframework::distributed_system::transaction_participator_snapshot* Arena::CreateMaybeMessage<::atframework::distributed_system::transaction_participator_snapshot>(Arena*);
template<> ::atframework::distributed_system::transaction_participator_storage* Arena::CreateMaybeMessage<::atframework::distributed_system::transaction_participator_storage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace atframework {
namespace distributed_system {

enum EnDistibutedTransactionStatus : int {
  EN_DISTRIBUTED_TRANSACTION_STATUS_CREATED = 0,
  EN_DISTRIBUTED_TRANSACTION_STATUS_PREPARED = 1,
  EN_DISTRIBUTED_TRANSACTION_STATUS_FINISHED = 2,
  EN_DISTRIBUTED_TRANSACTION_STATUS_REJECTING = 2,
  EN_DISTRIBUTED_TRANSACTION_STATUS_COMMITING = 3,
  EN_DISTRIBUTED_TRANSACTION_STATUS_REJECTED = 4,
  EN_DISTRIBUTED_TRANSACTION_STATUS_COMMITED = 5,
  EnDistibutedTransactionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EnDistibutedTransactionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EnDistibutedTransactionStatus_IsValid(int value);
constexpr EnDistibutedTransactionStatus EnDistibutedTransactionStatus_MIN = EN_DISTRIBUTED_TRANSACTION_STATUS_CREATED;
constexpr EnDistibutedTransactionStatus EnDistibutedTransactionStatus_MAX = EN_DISTRIBUTED_TRANSACTION_STATUS_COMMITED;
constexpr int EnDistibutedTransactionStatus_ARRAYSIZE = EnDistibutedTransactionStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnDistibutedTransactionStatus_descriptor();
template<typename T>
inline const std::string& EnDistibutedTransactionStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EnDistibutedTransactionStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EnDistibutedTransactionStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EnDistibutedTransactionStatus_descriptor(), enum_t_value);
}
inline bool EnDistibutedTransactionStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EnDistibutedTransactionStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EnDistibutedTransactionStatus>(
    EnDistibutedTransactionStatus_descriptor(), name, value);
}
// ===================================================================

class transaction_participator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.transaction_participator) */ {
 public:
  inline transaction_participator() : transaction_participator(nullptr) {}
  ~transaction_participator() override;
  explicit constexpr transaction_participator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transaction_participator(const transaction_participator& from);
  transaction_participator(transaction_participator&& from) noexcept
    : transaction_participator() {
    *this = ::std::move(from);
  }

  inline transaction_participator& operator=(const transaction_participator& from) {
    CopyFrom(from);
    return *this;
  }
  inline transaction_participator& operator=(transaction_participator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transaction_participator& default_instance() {
    return *internal_default_instance();
  }
  static inline const transaction_participator* internal_default_instance() {
    return reinterpret_cast<const transaction_participator*>(
               &_transaction_participator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(transaction_participator& a, transaction_participator& b) {
    a.Swap(&b);
  }
  inline void Swap(transaction_participator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transaction_participator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  transaction_participator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<transaction_participator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transaction_participator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transaction_participator& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transaction_participator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.transaction_participator";
  }
  protected:
  explicit transaction_participator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParticipatorKeyFieldNumber = 1,
    kParticipatorDataFieldNumber = 12,
    kParticipatorStatusFieldNumber = 11,
  };
  // string participator_key = 1;
  void clear_participator_key();
  const std::string& participator_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_participator_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_participator_key();
  PROTOBUF_NODISCARD std::string* release_participator_key();
  void set_allocated_participator_key(std::string* participator_key);
  private:
  const std::string& _internal_participator_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participator_key(const std::string& value);
  std::string* _internal_mutable_participator_key();
  public:

  // .google.protobuf.Any participator_data = 12;
  bool has_participator_data() const;
  private:
  bool _internal_has_participator_data() const;
  public:
  void clear_participator_data();
  const ::PROTOBUF_NAMESPACE_ID::Any& participator_data() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_participator_data();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_participator_data();
  void set_allocated_participator_data(::PROTOBUF_NAMESPACE_ID::Any* participator_data);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_participator_data() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_participator_data();
  public:
  void unsafe_arena_set_allocated_participator_data(
      ::PROTOBUF_NAMESPACE_ID::Any* participator_data);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_participator_data();

  // .atframework.distributed_system.EnDistibutedTransactionStatus participator_status = 11;
  void clear_participator_status();
  ::atframework::distributed_system::EnDistibutedTransactionStatus participator_status() const;
  void set_participator_status(::atframework::distributed_system::EnDistibutedTransactionStatus value);
  private:
  ::atframework::distributed_system::EnDistibutedTransactionStatus _internal_participator_status() const;
  void _internal_set_participator_status(::atframework::distributed_system::EnDistibutedTransactionStatus value);
  public:

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.transaction_participator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participator_key_;
  ::PROTOBUF_NAMESPACE_ID::Any* participator_data_;
  int participator_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class transaction_configure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.transaction_configure) */ {
 public:
  inline transaction_configure() : transaction_configure(nullptr) {}
  ~transaction_configure() override;
  explicit constexpr transaction_configure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transaction_configure(const transaction_configure& from);
  transaction_configure(transaction_configure&& from) noexcept
    : transaction_configure() {
    *this = ::std::move(from);
  }

  inline transaction_configure& operator=(const transaction_configure& from) {
    CopyFrom(from);
    return *this;
  }
  inline transaction_configure& operator=(transaction_configure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transaction_configure& default_instance() {
    return *internal_default_instance();
  }
  static inline const transaction_configure* internal_default_instance() {
    return reinterpret_cast<const transaction_configure*>(
               &_transaction_configure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(transaction_configure& a, transaction_configure& b) {
    a.Swap(&b);
  }
  inline void Swap(transaction_configure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transaction_configure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  transaction_configure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<transaction_configure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transaction_configure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transaction_configure& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transaction_configure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.transaction_configure";
  }
  protected:
  explicit transaction_configure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResolveRetryIntervalFieldNumber = 12,
    kLockWaitIntervalMinFieldNumber = 13,
    kLockWaitIntervalMaxFieldNumber = 14,
    kForceCommitFieldNumber = 1,
    kResolveMaxTimesFieldNumber = 11,
    kLockRetryMaxTimesFieldNumber = 15,
  };
  // .google.protobuf.Duration resolve_retry_interval = 12;
  bool has_resolve_retry_interval() const;
  private:
  bool _internal_has_resolve_retry_interval() const;
  public:
  void clear_resolve_retry_interval();
  const ::PROTOBUF_NAMESPACE_ID::Duration& resolve_retry_interval() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_resolve_retry_interval();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_resolve_retry_interval();
  void set_allocated_resolve_retry_interval(::PROTOBUF_NAMESPACE_ID::Duration* resolve_retry_interval);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_resolve_retry_interval() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_resolve_retry_interval();
  public:
  void unsafe_arena_set_allocated_resolve_retry_interval(
      ::PROTOBUF_NAMESPACE_ID::Duration* resolve_retry_interval);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_resolve_retry_interval();

  // .google.protobuf.Duration lock_wait_interval_min = 13;
  bool has_lock_wait_interval_min() const;
  private:
  bool _internal_has_lock_wait_interval_min() const;
  public:
  void clear_lock_wait_interval_min();
  const ::PROTOBUF_NAMESPACE_ID::Duration& lock_wait_interval_min() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_lock_wait_interval_min();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_lock_wait_interval_min();
  void set_allocated_lock_wait_interval_min(::PROTOBUF_NAMESPACE_ID::Duration* lock_wait_interval_min);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_lock_wait_interval_min() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_lock_wait_interval_min();
  public:
  void unsafe_arena_set_allocated_lock_wait_interval_min(
      ::PROTOBUF_NAMESPACE_ID::Duration* lock_wait_interval_min);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_lock_wait_interval_min();

  // .google.protobuf.Duration lock_wait_interval_max = 14;
  bool has_lock_wait_interval_max() const;
  private:
  bool _internal_has_lock_wait_interval_max() const;
  public:
  void clear_lock_wait_interval_max();
  const ::PROTOBUF_NAMESPACE_ID::Duration& lock_wait_interval_max() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_lock_wait_interval_max();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_lock_wait_interval_max();
  void set_allocated_lock_wait_interval_max(::PROTOBUF_NAMESPACE_ID::Duration* lock_wait_interval_max);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_lock_wait_interval_max() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_lock_wait_interval_max();
  public:
  void unsafe_arena_set_allocated_lock_wait_interval_max(
      ::PROTOBUF_NAMESPACE_ID::Duration* lock_wait_interval_max);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_lock_wait_interval_max();

  // bool force_commit = 1;
  void clear_force_commit();
  bool force_commit() const;
  void set_force_commit(bool value);
  private:
  bool _internal_force_commit() const;
  void _internal_set_force_commit(bool value);
  public:

  // uint32 resolve_max_times = 11;
  void clear_resolve_max_times();
  uint32_t resolve_max_times() const;
  void set_resolve_max_times(uint32_t value);
  private:
  uint32_t _internal_resolve_max_times() const;
  void _internal_set_resolve_max_times(uint32_t value);
  public:

  // uint32 lock_retry_max_times = 15;
  void clear_lock_retry_max_times();
  uint32_t lock_retry_max_times() const;
  void set_lock_retry_max_times(uint32_t value);
  private:
  uint32_t _internal_lock_retry_max_times() const;
  void _internal_set_lock_retry_max_times(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.transaction_configure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Duration* resolve_retry_interval_;
  ::PROTOBUF_NAMESPACE_ID::Duration* lock_wait_interval_min_;
  ::PROTOBUF_NAMESPACE_ID::Duration* lock_wait_interval_max_;
  bool force_commit_;
  uint32_t resolve_max_times_;
  uint32_t lock_retry_max_times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class transaction_metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.transaction_metadata) */ {
 public:
  inline transaction_metadata() : transaction_metadata(nullptr) {}
  ~transaction_metadata() override;
  explicit constexpr transaction_metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transaction_metadata(const transaction_metadata& from);
  transaction_metadata(transaction_metadata&& from) noexcept
    : transaction_metadata() {
    *this = ::std::move(from);
  }

  inline transaction_metadata& operator=(const transaction_metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline transaction_metadata& operator=(transaction_metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transaction_metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const transaction_metadata* internal_default_instance() {
    return reinterpret_cast<const transaction_metadata*>(
               &_transaction_metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(transaction_metadata& a, transaction_metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(transaction_metadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transaction_metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  transaction_metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<transaction_metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transaction_metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transaction_metadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transaction_metadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.transaction_metadata";
  }
  protected:
  explicit transaction_metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplicateNodeServerIdFieldNumber = 4,
    kTransactionUuidFieldNumber = 1,
    kPrepareTimepointFieldNumber = 11,
    kFinishTimepointFieldNumber = 12,
    kExpireTimepointFieldNumber = 13,
    kStatusFieldNumber = 2,
    kReplicateReadCountFieldNumber = 3,
    kMemoryOnlyFieldNumber = 5,
  };
  // repeated uint64 replicate_node_server_id = 4;
  int replicate_node_server_id_size() const;
  private:
  int _internal_replicate_node_server_id_size() const;
  public:
  void clear_replicate_node_server_id();
  private:
  uint64_t _internal_replicate_node_server_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_replicate_node_server_id() const;
  void _internal_add_replicate_node_server_id(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_replicate_node_server_id();
  public:
  uint64_t replicate_node_server_id(int index) const;
  void set_replicate_node_server_id(int index, uint64_t value);
  void add_replicate_node_server_id(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      replicate_node_server_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_replicate_node_server_id();

  // bytes transaction_uuid = 1;
  void clear_transaction_uuid();
  const std::string& transaction_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transaction_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transaction_uuid();
  PROTOBUF_NODISCARD std::string* release_transaction_uuid();
  void set_allocated_transaction_uuid(std::string* transaction_uuid);
  private:
  const std::string& _internal_transaction_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_uuid(const std::string& value);
  std::string* _internal_mutable_transaction_uuid();
  public:

  // .google.protobuf.Timestamp prepare_timepoint = 11;
  bool has_prepare_timepoint() const;
  private:
  bool _internal_has_prepare_timepoint() const;
  public:
  void clear_prepare_timepoint();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& prepare_timepoint() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_prepare_timepoint();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_prepare_timepoint();
  void set_allocated_prepare_timepoint(::PROTOBUF_NAMESPACE_ID::Timestamp* prepare_timepoint);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_prepare_timepoint() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_prepare_timepoint();
  public:
  void unsafe_arena_set_allocated_prepare_timepoint(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* prepare_timepoint);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_prepare_timepoint();

  // .google.protobuf.Timestamp finish_timepoint = 12;
  bool has_finish_timepoint() const;
  private:
  bool _internal_has_finish_timepoint() const;
  public:
  void clear_finish_timepoint();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& finish_timepoint() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_finish_timepoint();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_finish_timepoint();
  void set_allocated_finish_timepoint(::PROTOBUF_NAMESPACE_ID::Timestamp* finish_timepoint);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_finish_timepoint() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_finish_timepoint();
  public:
  void unsafe_arena_set_allocated_finish_timepoint(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* finish_timepoint);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_finish_timepoint();

  // .google.protobuf.Timestamp expire_timepoint = 13;
  bool has_expire_timepoint() const;
  private:
  bool _internal_has_expire_timepoint() const;
  public:
  void clear_expire_timepoint();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expire_timepoint() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expire_timepoint();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expire_timepoint();
  void set_allocated_expire_timepoint(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_timepoint);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expire_timepoint() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expire_timepoint();
  public:
  void unsafe_arena_set_allocated_expire_timepoint(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_timepoint);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expire_timepoint();

  // .atframework.distributed_system.EnDistibutedTransactionStatus status = 2;
  void clear_status();
  ::atframework::distributed_system::EnDistibutedTransactionStatus status() const;
  void set_status(::atframework::distributed_system::EnDistibutedTransactionStatus value);
  private:
  ::atframework::distributed_system::EnDistibutedTransactionStatus _internal_status() const;
  void _internal_set_status(::atframework::distributed_system::EnDistibutedTransactionStatus value);
  public:

  // uint32 replicate_read_count = 3;
  void clear_replicate_read_count();
  uint32_t replicate_read_count() const;
  void set_replicate_read_count(uint32_t value);
  private:
  uint32_t _internal_replicate_read_count() const;
  void _internal_set_replicate_read_count(uint32_t value);
  public:

  // bool memory_only = 5;
  void clear_memory_only();
  bool memory_only() const;
  void set_memory_only(bool value);
  private:
  bool _internal_memory_only() const;
  void _internal_set_memory_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.transaction_metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > replicate_node_server_id_;
  mutable std::atomic<int> _replicate_node_server_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_uuid_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* prepare_timepoint_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* finish_timepoint_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_timepoint_;
  int status_;
  uint32_t replicate_read_count_;
  bool memory_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class transaction_blob_storage_ParticipatorsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<transaction_blob_storage_ParticipatorsEntry_DoNotUse, 
    std::string, ::atframework::distributed_system::transaction_participator,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<transaction_blob_storage_ParticipatorsEntry_DoNotUse, 
    std::string, ::atframework::distributed_system::transaction_participator,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  transaction_blob_storage_ParticipatorsEntry_DoNotUse();
  explicit constexpr transaction_blob_storage_ParticipatorsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit transaction_blob_storage_ParticipatorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const transaction_blob_storage_ParticipatorsEntry_DoNotUse& other);
  static const transaction_blob_storage_ParticipatorsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const transaction_blob_storage_ParticipatorsEntry_DoNotUse*>(&_transaction_blob_storage_ParticipatorsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "atframework.distributed_system.transaction_blob_storage.ParticipatorsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class transaction_blob_storage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.transaction_blob_storage) */ {
 public:
  inline transaction_blob_storage() : transaction_blob_storage(nullptr) {}
  ~transaction_blob_storage() override;
  explicit constexpr transaction_blob_storage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transaction_blob_storage(const transaction_blob_storage& from);
  transaction_blob_storage(transaction_blob_storage&& from) noexcept
    : transaction_blob_storage() {
    *this = ::std::move(from);
  }

  inline transaction_blob_storage& operator=(const transaction_blob_storage& from) {
    CopyFrom(from);
    return *this;
  }
  inline transaction_blob_storage& operator=(transaction_blob_storage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transaction_blob_storage& default_instance() {
    return *internal_default_instance();
  }
  static inline const transaction_blob_storage* internal_default_instance() {
    return reinterpret_cast<const transaction_blob_storage*>(
               &_transaction_blob_storage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(transaction_blob_storage& a, transaction_blob_storage& b) {
    a.Swap(&b);
  }
  inline void Swap(transaction_blob_storage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transaction_blob_storage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  transaction_blob_storage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<transaction_blob_storage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transaction_blob_storage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transaction_blob_storage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transaction_blob_storage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.transaction_blob_storage";
  }
  protected:
  explicit transaction_blob_storage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParticipatorsFieldNumber = 3,
    kMetadataFieldNumber = 1,
    kConfigureFieldNumber = 2,
    kTransactionDataFieldNumber = 4,
  };
  // map<string, .atframework.distributed_system.transaction_participator> participators = 3;
  int participators_size() const;
  private:
  int _internal_participators_size() const;
  public:
  void clear_participators();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::atframework::distributed_system::transaction_participator >&
      _internal_participators() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::atframework::distributed_system::transaction_participator >*
      _internal_mutable_participators();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::atframework::distributed_system::transaction_participator >&
      participators() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::atframework::distributed_system::transaction_participator >*
      mutable_participators();

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::atframework::distributed_system::transaction_metadata& metadata() const;
  PROTOBUF_NODISCARD ::atframework::distributed_system::transaction_metadata* release_metadata();
  ::atframework::distributed_system::transaction_metadata* mutable_metadata();
  void set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata);
  private:
  const ::atframework::distributed_system::transaction_metadata& _internal_metadata() const;
  ::atframework::distributed_system::transaction_metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::atframework::distributed_system::transaction_metadata* metadata);
  ::atframework::distributed_system::transaction_metadata* unsafe_arena_release_metadata();

  // .atframework.distributed_system.transaction_configure configure = 2;
  bool has_configure() const;
  private:
  bool _internal_has_configure() const;
  public:
  void clear_configure();
  const ::atframework::distributed_system::transaction_configure& configure() const;
  PROTOBUF_NODISCARD ::atframework::distributed_system::transaction_configure* release_configure();
  ::atframework::distributed_system::transaction_configure* mutable_configure();
  void set_allocated_configure(::atframework::distributed_system::transaction_configure* configure);
  private:
  const ::atframework::distributed_system::transaction_configure& _internal_configure() const;
  ::atframework::distributed_system::transaction_configure* _internal_mutable_configure();
  public:
  void unsafe_arena_set_allocated_configure(
      ::atframework::distributed_system::transaction_configure* configure);
  ::atframework::distributed_system::transaction_configure* unsafe_arena_release_configure();

  // .google.protobuf.Any transaction_data = 4;
  bool has_transaction_data() const;
  private:
  bool _internal_has_transaction_data() const;
  public:
  void clear_transaction_data();
  const ::PROTOBUF_NAMESPACE_ID::Any& transaction_data() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_transaction_data();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_transaction_data();
  void set_allocated_transaction_data(::PROTOBUF_NAMESPACE_ID::Any* transaction_data);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_transaction_data() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_transaction_data();
  public:
  void unsafe_arena_set_allocated_transaction_data(
      ::PROTOBUF_NAMESPACE_ID::Any* transaction_data);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_transaction_data();

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.transaction_blob_storage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      transaction_blob_storage_ParticipatorsEntry_DoNotUse,
      std::string, ::atframework::distributed_system::transaction_participator,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> participators_;
  ::atframework::distributed_system::transaction_metadata* metadata_;
  ::atframework::distributed_system::transaction_configure* configure_;
  ::PROTOBUF_NAMESPACE_ID::Any* transaction_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class transaction_participator_storage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.transaction_participator_storage) */ {
 public:
  inline transaction_participator_storage() : transaction_participator_storage(nullptr) {}
  ~transaction_participator_storage() override;
  explicit constexpr transaction_participator_storage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transaction_participator_storage(const transaction_participator_storage& from);
  transaction_participator_storage(transaction_participator_storage&& from) noexcept
    : transaction_participator_storage() {
    *this = ::std::move(from);
  }

  inline transaction_participator_storage& operator=(const transaction_participator_storage& from) {
    CopyFrom(from);
    return *this;
  }
  inline transaction_participator_storage& operator=(transaction_participator_storage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transaction_participator_storage& default_instance() {
    return *internal_default_instance();
  }
  static inline const transaction_participator_storage* internal_default_instance() {
    return reinterpret_cast<const transaction_participator_storage*>(
               &_transaction_participator_storage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(transaction_participator_storage& a, transaction_participator_storage& b) {
    a.Swap(&b);
  }
  inline void Swap(transaction_participator_storage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transaction_participator_storage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  transaction_participator_storage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<transaction_participator_storage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transaction_participator_storage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transaction_participator_storage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transaction_participator_storage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.transaction_participator_storage";
  }
  protected:
  explicit transaction_participator_storage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLockResourceFieldNumber = 21,
    kMetadataFieldNumber = 1,
    kConfigureFieldNumber = 2,
    kParticipatorDataFieldNumber = 3,
    kTransactionDataFieldNumber = 4,
    kResolveTimepointFieldNumber = 12,
    kResolveTimesFieldNumber = 11,
  };
  // repeated bytes lock_resource = 21;
  int lock_resource_size() const;
  private:
  int _internal_lock_resource_size() const;
  public:
  void clear_lock_resource();
  const std::string& lock_resource(int index) const;
  std::string* mutable_lock_resource(int index);
  void set_lock_resource(int index, const std::string& value);
  void set_lock_resource(int index, std::string&& value);
  void set_lock_resource(int index, const char* value);
  void set_lock_resource(int index, const void* value, size_t size);
  std::string* add_lock_resource();
  void add_lock_resource(const std::string& value);
  void add_lock_resource(std::string&& value);
  void add_lock_resource(const char* value);
  void add_lock_resource(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& lock_resource() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_lock_resource();
  private:
  const std::string& _internal_lock_resource(int index) const;
  std::string* _internal_add_lock_resource();
  public:

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::atframework::distributed_system::transaction_metadata& metadata() const;
  PROTOBUF_NODISCARD ::atframework::distributed_system::transaction_metadata* release_metadata();
  ::atframework::distributed_system::transaction_metadata* mutable_metadata();
  void set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata);
  private:
  const ::atframework::distributed_system::transaction_metadata& _internal_metadata() const;
  ::atframework::distributed_system::transaction_metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::atframework::distributed_system::transaction_metadata* metadata);
  ::atframework::distributed_system::transaction_metadata* unsafe_arena_release_metadata();

  // .atframework.distributed_system.transaction_configure configure = 2;
  bool has_configure() const;
  private:
  bool _internal_has_configure() const;
  public:
  void clear_configure();
  const ::atframework::distributed_system::transaction_configure& configure() const;
  PROTOBUF_NODISCARD ::atframework::distributed_system::transaction_configure* release_configure();
  ::atframework::distributed_system::transaction_configure* mutable_configure();
  void set_allocated_configure(::atframework::distributed_system::transaction_configure* configure);
  private:
  const ::atframework::distributed_system::transaction_configure& _internal_configure() const;
  ::atframework::distributed_system::transaction_configure* _internal_mutable_configure();
  public:
  void unsafe_arena_set_allocated_configure(
      ::atframework::distributed_system::transaction_configure* configure);
  ::atframework::distributed_system::transaction_configure* unsafe_arena_release_configure();

  // .google.protobuf.Any participator_data = 3;
  bool has_participator_data() const;
  private:
  bool _internal_has_participator_data() const;
  public:
  void clear_participator_data();
  const ::PROTOBUF_NAMESPACE_ID::Any& participator_data() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_participator_data();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_participator_data();
  void set_allocated_participator_data(::PROTOBUF_NAMESPACE_ID::Any* participator_data);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_participator_data() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_participator_data();
  public:
  void unsafe_arena_set_allocated_participator_data(
      ::PROTOBUF_NAMESPACE_ID::Any* participator_data);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_participator_data();

  // .google.protobuf.Any transaction_data = 4;
  bool has_transaction_data() const;
  private:
  bool _internal_has_transaction_data() const;
  public:
  void clear_transaction_data();
  const ::PROTOBUF_NAMESPACE_ID::Any& transaction_data() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_transaction_data();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_transaction_data();
  void set_allocated_transaction_data(::PROTOBUF_NAMESPACE_ID::Any* transaction_data);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_transaction_data() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_transaction_data();
  public:
  void unsafe_arena_set_allocated_transaction_data(
      ::PROTOBUF_NAMESPACE_ID::Any* transaction_data);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_transaction_data();

  // .google.protobuf.Timestamp resolve_timepoint = 12;
  bool has_resolve_timepoint() const;
  private:
  bool _internal_has_resolve_timepoint() const;
  public:
  void clear_resolve_timepoint();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& resolve_timepoint() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_resolve_timepoint();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_resolve_timepoint();
  void set_allocated_resolve_timepoint(::PROTOBUF_NAMESPACE_ID::Timestamp* resolve_timepoint);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_resolve_timepoint() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_resolve_timepoint();
  public:
  void unsafe_arena_set_allocated_resolve_timepoint(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* resolve_timepoint);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_resolve_timepoint();

  // uint32 resolve_times = 11;
  void clear_resolve_times();
  uint32_t resolve_times() const;
  void set_resolve_times(uint32_t value);
  private:
  uint32_t _internal_resolve_times() const;
  void _internal_set_resolve_times(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.transaction_participator_storage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> lock_resource_;
  ::atframework::distributed_system::transaction_metadata* metadata_;
  ::atframework::distributed_system::transaction_configure* configure_;
  ::PROTOBUF_NAMESPACE_ID::Any* participator_data_;
  ::PROTOBUF_NAMESPACE_ID::Any* transaction_data_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* resolve_timepoint_;
  uint32_t resolve_times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class transaction_participator_failure_reason final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.transaction_participator_failure_reason) */ {
 public:
  inline transaction_participator_failure_reason() : transaction_participator_failure_reason(nullptr) {}
  ~transaction_participator_failure_reason() override;
  explicit constexpr transaction_participator_failure_reason(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transaction_participator_failure_reason(const transaction_participator_failure_reason& from);
  transaction_participator_failure_reason(transaction_participator_failure_reason&& from) noexcept
    : transaction_participator_failure_reason() {
    *this = ::std::move(from);
  }

  inline transaction_participator_failure_reason& operator=(const transaction_participator_failure_reason& from) {
    CopyFrom(from);
    return *this;
  }
  inline transaction_participator_failure_reason& operator=(transaction_participator_failure_reason&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transaction_participator_failure_reason& default_instance() {
    return *internal_default_instance();
  }
  static inline const transaction_participator_failure_reason* internal_default_instance() {
    return reinterpret_cast<const transaction_participator_failure_reason*>(
               &_transaction_participator_failure_reason_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(transaction_participator_failure_reason& a, transaction_participator_failure_reason& b) {
    a.Swap(&b);
  }
  inline void Swap(transaction_participator_failure_reason* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transaction_participator_failure_reason* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  transaction_participator_failure_reason* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<transaction_participator_failure_reason>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transaction_participator_failure_reason& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transaction_participator_failure_reason& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transaction_participator_failure_reason* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.transaction_participator_failure_reason";
  }
  protected:
  explicit transaction_participator_failure_reason(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLockedResourceFieldNumber = 12,
    kAllowRetryFieldNumber = 1,
  };
  // repeated bytes locked_resource = 12;
  int locked_resource_size() const;
  private:
  int _internal_locked_resource_size() const;
  public:
  void clear_locked_resource();
  const std::string& locked_resource(int index) const;
  std::string* mutable_locked_resource(int index);
  void set_locked_resource(int index, const std::string& value);
  void set_locked_resource(int index, std::string&& value);
  void set_locked_resource(int index, const char* value);
  void set_locked_resource(int index, const void* value, size_t size);
  std::string* add_locked_resource();
  void add_locked_resource(const std::string& value);
  void add_locked_resource(std::string&& value);
  void add_locked_resource(const char* value);
  void add_locked_resource(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& locked_resource() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_locked_resource();
  private:
  const std::string& _internal_locked_resource(int index) const;
  std::string* _internal_add_locked_resource();
  public:

  // bool allow_retry = 1;
  void clear_allow_retry();
  bool allow_retry() const;
  void set_allow_retry(bool value);
  private:
  bool _internal_allow_retry() const;
  void _internal_set_allow_retry(bool value);
  public:

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.transaction_participator_failure_reason)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> locked_resource_;
  bool allow_retry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class transaction_participator_snapshot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.transaction_participator_snapshot) */ {
 public:
  inline transaction_participator_snapshot() : transaction_participator_snapshot(nullptr) {}
  ~transaction_participator_snapshot() override;
  explicit constexpr transaction_participator_snapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transaction_participator_snapshot(const transaction_participator_snapshot& from);
  transaction_participator_snapshot(transaction_participator_snapshot&& from) noexcept
    : transaction_participator_snapshot() {
    *this = ::std::move(from);
  }

  inline transaction_participator_snapshot& operator=(const transaction_participator_snapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline transaction_participator_snapshot& operator=(transaction_participator_snapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transaction_participator_snapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const transaction_participator_snapshot* internal_default_instance() {
    return reinterpret_cast<const transaction_participator_snapshot*>(
               &_transaction_participator_snapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(transaction_participator_snapshot& a, transaction_participator_snapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(transaction_participator_snapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transaction_participator_snapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  transaction_participator_snapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<transaction_participator_snapshot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transaction_participator_snapshot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transaction_participator_snapshot& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transaction_participator_snapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.transaction_participator_snapshot";
  }
  protected:
  explicit transaction_participator_snapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunningTransactionFieldNumber = 2,
    kFinishedTransactionFieldNumber = 3,
  };
  // repeated .atframework.distributed_system.transaction_participator_storage running_transaction = 2;
  int running_transaction_size() const;
  private:
  int _internal_running_transaction_size() const;
  public:
  void clear_running_transaction();
  ::atframework::distributed_system::transaction_participator_storage* mutable_running_transaction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::atframework::distributed_system::transaction_participator_storage >*
      mutable_running_transaction();
  private:
  const ::atframework::distributed_system::transaction_participator_storage& _internal_running_transaction(int index) const;
  ::atframework::distributed_system::transaction_participator_storage* _internal_add_running_transaction();
  public:
  const ::atframework::distributed_system::transaction_participator_storage& running_transaction(int index) const;
  ::atframework::distributed_system::transaction_participator_storage* add_running_transaction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::atframework::distributed_system::transaction_participator_storage >&
      running_transaction() const;

  // repeated .atframework.distributed_system.transaction_participator_storage finished_transaction = 3;
  int finished_transaction_size() const;
  private:
  int _internal_finished_transaction_size() const;
  public:
  void clear_finished_transaction();
  ::atframework::distributed_system::transaction_participator_storage* mutable_finished_transaction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::atframework::distributed_system::transaction_participator_storage >*
      mutable_finished_transaction();
  private:
  const ::atframework::distributed_system::transaction_participator_storage& _internal_finished_transaction(int index) const;
  ::atframework::distributed_system::transaction_participator_storage* _internal_add_finished_transaction();
  public:
  const ::atframework::distributed_system::transaction_participator_storage& finished_transaction(int index) const;
  ::atframework::distributed_system::transaction_participator_storage* add_finished_transaction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::atframework::distributed_system::transaction_participator_storage >&
      finished_transaction() const;

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.transaction_participator_snapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::atframework::distributed_system::transaction_participator_storage > running_transaction_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::atframework::distributed_system::transaction_participator_storage > finished_transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SSDistributeTransactionQueryReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.SSDistributeTransactionQueryReq) */ {
 public:
  inline SSDistributeTransactionQueryReq() : SSDistributeTransactionQueryReq(nullptr) {}
  ~SSDistributeTransactionQueryReq() override;
  explicit constexpr SSDistributeTransactionQueryReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDistributeTransactionQueryReq(const SSDistributeTransactionQueryReq& from);
  SSDistributeTransactionQueryReq(SSDistributeTransactionQueryReq&& from) noexcept
    : SSDistributeTransactionQueryReq() {
    *this = ::std::move(from);
  }

  inline SSDistributeTransactionQueryReq& operator=(const SSDistributeTransactionQueryReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDistributeTransactionQueryReq& operator=(SSDistributeTransactionQueryReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDistributeTransactionQueryReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDistributeTransactionQueryReq* internal_default_instance() {
    return reinterpret_cast<const SSDistributeTransactionQueryReq*>(
               &_SSDistributeTransactionQueryReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SSDistributeTransactionQueryReq& a, SSDistributeTransactionQueryReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDistributeTransactionQueryReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDistributeTransactionQueryReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDistributeTransactionQueryReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDistributeTransactionQueryReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDistributeTransactionQueryReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDistributeTransactionQueryReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDistributeTransactionQueryReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.SSDistributeTransactionQueryReq";
  }
  protected:
  explicit SSDistributeTransactionQueryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // .atframework.distributed_system.transaction_metadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::atframework::distributed_system::transaction_metadata& metadata() const;
  PROTOBUF_NODISCARD ::atframework::distributed_system::transaction_metadata* release_metadata();
  ::atframework::distributed_system::transaction_metadata* mutable_metadata();
  void set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata);
  private:
  const ::atframework::distributed_system::transaction_metadata& _internal_metadata() const;
  ::atframework::distributed_system::transaction_metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::atframework::distributed_system::transaction_metadata* metadata);
  ::atframework::distributed_system::transaction_metadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.SSDistributeTransactionQueryReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::atframework::distributed_system::transaction_metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SSDistributeTransactionQueryRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.SSDistributeTransactionQueryRsp) */ {
 public:
  inline SSDistributeTransactionQueryRsp() : SSDistributeTransactionQueryRsp(nullptr) {}
  ~SSDistributeTransactionQueryRsp() override;
  explicit constexpr SSDistributeTransactionQueryRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDistributeTransactionQueryRsp(const SSDistributeTransactionQueryRsp& from);
  SSDistributeTransactionQueryRsp(SSDistributeTransactionQueryRsp&& from) noexcept
    : SSDistributeTransactionQueryRsp() {
    *this = ::std::move(from);
  }

  inline SSDistributeTransactionQueryRsp& operator=(const SSDistributeTransactionQueryRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDistributeTransactionQueryRsp& operator=(SSDistributeTransactionQueryRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDistributeTransactionQueryRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDistributeTransactionQueryRsp* internal_default_instance() {
    return reinterpret_cast<const SSDistributeTransactionQueryRsp*>(
               &_SSDistributeTransactionQueryRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SSDistributeTransactionQueryRsp& a, SSDistributeTransactionQueryRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDistributeTransactionQueryRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDistributeTransactionQueryRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDistributeTransactionQueryRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDistributeTransactionQueryRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDistributeTransactionQueryRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDistributeTransactionQueryRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDistributeTransactionQueryRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.SSDistributeTransactionQueryRsp";
  }
  protected:
  explicit SSDistributeTransactionQueryRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorageFieldNumber = 1,
  };
  // .atframework.distributed_system.transaction_blob_storage storage = 1;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::atframework::distributed_system::transaction_blob_storage& storage() const;
  PROTOBUF_NODISCARD ::atframework::distributed_system::transaction_blob_storage* release_storage();
  ::atframework::distributed_system::transaction_blob_storage* mutable_storage();
  void set_allocated_storage(::atframework::distributed_system::transaction_blob_storage* storage);
  private:
  const ::atframework::distributed_system::transaction_blob_storage& _internal_storage() const;
  ::atframework::distributed_system::transaction_blob_storage* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::atframework::distributed_system::transaction_blob_storage* storage);
  ::atframework::distributed_system::transaction_blob_storage* unsafe_arena_release_storage();

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.SSDistributeTransactionQueryRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::atframework::distributed_system::transaction_blob_storage* storage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SSDistributeTransactionCreateReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.SSDistributeTransactionCreateReq) */ {
 public:
  inline SSDistributeTransactionCreateReq() : SSDistributeTransactionCreateReq(nullptr) {}
  ~SSDistributeTransactionCreateReq() override;
  explicit constexpr SSDistributeTransactionCreateReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDistributeTransactionCreateReq(const SSDistributeTransactionCreateReq& from);
  SSDistributeTransactionCreateReq(SSDistributeTransactionCreateReq&& from) noexcept
    : SSDistributeTransactionCreateReq() {
    *this = ::std::move(from);
  }

  inline SSDistributeTransactionCreateReq& operator=(const SSDistributeTransactionCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDistributeTransactionCreateReq& operator=(SSDistributeTransactionCreateReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDistributeTransactionCreateReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDistributeTransactionCreateReq* internal_default_instance() {
    return reinterpret_cast<const SSDistributeTransactionCreateReq*>(
               &_SSDistributeTransactionCreateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SSDistributeTransactionCreateReq& a, SSDistributeTransactionCreateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDistributeTransactionCreateReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDistributeTransactionCreateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDistributeTransactionCreateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDistributeTransactionCreateReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDistributeTransactionCreateReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDistributeTransactionCreateReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDistributeTransactionCreateReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.SSDistributeTransactionCreateReq";
  }
  protected:
  explicit SSDistributeTransactionCreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorageFieldNumber = 1,
  };
  // .atframework.distributed_system.transaction_blob_storage storage = 1;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::atframework::distributed_system::transaction_blob_storage& storage() const;
  PROTOBUF_NODISCARD ::atframework::distributed_system::transaction_blob_storage* release_storage();
  ::atframework::distributed_system::transaction_blob_storage* mutable_storage();
  void set_allocated_storage(::atframework::distributed_system::transaction_blob_storage* storage);
  private:
  const ::atframework::distributed_system::transaction_blob_storage& _internal_storage() const;
  ::atframework::distributed_system::transaction_blob_storage* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::atframework::distributed_system::transaction_blob_storage* storage);
  ::atframework::distributed_system::transaction_blob_storage* unsafe_arena_release_storage();

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.SSDistributeTransactionCreateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::atframework::distributed_system::transaction_blob_storage* storage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SSDistributeTransactionCreateRsp final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:atframework.distributed_system.SSDistributeTransactionCreateRsp) */ {
 public:
  inline SSDistributeTransactionCreateRsp() : SSDistributeTransactionCreateRsp(nullptr) {}
  explicit constexpr SSDistributeTransactionCreateRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDistributeTransactionCreateRsp(const SSDistributeTransactionCreateRsp& from);
  SSDistributeTransactionCreateRsp(SSDistributeTransactionCreateRsp&& from) noexcept
    : SSDistributeTransactionCreateRsp() {
    *this = ::std::move(from);
  }

  inline SSDistributeTransactionCreateRsp& operator=(const SSDistributeTransactionCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDistributeTransactionCreateRsp& operator=(SSDistributeTransactionCreateRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDistributeTransactionCreateRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDistributeTransactionCreateRsp* internal_default_instance() {
    return reinterpret_cast<const SSDistributeTransactionCreateRsp*>(
               &_SSDistributeTransactionCreateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SSDistributeTransactionCreateRsp& a, SSDistributeTransactionCreateRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDistributeTransactionCreateRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDistributeTransactionCreateRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDistributeTransactionCreateRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDistributeTransactionCreateRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SSDistributeTransactionCreateRsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SSDistributeTransactionCreateRsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.SSDistributeTransactionCreateRsp";
  }
  protected:
  explicit SSDistributeTransactionCreateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.SSDistributeTransactionCreateRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SSDistributeTransactionCommitReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.SSDistributeTransactionCommitReq) */ {
 public:
  inline SSDistributeTransactionCommitReq() : SSDistributeTransactionCommitReq(nullptr) {}
  ~SSDistributeTransactionCommitReq() override;
  explicit constexpr SSDistributeTransactionCommitReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDistributeTransactionCommitReq(const SSDistributeTransactionCommitReq& from);
  SSDistributeTransactionCommitReq(SSDistributeTransactionCommitReq&& from) noexcept
    : SSDistributeTransactionCommitReq() {
    *this = ::std::move(from);
  }

  inline SSDistributeTransactionCommitReq& operator=(const SSDistributeTransactionCommitReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDistributeTransactionCommitReq& operator=(SSDistributeTransactionCommitReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDistributeTransactionCommitReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDistributeTransactionCommitReq* internal_default_instance() {
    return reinterpret_cast<const SSDistributeTransactionCommitReq*>(
               &_SSDistributeTransactionCommitReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SSDistributeTransactionCommitReq& a, SSDistributeTransactionCommitReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDistributeTransactionCommitReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDistributeTransactionCommitReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDistributeTransactionCommitReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDistributeTransactionCommitReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDistributeTransactionCommitReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDistributeTransactionCommitReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDistributeTransactionCommitReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.SSDistributeTransactionCommitReq";
  }
  protected:
  explicit SSDistributeTransactionCommitReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // .atframework.distributed_system.transaction_metadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::atframework::distributed_system::transaction_metadata& metadata() const;
  PROTOBUF_NODISCARD ::atframework::distributed_system::transaction_metadata* release_metadata();
  ::atframework::distributed_system::transaction_metadata* mutable_metadata();
  void set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata);
  private:
  const ::atframework::distributed_system::transaction_metadata& _internal_metadata() const;
  ::atframework::distributed_system::transaction_metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::atframework::distributed_system::transaction_metadata* metadata);
  ::atframework::distributed_system::transaction_metadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.SSDistributeTransactionCommitReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::atframework::distributed_system::transaction_metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SSDistributeTransactionCommitRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.SSDistributeTransactionCommitRsp) */ {
 public:
  inline SSDistributeTransactionCommitRsp() : SSDistributeTransactionCommitRsp(nullptr) {}
  ~SSDistributeTransactionCommitRsp() override;
  explicit constexpr SSDistributeTransactionCommitRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDistributeTransactionCommitRsp(const SSDistributeTransactionCommitRsp& from);
  SSDistributeTransactionCommitRsp(SSDistributeTransactionCommitRsp&& from) noexcept
    : SSDistributeTransactionCommitRsp() {
    *this = ::std::move(from);
  }

  inline SSDistributeTransactionCommitRsp& operator=(const SSDistributeTransactionCommitRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDistributeTransactionCommitRsp& operator=(SSDistributeTransactionCommitRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDistributeTransactionCommitRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDistributeTransactionCommitRsp* internal_default_instance() {
    return reinterpret_cast<const SSDistributeTransactionCommitRsp*>(
               &_SSDistributeTransactionCommitRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SSDistributeTransactionCommitRsp& a, SSDistributeTransactionCommitRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDistributeTransactionCommitRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDistributeTransactionCommitRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDistributeTransactionCommitRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDistributeTransactionCommitRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDistributeTransactionCommitRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDistributeTransactionCommitRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDistributeTransactionCommitRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.SSDistributeTransactionCommitRsp";
  }
  protected:
  explicit SSDistributeTransactionCommitRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // .atframework.distributed_system.transaction_metadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::atframework::distributed_system::transaction_metadata& metadata() const;
  PROTOBUF_NODISCARD ::atframework::distributed_system::transaction_metadata* release_metadata();
  ::atframework::distributed_system::transaction_metadata* mutable_metadata();
  void set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata);
  private:
  const ::atframework::distributed_system::transaction_metadata& _internal_metadata() const;
  ::atframework::distributed_system::transaction_metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::atframework::distributed_system::transaction_metadata* metadata);
  ::atframework::distributed_system::transaction_metadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.SSDistributeTransactionCommitRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::atframework::distributed_system::transaction_metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SSDistributeTransactionRejectReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.SSDistributeTransactionRejectReq) */ {
 public:
  inline SSDistributeTransactionRejectReq() : SSDistributeTransactionRejectReq(nullptr) {}
  ~SSDistributeTransactionRejectReq() override;
  explicit constexpr SSDistributeTransactionRejectReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDistributeTransactionRejectReq(const SSDistributeTransactionRejectReq& from);
  SSDistributeTransactionRejectReq(SSDistributeTransactionRejectReq&& from) noexcept
    : SSDistributeTransactionRejectReq() {
    *this = ::std::move(from);
  }

  inline SSDistributeTransactionRejectReq& operator=(const SSDistributeTransactionRejectReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDistributeTransactionRejectReq& operator=(SSDistributeTransactionRejectReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDistributeTransactionRejectReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDistributeTransactionRejectReq* internal_default_instance() {
    return reinterpret_cast<const SSDistributeTransactionRejectReq*>(
               &_SSDistributeTransactionRejectReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SSDistributeTransactionRejectReq& a, SSDistributeTransactionRejectReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDistributeTransactionRejectReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDistributeTransactionRejectReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDistributeTransactionRejectReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDistributeTransactionRejectReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDistributeTransactionRejectReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDistributeTransactionRejectReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDistributeTransactionRejectReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.SSDistributeTransactionRejectReq";
  }
  protected:
  explicit SSDistributeTransactionRejectReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // .atframework.distributed_system.transaction_metadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::atframework::distributed_system::transaction_metadata& metadata() const;
  PROTOBUF_NODISCARD ::atframework::distributed_system::transaction_metadata* release_metadata();
  ::atframework::distributed_system::transaction_metadata* mutable_metadata();
  void set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata);
  private:
  const ::atframework::distributed_system::transaction_metadata& _internal_metadata() const;
  ::atframework::distributed_system::transaction_metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::atframework::distributed_system::transaction_metadata* metadata);
  ::atframework::distributed_system::transaction_metadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.SSDistributeTransactionRejectReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::atframework::distributed_system::transaction_metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SSDistributeTransactionRejectRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.SSDistributeTransactionRejectRsp) */ {
 public:
  inline SSDistributeTransactionRejectRsp() : SSDistributeTransactionRejectRsp(nullptr) {}
  ~SSDistributeTransactionRejectRsp() override;
  explicit constexpr SSDistributeTransactionRejectRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDistributeTransactionRejectRsp(const SSDistributeTransactionRejectRsp& from);
  SSDistributeTransactionRejectRsp(SSDistributeTransactionRejectRsp&& from) noexcept
    : SSDistributeTransactionRejectRsp() {
    *this = ::std::move(from);
  }

  inline SSDistributeTransactionRejectRsp& operator=(const SSDistributeTransactionRejectRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDistributeTransactionRejectRsp& operator=(SSDistributeTransactionRejectRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDistributeTransactionRejectRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDistributeTransactionRejectRsp* internal_default_instance() {
    return reinterpret_cast<const SSDistributeTransactionRejectRsp*>(
               &_SSDistributeTransactionRejectRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SSDistributeTransactionRejectRsp& a, SSDistributeTransactionRejectRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDistributeTransactionRejectRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDistributeTransactionRejectRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDistributeTransactionRejectRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDistributeTransactionRejectRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDistributeTransactionRejectRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDistributeTransactionRejectRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDistributeTransactionRejectRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.SSDistributeTransactionRejectRsp";
  }
  protected:
  explicit SSDistributeTransactionRejectRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // .atframework.distributed_system.transaction_metadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::atframework::distributed_system::transaction_metadata& metadata() const;
  PROTOBUF_NODISCARD ::atframework::distributed_system::transaction_metadata* release_metadata();
  ::atframework::distributed_system::transaction_metadata* mutable_metadata();
  void set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata);
  private:
  const ::atframework::distributed_system::transaction_metadata& _internal_metadata() const;
  ::atframework::distributed_system::transaction_metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::atframework::distributed_system::transaction_metadata* metadata);
  ::atframework::distributed_system::transaction_metadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.SSDistributeTransactionRejectRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::atframework::distributed_system::transaction_metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SSDistributeTransactionCommitParticipatorReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq) */ {
 public:
  inline SSDistributeTransactionCommitParticipatorReq() : SSDistributeTransactionCommitParticipatorReq(nullptr) {}
  ~SSDistributeTransactionCommitParticipatorReq() override;
  explicit constexpr SSDistributeTransactionCommitParticipatorReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDistributeTransactionCommitParticipatorReq(const SSDistributeTransactionCommitParticipatorReq& from);
  SSDistributeTransactionCommitParticipatorReq(SSDistributeTransactionCommitParticipatorReq&& from) noexcept
    : SSDistributeTransactionCommitParticipatorReq() {
    *this = ::std::move(from);
  }

  inline SSDistributeTransactionCommitParticipatorReq& operator=(const SSDistributeTransactionCommitParticipatorReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDistributeTransactionCommitParticipatorReq& operator=(SSDistributeTransactionCommitParticipatorReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDistributeTransactionCommitParticipatorReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDistributeTransactionCommitParticipatorReq* internal_default_instance() {
    return reinterpret_cast<const SSDistributeTransactionCommitParticipatorReq*>(
               &_SSDistributeTransactionCommitParticipatorReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SSDistributeTransactionCommitParticipatorReq& a, SSDistributeTransactionCommitParticipatorReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDistributeTransactionCommitParticipatorReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDistributeTransactionCommitParticipatorReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDistributeTransactionCommitParticipatorReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDistributeTransactionCommitParticipatorReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDistributeTransactionCommitParticipatorReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDistributeTransactionCommitParticipatorReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDistributeTransactionCommitParticipatorReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq";
  }
  protected:
  explicit SSDistributeTransactionCommitParticipatorReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParticipatorKeyFieldNumber = 2,
    kMetadataFieldNumber = 1,
  };
  // string participator_key = 2;
  void clear_participator_key();
  const std::string& participator_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_participator_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_participator_key();
  PROTOBUF_NODISCARD std::string* release_participator_key();
  void set_allocated_participator_key(std::string* participator_key);
  private:
  const std::string& _internal_participator_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participator_key(const std::string& value);
  std::string* _internal_mutable_participator_key();
  public:

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::atframework::distributed_system::transaction_metadata& metadata() const;
  PROTOBUF_NODISCARD ::atframework::distributed_system::transaction_metadata* release_metadata();
  ::atframework::distributed_system::transaction_metadata* mutable_metadata();
  void set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata);
  private:
  const ::atframework::distributed_system::transaction_metadata& _internal_metadata() const;
  ::atframework::distributed_system::transaction_metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::atframework::distributed_system::transaction_metadata* metadata);
  ::atframework::distributed_system::transaction_metadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participator_key_;
  ::atframework::distributed_system::transaction_metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SSDistributeTransactionCommitParticipatorRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.SSDistributeTransactionCommitParticipatorRsp) */ {
 public:
  inline SSDistributeTransactionCommitParticipatorRsp() : SSDistributeTransactionCommitParticipatorRsp(nullptr) {}
  ~SSDistributeTransactionCommitParticipatorRsp() override;
  explicit constexpr SSDistributeTransactionCommitParticipatorRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDistributeTransactionCommitParticipatorRsp(const SSDistributeTransactionCommitParticipatorRsp& from);
  SSDistributeTransactionCommitParticipatorRsp(SSDistributeTransactionCommitParticipatorRsp&& from) noexcept
    : SSDistributeTransactionCommitParticipatorRsp() {
    *this = ::std::move(from);
  }

  inline SSDistributeTransactionCommitParticipatorRsp& operator=(const SSDistributeTransactionCommitParticipatorRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDistributeTransactionCommitParticipatorRsp& operator=(SSDistributeTransactionCommitParticipatorRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDistributeTransactionCommitParticipatorRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDistributeTransactionCommitParticipatorRsp* internal_default_instance() {
    return reinterpret_cast<const SSDistributeTransactionCommitParticipatorRsp*>(
               &_SSDistributeTransactionCommitParticipatorRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SSDistributeTransactionCommitParticipatorRsp& a, SSDistributeTransactionCommitParticipatorRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDistributeTransactionCommitParticipatorRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDistributeTransactionCommitParticipatorRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDistributeTransactionCommitParticipatorRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDistributeTransactionCommitParticipatorRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDistributeTransactionCommitParticipatorRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDistributeTransactionCommitParticipatorRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDistributeTransactionCommitParticipatorRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.SSDistributeTransactionCommitParticipatorRsp";
  }
  protected:
  explicit SSDistributeTransactionCommitParticipatorRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // .atframework.distributed_system.transaction_metadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::atframework::distributed_system::transaction_metadata& metadata() const;
  PROTOBUF_NODISCARD ::atframework::distributed_system::transaction_metadata* release_metadata();
  ::atframework::distributed_system::transaction_metadata* mutable_metadata();
  void set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata);
  private:
  const ::atframework::distributed_system::transaction_metadata& _internal_metadata() const;
  ::atframework::distributed_system::transaction_metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::atframework::distributed_system::transaction_metadata* metadata);
  ::atframework::distributed_system::transaction_metadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.SSDistributeTransactionCommitParticipatorRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::atframework::distributed_system::transaction_metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SSDistributeTransactionRejectParticipatorReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq) */ {
 public:
  inline SSDistributeTransactionRejectParticipatorReq() : SSDistributeTransactionRejectParticipatorReq(nullptr) {}
  ~SSDistributeTransactionRejectParticipatorReq() override;
  explicit constexpr SSDistributeTransactionRejectParticipatorReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDistributeTransactionRejectParticipatorReq(const SSDistributeTransactionRejectParticipatorReq& from);
  SSDistributeTransactionRejectParticipatorReq(SSDistributeTransactionRejectParticipatorReq&& from) noexcept
    : SSDistributeTransactionRejectParticipatorReq() {
    *this = ::std::move(from);
  }

  inline SSDistributeTransactionRejectParticipatorReq& operator=(const SSDistributeTransactionRejectParticipatorReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDistributeTransactionRejectParticipatorReq& operator=(SSDistributeTransactionRejectParticipatorReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDistributeTransactionRejectParticipatorReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDistributeTransactionRejectParticipatorReq* internal_default_instance() {
    return reinterpret_cast<const SSDistributeTransactionRejectParticipatorReq*>(
               &_SSDistributeTransactionRejectParticipatorReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SSDistributeTransactionRejectParticipatorReq& a, SSDistributeTransactionRejectParticipatorReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDistributeTransactionRejectParticipatorReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDistributeTransactionRejectParticipatorReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDistributeTransactionRejectParticipatorReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDistributeTransactionRejectParticipatorReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDistributeTransactionRejectParticipatorReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDistributeTransactionRejectParticipatorReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDistributeTransactionRejectParticipatorReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq";
  }
  protected:
  explicit SSDistributeTransactionRejectParticipatorReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParticipatorKeyFieldNumber = 2,
    kMetadataFieldNumber = 1,
  };
  // string participator_key = 2;
  void clear_participator_key();
  const std::string& participator_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_participator_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_participator_key();
  PROTOBUF_NODISCARD std::string* release_participator_key();
  void set_allocated_participator_key(std::string* participator_key);
  private:
  const std::string& _internal_participator_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participator_key(const std::string& value);
  std::string* _internal_mutable_participator_key();
  public:

  // .atframework.distributed_system.transaction_metadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::atframework::distributed_system::transaction_metadata& metadata() const;
  PROTOBUF_NODISCARD ::atframework::distributed_system::transaction_metadata* release_metadata();
  ::atframework::distributed_system::transaction_metadata* mutable_metadata();
  void set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata);
  private:
  const ::atframework::distributed_system::transaction_metadata& _internal_metadata() const;
  ::atframework::distributed_system::transaction_metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::atframework::distributed_system::transaction_metadata* metadata);
  ::atframework::distributed_system::transaction_metadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participator_key_;
  ::atframework::distributed_system::transaction_metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SSDistributeTransactionRejectParticipatorRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.SSDistributeTransactionRejectParticipatorRsp) */ {
 public:
  inline SSDistributeTransactionRejectParticipatorRsp() : SSDistributeTransactionRejectParticipatorRsp(nullptr) {}
  ~SSDistributeTransactionRejectParticipatorRsp() override;
  explicit constexpr SSDistributeTransactionRejectParticipatorRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDistributeTransactionRejectParticipatorRsp(const SSDistributeTransactionRejectParticipatorRsp& from);
  SSDistributeTransactionRejectParticipatorRsp(SSDistributeTransactionRejectParticipatorRsp&& from) noexcept
    : SSDistributeTransactionRejectParticipatorRsp() {
    *this = ::std::move(from);
  }

  inline SSDistributeTransactionRejectParticipatorRsp& operator=(const SSDistributeTransactionRejectParticipatorRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDistributeTransactionRejectParticipatorRsp& operator=(SSDistributeTransactionRejectParticipatorRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDistributeTransactionRejectParticipatorRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDistributeTransactionRejectParticipatorRsp* internal_default_instance() {
    return reinterpret_cast<const SSDistributeTransactionRejectParticipatorRsp*>(
               &_SSDistributeTransactionRejectParticipatorRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SSDistributeTransactionRejectParticipatorRsp& a, SSDistributeTransactionRejectParticipatorRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDistributeTransactionRejectParticipatorRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDistributeTransactionRejectParticipatorRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDistributeTransactionRejectParticipatorRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDistributeTransactionRejectParticipatorRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDistributeTransactionRejectParticipatorRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDistributeTransactionRejectParticipatorRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDistributeTransactionRejectParticipatorRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.SSDistributeTransactionRejectParticipatorRsp";
  }
  protected:
  explicit SSDistributeTransactionRejectParticipatorRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // .atframework.distributed_system.transaction_metadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::atframework::distributed_system::transaction_metadata& metadata() const;
  PROTOBUF_NODISCARD ::atframework::distributed_system::transaction_metadata* release_metadata();
  ::atframework::distributed_system::transaction_metadata* mutable_metadata();
  void set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata);
  private:
  const ::atframework::distributed_system::transaction_metadata& _internal_metadata() const;
  ::atframework::distributed_system::transaction_metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::atframework::distributed_system::transaction_metadata* metadata);
  ::atframework::distributed_system::transaction_metadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.SSDistributeTransactionRejectParticipatorRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::atframework::distributed_system::transaction_metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SSDistributeTransactionRemoveReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.SSDistributeTransactionRemoveReq) */ {
 public:
  inline SSDistributeTransactionRemoveReq() : SSDistributeTransactionRemoveReq(nullptr) {}
  ~SSDistributeTransactionRemoveReq() override;
  explicit constexpr SSDistributeTransactionRemoveReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDistributeTransactionRemoveReq(const SSDistributeTransactionRemoveReq& from);
  SSDistributeTransactionRemoveReq(SSDistributeTransactionRemoveReq&& from) noexcept
    : SSDistributeTransactionRemoveReq() {
    *this = ::std::move(from);
  }

  inline SSDistributeTransactionRemoveReq& operator=(const SSDistributeTransactionRemoveReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDistributeTransactionRemoveReq& operator=(SSDistributeTransactionRemoveReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDistributeTransactionRemoveReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDistributeTransactionRemoveReq* internal_default_instance() {
    return reinterpret_cast<const SSDistributeTransactionRemoveReq*>(
               &_SSDistributeTransactionRemoveReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SSDistributeTransactionRemoveReq& a, SSDistributeTransactionRemoveReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDistributeTransactionRemoveReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDistributeTransactionRemoveReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDistributeTransactionRemoveReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDistributeTransactionRemoveReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDistributeTransactionRemoveReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDistributeTransactionRemoveReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDistributeTransactionRemoveReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.SSDistributeTransactionRemoveReq";
  }
  protected:
  explicit SSDistributeTransactionRemoveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // .atframework.distributed_system.transaction_metadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::atframework::distributed_system::transaction_metadata& metadata() const;
  PROTOBUF_NODISCARD ::atframework::distributed_system::transaction_metadata* release_metadata();
  ::atframework::distributed_system::transaction_metadata* mutable_metadata();
  void set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata);
  private:
  const ::atframework::distributed_system::transaction_metadata& _internal_metadata() const;
  ::atframework::distributed_system::transaction_metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::atframework::distributed_system::transaction_metadata* metadata);
  ::atframework::distributed_system::transaction_metadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.SSDistributeTransactionRemoveReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::atframework::distributed_system::transaction_metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SSDistributeTransactionRemoveRsp final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:atframework.distributed_system.SSDistributeTransactionRemoveRsp) */ {
 public:
  inline SSDistributeTransactionRemoveRsp() : SSDistributeTransactionRemoveRsp(nullptr) {}
  explicit constexpr SSDistributeTransactionRemoveRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDistributeTransactionRemoveRsp(const SSDistributeTransactionRemoveRsp& from);
  SSDistributeTransactionRemoveRsp(SSDistributeTransactionRemoveRsp&& from) noexcept
    : SSDistributeTransactionRemoveRsp() {
    *this = ::std::move(from);
  }

  inline SSDistributeTransactionRemoveRsp& operator=(const SSDistributeTransactionRemoveRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDistributeTransactionRemoveRsp& operator=(SSDistributeTransactionRemoveRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDistributeTransactionRemoveRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDistributeTransactionRemoveRsp* internal_default_instance() {
    return reinterpret_cast<const SSDistributeTransactionRemoveRsp*>(
               &_SSDistributeTransactionRemoveRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SSDistributeTransactionRemoveRsp& a, SSDistributeTransactionRemoveRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDistributeTransactionRemoveRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDistributeTransactionRemoveRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDistributeTransactionRemoveRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDistributeTransactionRemoveRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SSDistributeTransactionRemoveRsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SSDistributeTransactionRemoveRsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.SSDistributeTransactionRemoveRsp";
  }
  protected:
  explicit SSDistributeTransactionRemoveRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.SSDistributeTransactionRemoveRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SSParticipatorTransactionPrepareReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.SSParticipatorTransactionPrepareReq) */ {
 public:
  inline SSParticipatorTransactionPrepareReq() : SSParticipatorTransactionPrepareReq(nullptr) {}
  ~SSParticipatorTransactionPrepareReq() override;
  explicit constexpr SSParticipatorTransactionPrepareReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSParticipatorTransactionPrepareReq(const SSParticipatorTransactionPrepareReq& from);
  SSParticipatorTransactionPrepareReq(SSParticipatorTransactionPrepareReq&& from) noexcept
    : SSParticipatorTransactionPrepareReq() {
    *this = ::std::move(from);
  }

  inline SSParticipatorTransactionPrepareReq& operator=(const SSParticipatorTransactionPrepareReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSParticipatorTransactionPrepareReq& operator=(SSParticipatorTransactionPrepareReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSParticipatorTransactionPrepareReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSParticipatorTransactionPrepareReq* internal_default_instance() {
    return reinterpret_cast<const SSParticipatorTransactionPrepareReq*>(
               &_SSParticipatorTransactionPrepareReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SSParticipatorTransactionPrepareReq& a, SSParticipatorTransactionPrepareReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSParticipatorTransactionPrepareReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSParticipatorTransactionPrepareReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSParticipatorTransactionPrepareReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSParticipatorTransactionPrepareReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSParticipatorTransactionPrepareReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSParticipatorTransactionPrepareReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSParticipatorTransactionPrepareReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.SSParticipatorTransactionPrepareReq";
  }
  protected:
  explicit SSParticipatorTransactionPrepareReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorageFieldNumber = 1,
  };
  // .atframework.distributed_system.transaction_participator_storage storage = 1;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::atframework::distributed_system::transaction_participator_storage& storage() const;
  PROTOBUF_NODISCARD ::atframework::distributed_system::transaction_participator_storage* release_storage();
  ::atframework::distributed_system::transaction_participator_storage* mutable_storage();
  void set_allocated_storage(::atframework::distributed_system::transaction_participator_storage* storage);
  private:
  const ::atframework::distributed_system::transaction_participator_storage& _internal_storage() const;
  ::atframework::distributed_system::transaction_participator_storage* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::atframework::distributed_system::transaction_participator_storage* storage);
  ::atframework::distributed_system::transaction_participator_storage* unsafe_arena_release_storage();

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.SSParticipatorTransactionPrepareReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::atframework::distributed_system::transaction_participator_storage* storage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SSParticipatorTransactionPrepareRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.SSParticipatorTransactionPrepareRsp) */ {
 public:
  inline SSParticipatorTransactionPrepareRsp() : SSParticipatorTransactionPrepareRsp(nullptr) {}
  ~SSParticipatorTransactionPrepareRsp() override;
  explicit constexpr SSParticipatorTransactionPrepareRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSParticipatorTransactionPrepareRsp(const SSParticipatorTransactionPrepareRsp& from);
  SSParticipatorTransactionPrepareRsp(SSParticipatorTransactionPrepareRsp&& from) noexcept
    : SSParticipatorTransactionPrepareRsp() {
    *this = ::std::move(from);
  }

  inline SSParticipatorTransactionPrepareRsp& operator=(const SSParticipatorTransactionPrepareRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSParticipatorTransactionPrepareRsp& operator=(SSParticipatorTransactionPrepareRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSParticipatorTransactionPrepareRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSParticipatorTransactionPrepareRsp* internal_default_instance() {
    return reinterpret_cast<const SSParticipatorTransactionPrepareRsp*>(
               &_SSParticipatorTransactionPrepareRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SSParticipatorTransactionPrepareRsp& a, SSParticipatorTransactionPrepareRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSParticipatorTransactionPrepareRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSParticipatorTransactionPrepareRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSParticipatorTransactionPrepareRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSParticipatorTransactionPrepareRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSParticipatorTransactionPrepareRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSParticipatorTransactionPrepareRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSParticipatorTransactionPrepareRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.SSParticipatorTransactionPrepareRsp";
  }
  protected:
  explicit SSParticipatorTransactionPrepareRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // .atframework.distributed_system.transaction_participator_failure_reason reason = 1;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const ::atframework::distributed_system::transaction_participator_failure_reason& reason() const;
  PROTOBUF_NODISCARD ::atframework::distributed_system::transaction_participator_failure_reason* release_reason();
  ::atframework::distributed_system::transaction_participator_failure_reason* mutable_reason();
  void set_allocated_reason(::atframework::distributed_system::transaction_participator_failure_reason* reason);
  private:
  const ::atframework::distributed_system::transaction_participator_failure_reason& _internal_reason() const;
  ::atframework::distributed_system::transaction_participator_failure_reason* _internal_mutable_reason();
  public:
  void unsafe_arena_set_allocated_reason(
      ::atframework::distributed_system::transaction_participator_failure_reason* reason);
  ::atframework::distributed_system::transaction_participator_failure_reason* unsafe_arena_release_reason();

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.SSParticipatorTransactionPrepareRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::atframework::distributed_system::transaction_participator_failure_reason* reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SSParticipatorTransactionCommitReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.SSParticipatorTransactionCommitReq) */ {
 public:
  inline SSParticipatorTransactionCommitReq() : SSParticipatorTransactionCommitReq(nullptr) {}
  ~SSParticipatorTransactionCommitReq() override;
  explicit constexpr SSParticipatorTransactionCommitReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSParticipatorTransactionCommitReq(const SSParticipatorTransactionCommitReq& from);
  SSParticipatorTransactionCommitReq(SSParticipatorTransactionCommitReq&& from) noexcept
    : SSParticipatorTransactionCommitReq() {
    *this = ::std::move(from);
  }

  inline SSParticipatorTransactionCommitReq& operator=(const SSParticipatorTransactionCommitReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSParticipatorTransactionCommitReq& operator=(SSParticipatorTransactionCommitReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSParticipatorTransactionCommitReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSParticipatorTransactionCommitReq* internal_default_instance() {
    return reinterpret_cast<const SSParticipatorTransactionCommitReq*>(
               &_SSParticipatorTransactionCommitReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SSParticipatorTransactionCommitReq& a, SSParticipatorTransactionCommitReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSParticipatorTransactionCommitReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSParticipatorTransactionCommitReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSParticipatorTransactionCommitReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSParticipatorTransactionCommitReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSParticipatorTransactionCommitReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSParticipatorTransactionCommitReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSParticipatorTransactionCommitReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.SSParticipatorTransactionCommitReq";
  }
  protected:
  explicit SSParticipatorTransactionCommitReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionUuidFieldNumber = 1,
  };
  // bytes transaction_uuid = 1;
  void clear_transaction_uuid();
  const std::string& transaction_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transaction_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transaction_uuid();
  PROTOBUF_NODISCARD std::string* release_transaction_uuid();
  void set_allocated_transaction_uuid(std::string* transaction_uuid);
  private:
  const std::string& _internal_transaction_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_uuid(const std::string& value);
  std::string* _internal_mutable_transaction_uuid();
  public:

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.SSParticipatorTransactionCommitReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_uuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SSParticipatorTransactionCommitRsp final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:atframework.distributed_system.SSParticipatorTransactionCommitRsp) */ {
 public:
  inline SSParticipatorTransactionCommitRsp() : SSParticipatorTransactionCommitRsp(nullptr) {}
  explicit constexpr SSParticipatorTransactionCommitRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSParticipatorTransactionCommitRsp(const SSParticipatorTransactionCommitRsp& from);
  SSParticipatorTransactionCommitRsp(SSParticipatorTransactionCommitRsp&& from) noexcept
    : SSParticipatorTransactionCommitRsp() {
    *this = ::std::move(from);
  }

  inline SSParticipatorTransactionCommitRsp& operator=(const SSParticipatorTransactionCommitRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSParticipatorTransactionCommitRsp& operator=(SSParticipatorTransactionCommitRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSParticipatorTransactionCommitRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSParticipatorTransactionCommitRsp* internal_default_instance() {
    return reinterpret_cast<const SSParticipatorTransactionCommitRsp*>(
               &_SSParticipatorTransactionCommitRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SSParticipatorTransactionCommitRsp& a, SSParticipatorTransactionCommitRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSParticipatorTransactionCommitRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSParticipatorTransactionCommitRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSParticipatorTransactionCommitRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSParticipatorTransactionCommitRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SSParticipatorTransactionCommitRsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SSParticipatorTransactionCommitRsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.SSParticipatorTransactionCommitRsp";
  }
  protected:
  explicit SSParticipatorTransactionCommitRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.SSParticipatorTransactionCommitRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SSParticipatorTransactionRejectReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:atframework.distributed_system.SSParticipatorTransactionRejectReq) */ {
 public:
  inline SSParticipatorTransactionRejectReq() : SSParticipatorTransactionRejectReq(nullptr) {}
  ~SSParticipatorTransactionRejectReq() override;
  explicit constexpr SSParticipatorTransactionRejectReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSParticipatorTransactionRejectReq(const SSParticipatorTransactionRejectReq& from);
  SSParticipatorTransactionRejectReq(SSParticipatorTransactionRejectReq&& from) noexcept
    : SSParticipatorTransactionRejectReq() {
    *this = ::std::move(from);
  }

  inline SSParticipatorTransactionRejectReq& operator=(const SSParticipatorTransactionRejectReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSParticipatorTransactionRejectReq& operator=(SSParticipatorTransactionRejectReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSParticipatorTransactionRejectReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSParticipatorTransactionRejectReq* internal_default_instance() {
    return reinterpret_cast<const SSParticipatorTransactionRejectReq*>(
               &_SSParticipatorTransactionRejectReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SSParticipatorTransactionRejectReq& a, SSParticipatorTransactionRejectReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSParticipatorTransactionRejectReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSParticipatorTransactionRejectReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSParticipatorTransactionRejectReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSParticipatorTransactionRejectReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSParticipatorTransactionRejectReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSParticipatorTransactionRejectReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSParticipatorTransactionRejectReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.SSParticipatorTransactionRejectReq";
  }
  protected:
  explicit SSParticipatorTransactionRejectReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionUuidFieldNumber = 1,
    kStorageFieldNumber = 2,
  };
  // bytes transaction_uuid = 1;
  void clear_transaction_uuid();
  const std::string& transaction_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transaction_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transaction_uuid();
  PROTOBUF_NODISCARD std::string* release_transaction_uuid();
  void set_allocated_transaction_uuid(std::string* transaction_uuid);
  private:
  const std::string& _internal_transaction_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_uuid(const std::string& value);
  std::string* _internal_mutable_transaction_uuid();
  public:

  // .atframework.distributed_system.transaction_participator_storage storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::atframework::distributed_system::transaction_participator_storage& storage() const;
  PROTOBUF_NODISCARD ::atframework::distributed_system::transaction_participator_storage* release_storage();
  ::atframework::distributed_system::transaction_participator_storage* mutable_storage();
  void set_allocated_storage(::atframework::distributed_system::transaction_participator_storage* storage);
  private:
  const ::atframework::distributed_system::transaction_participator_storage& _internal_storage() const;
  ::atframework::distributed_system::transaction_participator_storage* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::atframework::distributed_system::transaction_participator_storage* storage);
  ::atframework::distributed_system::transaction_participator_storage* unsafe_arena_release_storage();

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.SSParticipatorTransactionRejectReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_uuid_;
  ::atframework::distributed_system::transaction_participator_storage* storage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SSParticipatorTransactionRejectRsp final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:atframework.distributed_system.SSParticipatorTransactionRejectRsp) */ {
 public:
  inline SSParticipatorTransactionRejectRsp() : SSParticipatorTransactionRejectRsp(nullptr) {}
  explicit constexpr SSParticipatorTransactionRejectRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSParticipatorTransactionRejectRsp(const SSParticipatorTransactionRejectRsp& from);
  SSParticipatorTransactionRejectRsp(SSParticipatorTransactionRejectRsp&& from) noexcept
    : SSParticipatorTransactionRejectRsp() {
    *this = ::std::move(from);
  }

  inline SSParticipatorTransactionRejectRsp& operator=(const SSParticipatorTransactionRejectRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSParticipatorTransactionRejectRsp& operator=(SSParticipatorTransactionRejectRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSParticipatorTransactionRejectRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSParticipatorTransactionRejectRsp* internal_default_instance() {
    return reinterpret_cast<const SSParticipatorTransactionRejectRsp*>(
               &_SSParticipatorTransactionRejectRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SSParticipatorTransactionRejectRsp& a, SSParticipatorTransactionRejectRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSParticipatorTransactionRejectRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSParticipatorTransactionRejectRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSParticipatorTransactionRejectRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSParticipatorTransactionRejectRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SSParticipatorTransactionRejectRsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SSParticipatorTransactionRejectRsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atframework.distributed_system.SSParticipatorTransactionRejectRsp";
  }
  protected:
  explicit SSParticipatorTransactionRejectRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:atframework.distributed_system.SSParticipatorTransactionRejectRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbdesc_2fdistributed_5ftransaction_2eproto;
};
// ===================================================================

class DtcoordsvrService_Stub;

class DtcoordsvrService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline DtcoordsvrService() {};
 public:
  virtual ~DtcoordsvrService();

  typedef DtcoordsvrService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void query(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::atframework::distributed_system::SSDistributeTransactionQueryReq* request,
                       ::atframework::distributed_system::SSDistributeTransactionQueryRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void create(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::atframework::distributed_system::SSDistributeTransactionCreateReq* request,
                       ::atframework::distributed_system::SSDistributeTransactionCreateRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void commit(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::atframework::distributed_system::SSDistributeTransactionCommitReq* request,
                       ::atframework::distributed_system::SSDistributeTransactionCommitRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void reject(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::atframework::distributed_system::SSDistributeTransactionRejectReq* request,
                       ::atframework::distributed_system::SSDistributeTransactionRejectRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void commit_participator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::atframework::distributed_system::SSDistributeTransactionCommitParticipatorReq* request,
                       ::atframework::distributed_system::SSDistributeTransactionCommitParticipatorRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void reject_participator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::atframework::distributed_system::SSDistributeTransactionRejectParticipatorReq* request,
                       ::atframework::distributed_system::SSDistributeTransactionRejectParticipatorRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void remove(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::atframework::distributed_system::SSDistributeTransactionRemoveReq* request,
                       ::atframework::distributed_system::SSDistributeTransactionRemoveRsp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DtcoordsvrService);
};

class DtcoordsvrService_Stub : public DtcoordsvrService {
 public:
  DtcoordsvrService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  DtcoordsvrService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~DtcoordsvrService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements DtcoordsvrService ------------------------------------------

  void query(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::atframework::distributed_system::SSDistributeTransactionQueryReq* request,
                       ::atframework::distributed_system::SSDistributeTransactionQueryRsp* response,
                       ::google::protobuf::Closure* done);
  void create(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::atframework::distributed_system::SSDistributeTransactionCreateReq* request,
                       ::atframework::distributed_system::SSDistributeTransactionCreateRsp* response,
                       ::google::protobuf::Closure* done);
  void commit(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::atframework::distributed_system::SSDistributeTransactionCommitReq* request,
                       ::atframework::distributed_system::SSDistributeTransactionCommitRsp* response,
                       ::google::protobuf::Closure* done);
  void reject(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::atframework::distributed_system::SSDistributeTransactionRejectReq* request,
                       ::atframework::distributed_system::SSDistributeTransactionRejectRsp* response,
                       ::google::protobuf::Closure* done);
  void commit_participator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::atframework::distributed_system::SSDistributeTransactionCommitParticipatorReq* request,
                       ::atframework::distributed_system::SSDistributeTransactionCommitParticipatorRsp* response,
                       ::google::protobuf::Closure* done);
  void reject_participator(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::atframework::distributed_system::SSDistributeTransactionRejectParticipatorReq* request,
                       ::atframework::distributed_system::SSDistributeTransactionRejectParticipatorRsp* response,
                       ::google::protobuf::Closure* done);
  void remove(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::atframework::distributed_system::SSDistributeTransactionRemoveReq* request,
                       ::atframework::distributed_system::SSDistributeTransactionRemoveRsp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DtcoordsvrService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// transaction_participator

// string participator_key = 1;
inline void transaction_participator::clear_participator_key() {
  participator_key_.ClearToEmpty();
}
inline const std::string& transaction_participator::participator_key() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_participator.participator_key)
  return _internal_participator_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transaction_participator::set_participator_key(ArgT0&& arg0, ArgT... args) {
 
 participator_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:atframework.distributed_system.transaction_participator.participator_key)
}
inline std::string* transaction_participator::mutable_participator_key() {
  std::string* _s = _internal_mutable_participator_key();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_participator.participator_key)
  return _s;
}
inline const std::string& transaction_participator::_internal_participator_key() const {
  return participator_key_.Get();
}
inline void transaction_participator::_internal_set_participator_key(const std::string& value) {
  
  participator_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transaction_participator::_internal_mutable_participator_key() {
  
  return participator_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transaction_participator::release_participator_key() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.transaction_participator.participator_key)
  return participator_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transaction_participator::set_allocated_participator_key(std::string* participator_key) {
  if (participator_key != nullptr) {
    
  } else {
    
  }
  participator_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), participator_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (participator_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    participator_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.transaction_participator.participator_key)
}

// .atframework.distributed_system.EnDistibutedTransactionStatus participator_status = 11;
inline void transaction_participator::clear_participator_status() {
  participator_status_ = 0;
}
inline ::atframework::distributed_system::EnDistibutedTransactionStatus transaction_participator::_internal_participator_status() const {
  return static_cast< ::atframework::distributed_system::EnDistibutedTransactionStatus >(participator_status_);
}
inline ::atframework::distributed_system::EnDistibutedTransactionStatus transaction_participator::participator_status() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_participator.participator_status)
  return _internal_participator_status();
}
inline void transaction_participator::_internal_set_participator_status(::atframework::distributed_system::EnDistibutedTransactionStatus value) {
  
  participator_status_ = value;
}
inline void transaction_participator::set_participator_status(::atframework::distributed_system::EnDistibutedTransactionStatus value) {
  _internal_set_participator_status(value);
  // @@protoc_insertion_point(field_set:atframework.distributed_system.transaction_participator.participator_status)
}

// .google.protobuf.Any participator_data = 12;
inline bool transaction_participator::_internal_has_participator_data() const {
  return this != internal_default_instance() && participator_data_ != nullptr;
}
inline bool transaction_participator::has_participator_data() const {
  return _internal_has_participator_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& transaction_participator::_internal_participator_data() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = participator_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& transaction_participator::participator_data() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_participator.participator_data)
  return _internal_participator_data();
}
inline void transaction_participator::unsafe_arena_set_allocated_participator_data(
    ::PROTOBUF_NAMESPACE_ID::Any* participator_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(participator_data_);
  }
  participator_data_ = participator_data;
  if (participator_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.transaction_participator.participator_data)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* transaction_participator::release_participator_data() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = participator_data_;
  participator_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* transaction_participator::unsafe_arena_release_participator_data() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.transaction_participator.participator_data)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = participator_data_;
  participator_data_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* transaction_participator::_internal_mutable_participator_data() {
  
  if (participator_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    participator_data_ = p;
  }
  return participator_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* transaction_participator::mutable_participator_data() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_participator_data();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_participator.participator_data)
  return _msg;
}
inline void transaction_participator::set_allocated_participator_data(::PROTOBUF_NAMESPACE_ID::Any* participator_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(participator_data_);
  }
  if (participator_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(participator_data));
    if (message_arena != submessage_arena) {
      participator_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, participator_data, submessage_arena);
    }
    
  } else {
    
  }
  participator_data_ = participator_data;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.transaction_participator.participator_data)
}

// -------------------------------------------------------------------

// transaction_configure

// bool force_commit = 1;
inline void transaction_configure::clear_force_commit() {
  force_commit_ = false;
}
inline bool transaction_configure::_internal_force_commit() const {
  return force_commit_;
}
inline bool transaction_configure::force_commit() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_configure.force_commit)
  return _internal_force_commit();
}
inline void transaction_configure::_internal_set_force_commit(bool value) {
  
  force_commit_ = value;
}
inline void transaction_configure::set_force_commit(bool value) {
  _internal_set_force_commit(value);
  // @@protoc_insertion_point(field_set:atframework.distributed_system.transaction_configure.force_commit)
}

// uint32 resolve_max_times = 11;
inline void transaction_configure::clear_resolve_max_times() {
  resolve_max_times_ = 0u;
}
inline uint32_t transaction_configure::_internal_resolve_max_times() const {
  return resolve_max_times_;
}
inline uint32_t transaction_configure::resolve_max_times() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_configure.resolve_max_times)
  return _internal_resolve_max_times();
}
inline void transaction_configure::_internal_set_resolve_max_times(uint32_t value) {
  
  resolve_max_times_ = value;
}
inline void transaction_configure::set_resolve_max_times(uint32_t value) {
  _internal_set_resolve_max_times(value);
  // @@protoc_insertion_point(field_set:atframework.distributed_system.transaction_configure.resolve_max_times)
}

// .google.protobuf.Duration resolve_retry_interval = 12;
inline bool transaction_configure::_internal_has_resolve_retry_interval() const {
  return this != internal_default_instance() && resolve_retry_interval_ != nullptr;
}
inline bool transaction_configure::has_resolve_retry_interval() const {
  return _internal_has_resolve_retry_interval();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& transaction_configure::_internal_resolve_retry_interval() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = resolve_retry_interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& transaction_configure::resolve_retry_interval() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_configure.resolve_retry_interval)
  return _internal_resolve_retry_interval();
}
inline void transaction_configure::unsafe_arena_set_allocated_resolve_retry_interval(
    ::PROTOBUF_NAMESPACE_ID::Duration* resolve_retry_interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resolve_retry_interval_);
  }
  resolve_retry_interval_ = resolve_retry_interval;
  if (resolve_retry_interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.transaction_configure.resolve_retry_interval)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* transaction_configure::release_resolve_retry_interval() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = resolve_retry_interval_;
  resolve_retry_interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* transaction_configure::unsafe_arena_release_resolve_retry_interval() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.transaction_configure.resolve_retry_interval)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = resolve_retry_interval_;
  resolve_retry_interval_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* transaction_configure::_internal_mutable_resolve_retry_interval() {
  
  if (resolve_retry_interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    resolve_retry_interval_ = p;
  }
  return resolve_retry_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* transaction_configure::mutable_resolve_retry_interval() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_resolve_retry_interval();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_configure.resolve_retry_interval)
  return _msg;
}
inline void transaction_configure::set_allocated_resolve_retry_interval(::PROTOBUF_NAMESPACE_ID::Duration* resolve_retry_interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(resolve_retry_interval_);
  }
  if (resolve_retry_interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resolve_retry_interval));
    if (message_arena != submessage_arena) {
      resolve_retry_interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolve_retry_interval, submessage_arena);
    }
    
  } else {
    
  }
  resolve_retry_interval_ = resolve_retry_interval;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.transaction_configure.resolve_retry_interval)
}

// .google.protobuf.Duration lock_wait_interval_min = 13;
inline bool transaction_configure::_internal_has_lock_wait_interval_min() const {
  return this != internal_default_instance() && lock_wait_interval_min_ != nullptr;
}
inline bool transaction_configure::has_lock_wait_interval_min() const {
  return _internal_has_lock_wait_interval_min();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& transaction_configure::_internal_lock_wait_interval_min() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = lock_wait_interval_min_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& transaction_configure::lock_wait_interval_min() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_configure.lock_wait_interval_min)
  return _internal_lock_wait_interval_min();
}
inline void transaction_configure::unsafe_arena_set_allocated_lock_wait_interval_min(
    ::PROTOBUF_NAMESPACE_ID::Duration* lock_wait_interval_min) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lock_wait_interval_min_);
  }
  lock_wait_interval_min_ = lock_wait_interval_min;
  if (lock_wait_interval_min) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.transaction_configure.lock_wait_interval_min)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* transaction_configure::release_lock_wait_interval_min() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = lock_wait_interval_min_;
  lock_wait_interval_min_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* transaction_configure::unsafe_arena_release_lock_wait_interval_min() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.transaction_configure.lock_wait_interval_min)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = lock_wait_interval_min_;
  lock_wait_interval_min_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* transaction_configure::_internal_mutable_lock_wait_interval_min() {
  
  if (lock_wait_interval_min_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    lock_wait_interval_min_ = p;
  }
  return lock_wait_interval_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* transaction_configure::mutable_lock_wait_interval_min() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_lock_wait_interval_min();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_configure.lock_wait_interval_min)
  return _msg;
}
inline void transaction_configure::set_allocated_lock_wait_interval_min(::PROTOBUF_NAMESPACE_ID::Duration* lock_wait_interval_min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lock_wait_interval_min_);
  }
  if (lock_wait_interval_min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lock_wait_interval_min));
    if (message_arena != submessage_arena) {
      lock_wait_interval_min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lock_wait_interval_min, submessage_arena);
    }
    
  } else {
    
  }
  lock_wait_interval_min_ = lock_wait_interval_min;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.transaction_configure.lock_wait_interval_min)
}

// .google.protobuf.Duration lock_wait_interval_max = 14;
inline bool transaction_configure::_internal_has_lock_wait_interval_max() const {
  return this != internal_default_instance() && lock_wait_interval_max_ != nullptr;
}
inline bool transaction_configure::has_lock_wait_interval_max() const {
  return _internal_has_lock_wait_interval_max();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& transaction_configure::_internal_lock_wait_interval_max() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = lock_wait_interval_max_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& transaction_configure::lock_wait_interval_max() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_configure.lock_wait_interval_max)
  return _internal_lock_wait_interval_max();
}
inline void transaction_configure::unsafe_arena_set_allocated_lock_wait_interval_max(
    ::PROTOBUF_NAMESPACE_ID::Duration* lock_wait_interval_max) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lock_wait_interval_max_);
  }
  lock_wait_interval_max_ = lock_wait_interval_max;
  if (lock_wait_interval_max) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.transaction_configure.lock_wait_interval_max)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* transaction_configure::release_lock_wait_interval_max() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = lock_wait_interval_max_;
  lock_wait_interval_max_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* transaction_configure::unsafe_arena_release_lock_wait_interval_max() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.transaction_configure.lock_wait_interval_max)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = lock_wait_interval_max_;
  lock_wait_interval_max_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* transaction_configure::_internal_mutable_lock_wait_interval_max() {
  
  if (lock_wait_interval_max_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    lock_wait_interval_max_ = p;
  }
  return lock_wait_interval_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* transaction_configure::mutable_lock_wait_interval_max() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_lock_wait_interval_max();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_configure.lock_wait_interval_max)
  return _msg;
}
inline void transaction_configure::set_allocated_lock_wait_interval_max(::PROTOBUF_NAMESPACE_ID::Duration* lock_wait_interval_max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lock_wait_interval_max_);
  }
  if (lock_wait_interval_max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lock_wait_interval_max));
    if (message_arena != submessage_arena) {
      lock_wait_interval_max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lock_wait_interval_max, submessage_arena);
    }
    
  } else {
    
  }
  lock_wait_interval_max_ = lock_wait_interval_max;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.transaction_configure.lock_wait_interval_max)
}

// uint32 lock_retry_max_times = 15;
inline void transaction_configure::clear_lock_retry_max_times() {
  lock_retry_max_times_ = 0u;
}
inline uint32_t transaction_configure::_internal_lock_retry_max_times() const {
  return lock_retry_max_times_;
}
inline uint32_t transaction_configure::lock_retry_max_times() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_configure.lock_retry_max_times)
  return _internal_lock_retry_max_times();
}
inline void transaction_configure::_internal_set_lock_retry_max_times(uint32_t value) {
  
  lock_retry_max_times_ = value;
}
inline void transaction_configure::set_lock_retry_max_times(uint32_t value) {
  _internal_set_lock_retry_max_times(value);
  // @@protoc_insertion_point(field_set:atframework.distributed_system.transaction_configure.lock_retry_max_times)
}

// -------------------------------------------------------------------

// transaction_metadata

// bytes transaction_uuid = 1;
inline void transaction_metadata::clear_transaction_uuid() {
  transaction_uuid_.ClearToEmpty();
}
inline const std::string& transaction_metadata::transaction_uuid() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_metadata.transaction_uuid)
  return _internal_transaction_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transaction_metadata::set_transaction_uuid(ArgT0&& arg0, ArgT... args) {
 
 transaction_uuid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:atframework.distributed_system.transaction_metadata.transaction_uuid)
}
inline std::string* transaction_metadata::mutable_transaction_uuid() {
  std::string* _s = _internal_mutable_transaction_uuid();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_metadata.transaction_uuid)
  return _s;
}
inline const std::string& transaction_metadata::_internal_transaction_uuid() const {
  return transaction_uuid_.Get();
}
inline void transaction_metadata::_internal_set_transaction_uuid(const std::string& value) {
  
  transaction_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transaction_metadata::_internal_mutable_transaction_uuid() {
  
  return transaction_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transaction_metadata::release_transaction_uuid() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.transaction_metadata.transaction_uuid)
  return transaction_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transaction_metadata::set_allocated_transaction_uuid(std::string* transaction_uuid) {
  if (transaction_uuid != nullptr) {
    
  } else {
    
  }
  transaction_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_uuid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (transaction_uuid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    transaction_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.transaction_metadata.transaction_uuid)
}

// .atframework.distributed_system.EnDistibutedTransactionStatus status = 2;
inline void transaction_metadata::clear_status() {
  status_ = 0;
}
inline ::atframework::distributed_system::EnDistibutedTransactionStatus transaction_metadata::_internal_status() const {
  return static_cast< ::atframework::distributed_system::EnDistibutedTransactionStatus >(status_);
}
inline ::atframework::distributed_system::EnDistibutedTransactionStatus transaction_metadata::status() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_metadata.status)
  return _internal_status();
}
inline void transaction_metadata::_internal_set_status(::atframework::distributed_system::EnDistibutedTransactionStatus value) {
  
  status_ = value;
}
inline void transaction_metadata::set_status(::atframework::distributed_system::EnDistibutedTransactionStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:atframework.distributed_system.transaction_metadata.status)
}

// uint32 replicate_read_count = 3;
inline void transaction_metadata::clear_replicate_read_count() {
  replicate_read_count_ = 0u;
}
inline uint32_t transaction_metadata::_internal_replicate_read_count() const {
  return replicate_read_count_;
}
inline uint32_t transaction_metadata::replicate_read_count() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_metadata.replicate_read_count)
  return _internal_replicate_read_count();
}
inline void transaction_metadata::_internal_set_replicate_read_count(uint32_t value) {
  
  replicate_read_count_ = value;
}
inline void transaction_metadata::set_replicate_read_count(uint32_t value) {
  _internal_set_replicate_read_count(value);
  // @@protoc_insertion_point(field_set:atframework.distributed_system.transaction_metadata.replicate_read_count)
}

// repeated uint64 replicate_node_server_id = 4;
inline int transaction_metadata::_internal_replicate_node_server_id_size() const {
  return replicate_node_server_id_.size();
}
inline int transaction_metadata::replicate_node_server_id_size() const {
  return _internal_replicate_node_server_id_size();
}
inline void transaction_metadata::clear_replicate_node_server_id() {
  replicate_node_server_id_.Clear();
}
inline uint64_t transaction_metadata::_internal_replicate_node_server_id(int index) const {
  return replicate_node_server_id_.Get(index);
}
inline uint64_t transaction_metadata::replicate_node_server_id(int index) const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_metadata.replicate_node_server_id)
  return _internal_replicate_node_server_id(index);
}
inline void transaction_metadata::set_replicate_node_server_id(int index, uint64_t value) {
  replicate_node_server_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:atframework.distributed_system.transaction_metadata.replicate_node_server_id)
}
inline void transaction_metadata::_internal_add_replicate_node_server_id(uint64_t value) {
  replicate_node_server_id_.Add(value);
}
inline void transaction_metadata::add_replicate_node_server_id(uint64_t value) {
  _internal_add_replicate_node_server_id(value);
  // @@protoc_insertion_point(field_add:atframework.distributed_system.transaction_metadata.replicate_node_server_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
transaction_metadata::_internal_replicate_node_server_id() const {
  return replicate_node_server_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
transaction_metadata::replicate_node_server_id() const {
  // @@protoc_insertion_point(field_list:atframework.distributed_system.transaction_metadata.replicate_node_server_id)
  return _internal_replicate_node_server_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
transaction_metadata::_internal_mutable_replicate_node_server_id() {
  return &replicate_node_server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
transaction_metadata::mutable_replicate_node_server_id() {
  // @@protoc_insertion_point(field_mutable_list:atframework.distributed_system.transaction_metadata.replicate_node_server_id)
  return _internal_mutable_replicate_node_server_id();
}

// bool memory_only = 5;
inline void transaction_metadata::clear_memory_only() {
  memory_only_ = false;
}
inline bool transaction_metadata::_internal_memory_only() const {
  return memory_only_;
}
inline bool transaction_metadata::memory_only() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_metadata.memory_only)
  return _internal_memory_only();
}
inline void transaction_metadata::_internal_set_memory_only(bool value) {
  
  memory_only_ = value;
}
inline void transaction_metadata::set_memory_only(bool value) {
  _internal_set_memory_only(value);
  // @@protoc_insertion_point(field_set:atframework.distributed_system.transaction_metadata.memory_only)
}

// .google.protobuf.Timestamp prepare_timepoint = 11;
inline bool transaction_metadata::_internal_has_prepare_timepoint() const {
  return this != internal_default_instance() && prepare_timepoint_ != nullptr;
}
inline bool transaction_metadata::has_prepare_timepoint() const {
  return _internal_has_prepare_timepoint();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& transaction_metadata::_internal_prepare_timepoint() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = prepare_timepoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& transaction_metadata::prepare_timepoint() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_metadata.prepare_timepoint)
  return _internal_prepare_timepoint();
}
inline void transaction_metadata::unsafe_arena_set_allocated_prepare_timepoint(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* prepare_timepoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prepare_timepoint_);
  }
  prepare_timepoint_ = prepare_timepoint;
  if (prepare_timepoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.transaction_metadata.prepare_timepoint)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_metadata::release_prepare_timepoint() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = prepare_timepoint_;
  prepare_timepoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_metadata::unsafe_arena_release_prepare_timepoint() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.transaction_metadata.prepare_timepoint)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = prepare_timepoint_;
  prepare_timepoint_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_metadata::_internal_mutable_prepare_timepoint() {
  
  if (prepare_timepoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    prepare_timepoint_ = p;
  }
  return prepare_timepoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_metadata::mutable_prepare_timepoint() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_prepare_timepoint();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_metadata.prepare_timepoint)
  return _msg;
}
inline void transaction_metadata::set_allocated_prepare_timepoint(::PROTOBUF_NAMESPACE_ID::Timestamp* prepare_timepoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(prepare_timepoint_);
  }
  if (prepare_timepoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prepare_timepoint));
    if (message_arena != submessage_arena) {
      prepare_timepoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prepare_timepoint, submessage_arena);
    }
    
  } else {
    
  }
  prepare_timepoint_ = prepare_timepoint;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.transaction_metadata.prepare_timepoint)
}

// .google.protobuf.Timestamp finish_timepoint = 12;
inline bool transaction_metadata::_internal_has_finish_timepoint() const {
  return this != internal_default_instance() && finish_timepoint_ != nullptr;
}
inline bool transaction_metadata::has_finish_timepoint() const {
  return _internal_has_finish_timepoint();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& transaction_metadata::_internal_finish_timepoint() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = finish_timepoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& transaction_metadata::finish_timepoint() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_metadata.finish_timepoint)
  return _internal_finish_timepoint();
}
inline void transaction_metadata::unsafe_arena_set_allocated_finish_timepoint(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* finish_timepoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finish_timepoint_);
  }
  finish_timepoint_ = finish_timepoint;
  if (finish_timepoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.transaction_metadata.finish_timepoint)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_metadata::release_finish_timepoint() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = finish_timepoint_;
  finish_timepoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_metadata::unsafe_arena_release_finish_timepoint() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.transaction_metadata.finish_timepoint)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = finish_timepoint_;
  finish_timepoint_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_metadata::_internal_mutable_finish_timepoint() {
  
  if (finish_timepoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    finish_timepoint_ = p;
  }
  return finish_timepoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_metadata::mutable_finish_timepoint() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_finish_timepoint();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_metadata.finish_timepoint)
  return _msg;
}
inline void transaction_metadata::set_allocated_finish_timepoint(::PROTOBUF_NAMESPACE_ID::Timestamp* finish_timepoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(finish_timepoint_);
  }
  if (finish_timepoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finish_timepoint));
    if (message_arena != submessage_arena) {
      finish_timepoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finish_timepoint, submessage_arena);
    }
    
  } else {
    
  }
  finish_timepoint_ = finish_timepoint;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.transaction_metadata.finish_timepoint)
}

// .google.protobuf.Timestamp expire_timepoint = 13;
inline bool transaction_metadata::_internal_has_expire_timepoint() const {
  return this != internal_default_instance() && expire_timepoint_ != nullptr;
}
inline bool transaction_metadata::has_expire_timepoint() const {
  return _internal_has_expire_timepoint();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& transaction_metadata::_internal_expire_timepoint() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = expire_timepoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& transaction_metadata::expire_timepoint() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_metadata.expire_timepoint)
  return _internal_expire_timepoint();
}
inline void transaction_metadata::unsafe_arena_set_allocated_expire_timepoint(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_timepoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_timepoint_);
  }
  expire_timepoint_ = expire_timepoint;
  if (expire_timepoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.transaction_metadata.expire_timepoint)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_metadata::release_expire_timepoint() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = expire_timepoint_;
  expire_timepoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_metadata::unsafe_arena_release_expire_timepoint() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.transaction_metadata.expire_timepoint)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = expire_timepoint_;
  expire_timepoint_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_metadata::_internal_mutable_expire_timepoint() {
  
  if (expire_timepoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    expire_timepoint_ = p;
  }
  return expire_timepoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_metadata::mutable_expire_timepoint() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expire_timepoint();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_metadata.expire_timepoint)
  return _msg;
}
inline void transaction_metadata::set_allocated_expire_timepoint(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_timepoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_timepoint_);
  }
  if (expire_timepoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_timepoint));
    if (message_arena != submessage_arena) {
      expire_timepoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expire_timepoint, submessage_arena);
    }
    
  } else {
    
  }
  expire_timepoint_ = expire_timepoint;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.transaction_metadata.expire_timepoint)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// transaction_blob_storage

// .atframework.distributed_system.transaction_metadata metadata = 1;
inline bool transaction_blob_storage::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool transaction_blob_storage::has_metadata() const {
  return _internal_has_metadata();
}
inline void transaction_blob_storage::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::atframework::distributed_system::transaction_metadata& transaction_blob_storage::_internal_metadata() const {
  const ::atframework::distributed_system::transaction_metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframework::distributed_system::transaction_metadata&>(
      ::atframework::distributed_system::_transaction_metadata_default_instance_);
}
inline const ::atframework::distributed_system::transaction_metadata& transaction_blob_storage::metadata() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_blob_storage.metadata)
  return _internal_metadata();
}
inline void transaction_blob_storage::unsafe_arena_set_allocated_metadata(
    ::atframework::distributed_system::transaction_metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.transaction_blob_storage.metadata)
}
inline ::atframework::distributed_system::transaction_metadata* transaction_blob_storage::release_metadata() {
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* transaction_blob_storage::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.transaction_blob_storage.metadata)
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* transaction_blob_storage::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframework::distributed_system::transaction_metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::atframework::distributed_system::transaction_metadata* transaction_blob_storage::mutable_metadata() {
  ::atframework::distributed_system::transaction_metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_blob_storage.metadata)
  return _msg;
}
inline void transaction_blob_storage::set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframework::distributed_system::transaction_metadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.transaction_blob_storage.metadata)
}

// .atframework.distributed_system.transaction_configure configure = 2;
inline bool transaction_blob_storage::_internal_has_configure() const {
  return this != internal_default_instance() && configure_ != nullptr;
}
inline bool transaction_blob_storage::has_configure() const {
  return _internal_has_configure();
}
inline void transaction_blob_storage::clear_configure() {
  if (GetArenaForAllocation() == nullptr && configure_ != nullptr) {
    delete configure_;
  }
  configure_ = nullptr;
}
inline const ::atframework::distributed_system::transaction_configure& transaction_blob_storage::_internal_configure() const {
  const ::atframework::distributed_system::transaction_configure* p = configure_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframework::distributed_system::transaction_configure&>(
      ::atframework::distributed_system::_transaction_configure_default_instance_);
}
inline const ::atframework::distributed_system::transaction_configure& transaction_blob_storage::configure() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_blob_storage.configure)
  return _internal_configure();
}
inline void transaction_blob_storage::unsafe_arena_set_allocated_configure(
    ::atframework::distributed_system::transaction_configure* configure) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configure_);
  }
  configure_ = configure;
  if (configure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.transaction_blob_storage.configure)
}
inline ::atframework::distributed_system::transaction_configure* transaction_blob_storage::release_configure() {
  
  ::atframework::distributed_system::transaction_configure* temp = configure_;
  configure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframework::distributed_system::transaction_configure* transaction_blob_storage::unsafe_arena_release_configure() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.transaction_blob_storage.configure)
  
  ::atframework::distributed_system::transaction_configure* temp = configure_;
  configure_ = nullptr;
  return temp;
}
inline ::atframework::distributed_system::transaction_configure* transaction_blob_storage::_internal_mutable_configure() {
  
  if (configure_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframework::distributed_system::transaction_configure>(GetArenaForAllocation());
    configure_ = p;
  }
  return configure_;
}
inline ::atframework::distributed_system::transaction_configure* transaction_blob_storage::mutable_configure() {
  ::atframework::distributed_system::transaction_configure* _msg = _internal_mutable_configure();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_blob_storage.configure)
  return _msg;
}
inline void transaction_blob_storage::set_allocated_configure(::atframework::distributed_system::transaction_configure* configure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete configure_;
  }
  if (configure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframework::distributed_system::transaction_configure>::GetOwningArena(configure);
    if (message_arena != submessage_arena) {
      configure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configure, submessage_arena);
    }
    
  } else {
    
  }
  configure_ = configure;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.transaction_blob_storage.configure)
}

// map<string, .atframework.distributed_system.transaction_participator> participators = 3;
inline int transaction_blob_storage::_internal_participators_size() const {
  return participators_.size();
}
inline int transaction_blob_storage::participators_size() const {
  return _internal_participators_size();
}
inline void transaction_blob_storage::clear_participators() {
  participators_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::atframework::distributed_system::transaction_participator >&
transaction_blob_storage::_internal_participators() const {
  return participators_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::atframework::distributed_system::transaction_participator >&
transaction_blob_storage::participators() const {
  // @@protoc_insertion_point(field_map:atframework.distributed_system.transaction_blob_storage.participators)
  return _internal_participators();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::atframework::distributed_system::transaction_participator >*
transaction_blob_storage::_internal_mutable_participators() {
  return participators_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::atframework::distributed_system::transaction_participator >*
transaction_blob_storage::mutable_participators() {
  // @@protoc_insertion_point(field_mutable_map:atframework.distributed_system.transaction_blob_storage.participators)
  return _internal_mutable_participators();
}

// .google.protobuf.Any transaction_data = 4;
inline bool transaction_blob_storage::_internal_has_transaction_data() const {
  return this != internal_default_instance() && transaction_data_ != nullptr;
}
inline bool transaction_blob_storage::has_transaction_data() const {
  return _internal_has_transaction_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& transaction_blob_storage::_internal_transaction_data() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = transaction_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& transaction_blob_storage::transaction_data() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_blob_storage.transaction_data)
  return _internal_transaction_data();
}
inline void transaction_blob_storage::unsafe_arena_set_allocated_transaction_data(
    ::PROTOBUF_NAMESPACE_ID::Any* transaction_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_data_);
  }
  transaction_data_ = transaction_data;
  if (transaction_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.transaction_blob_storage.transaction_data)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* transaction_blob_storage::release_transaction_data() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = transaction_data_;
  transaction_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* transaction_blob_storage::unsafe_arena_release_transaction_data() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.transaction_blob_storage.transaction_data)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = transaction_data_;
  transaction_data_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* transaction_blob_storage::_internal_mutable_transaction_data() {
  
  if (transaction_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    transaction_data_ = p;
  }
  return transaction_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* transaction_blob_storage::mutable_transaction_data() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_transaction_data();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_blob_storage.transaction_data)
  return _msg;
}
inline void transaction_blob_storage::set_allocated_transaction_data(::PROTOBUF_NAMESPACE_ID::Any* transaction_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_data_);
  }
  if (transaction_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_data));
    if (message_arena != submessage_arena) {
      transaction_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction_data, submessage_arena);
    }
    
  } else {
    
  }
  transaction_data_ = transaction_data;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.transaction_blob_storage.transaction_data)
}

// -------------------------------------------------------------------

// transaction_participator_storage

// .atframework.distributed_system.transaction_metadata metadata = 1;
inline bool transaction_participator_storage::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool transaction_participator_storage::has_metadata() const {
  return _internal_has_metadata();
}
inline void transaction_participator_storage::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::atframework::distributed_system::transaction_metadata& transaction_participator_storage::_internal_metadata() const {
  const ::atframework::distributed_system::transaction_metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframework::distributed_system::transaction_metadata&>(
      ::atframework::distributed_system::_transaction_metadata_default_instance_);
}
inline const ::atframework::distributed_system::transaction_metadata& transaction_participator_storage::metadata() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_participator_storage.metadata)
  return _internal_metadata();
}
inline void transaction_participator_storage::unsafe_arena_set_allocated_metadata(
    ::atframework::distributed_system::transaction_metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.transaction_participator_storage.metadata)
}
inline ::atframework::distributed_system::transaction_metadata* transaction_participator_storage::release_metadata() {
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* transaction_participator_storage::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.transaction_participator_storage.metadata)
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* transaction_participator_storage::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframework::distributed_system::transaction_metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::atframework::distributed_system::transaction_metadata* transaction_participator_storage::mutable_metadata() {
  ::atframework::distributed_system::transaction_metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_participator_storage.metadata)
  return _msg;
}
inline void transaction_participator_storage::set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframework::distributed_system::transaction_metadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.transaction_participator_storage.metadata)
}

// .atframework.distributed_system.transaction_configure configure = 2;
inline bool transaction_participator_storage::_internal_has_configure() const {
  return this != internal_default_instance() && configure_ != nullptr;
}
inline bool transaction_participator_storage::has_configure() const {
  return _internal_has_configure();
}
inline void transaction_participator_storage::clear_configure() {
  if (GetArenaForAllocation() == nullptr && configure_ != nullptr) {
    delete configure_;
  }
  configure_ = nullptr;
}
inline const ::atframework::distributed_system::transaction_configure& transaction_participator_storage::_internal_configure() const {
  const ::atframework::distributed_system::transaction_configure* p = configure_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframework::distributed_system::transaction_configure&>(
      ::atframework::distributed_system::_transaction_configure_default_instance_);
}
inline const ::atframework::distributed_system::transaction_configure& transaction_participator_storage::configure() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_participator_storage.configure)
  return _internal_configure();
}
inline void transaction_participator_storage::unsafe_arena_set_allocated_configure(
    ::atframework::distributed_system::transaction_configure* configure) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configure_);
  }
  configure_ = configure;
  if (configure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.transaction_participator_storage.configure)
}
inline ::atframework::distributed_system::transaction_configure* transaction_participator_storage::release_configure() {
  
  ::atframework::distributed_system::transaction_configure* temp = configure_;
  configure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframework::distributed_system::transaction_configure* transaction_participator_storage::unsafe_arena_release_configure() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.transaction_participator_storage.configure)
  
  ::atframework::distributed_system::transaction_configure* temp = configure_;
  configure_ = nullptr;
  return temp;
}
inline ::atframework::distributed_system::transaction_configure* transaction_participator_storage::_internal_mutable_configure() {
  
  if (configure_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframework::distributed_system::transaction_configure>(GetArenaForAllocation());
    configure_ = p;
  }
  return configure_;
}
inline ::atframework::distributed_system::transaction_configure* transaction_participator_storage::mutable_configure() {
  ::atframework::distributed_system::transaction_configure* _msg = _internal_mutable_configure();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_participator_storage.configure)
  return _msg;
}
inline void transaction_participator_storage::set_allocated_configure(::atframework::distributed_system::transaction_configure* configure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete configure_;
  }
  if (configure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframework::distributed_system::transaction_configure>::GetOwningArena(configure);
    if (message_arena != submessage_arena) {
      configure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configure, submessage_arena);
    }
    
  } else {
    
  }
  configure_ = configure;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.transaction_participator_storage.configure)
}

// .google.protobuf.Any participator_data = 3;
inline bool transaction_participator_storage::_internal_has_participator_data() const {
  return this != internal_default_instance() && participator_data_ != nullptr;
}
inline bool transaction_participator_storage::has_participator_data() const {
  return _internal_has_participator_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& transaction_participator_storage::_internal_participator_data() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = participator_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& transaction_participator_storage::participator_data() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_participator_storage.participator_data)
  return _internal_participator_data();
}
inline void transaction_participator_storage::unsafe_arena_set_allocated_participator_data(
    ::PROTOBUF_NAMESPACE_ID::Any* participator_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(participator_data_);
  }
  participator_data_ = participator_data;
  if (participator_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.transaction_participator_storage.participator_data)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* transaction_participator_storage::release_participator_data() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = participator_data_;
  participator_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* transaction_participator_storage::unsafe_arena_release_participator_data() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.transaction_participator_storage.participator_data)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = participator_data_;
  participator_data_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* transaction_participator_storage::_internal_mutable_participator_data() {
  
  if (participator_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    participator_data_ = p;
  }
  return participator_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* transaction_participator_storage::mutable_participator_data() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_participator_data();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_participator_storage.participator_data)
  return _msg;
}
inline void transaction_participator_storage::set_allocated_participator_data(::PROTOBUF_NAMESPACE_ID::Any* participator_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(participator_data_);
  }
  if (participator_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(participator_data));
    if (message_arena != submessage_arena) {
      participator_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, participator_data, submessage_arena);
    }
    
  } else {
    
  }
  participator_data_ = participator_data;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.transaction_participator_storage.participator_data)
}

// .google.protobuf.Any transaction_data = 4;
inline bool transaction_participator_storage::_internal_has_transaction_data() const {
  return this != internal_default_instance() && transaction_data_ != nullptr;
}
inline bool transaction_participator_storage::has_transaction_data() const {
  return _internal_has_transaction_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& transaction_participator_storage::_internal_transaction_data() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = transaction_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& transaction_participator_storage::transaction_data() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_participator_storage.transaction_data)
  return _internal_transaction_data();
}
inline void transaction_participator_storage::unsafe_arena_set_allocated_transaction_data(
    ::PROTOBUF_NAMESPACE_ID::Any* transaction_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_data_);
  }
  transaction_data_ = transaction_data;
  if (transaction_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.transaction_participator_storage.transaction_data)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* transaction_participator_storage::release_transaction_data() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = transaction_data_;
  transaction_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* transaction_participator_storage::unsafe_arena_release_transaction_data() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.transaction_participator_storage.transaction_data)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = transaction_data_;
  transaction_data_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* transaction_participator_storage::_internal_mutable_transaction_data() {
  
  if (transaction_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    transaction_data_ = p;
  }
  return transaction_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* transaction_participator_storage::mutable_transaction_data() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_transaction_data();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_participator_storage.transaction_data)
  return _msg;
}
inline void transaction_participator_storage::set_allocated_transaction_data(::PROTOBUF_NAMESPACE_ID::Any* transaction_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_data_);
  }
  if (transaction_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_data));
    if (message_arena != submessage_arena) {
      transaction_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction_data, submessage_arena);
    }
    
  } else {
    
  }
  transaction_data_ = transaction_data;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.transaction_participator_storage.transaction_data)
}

// uint32 resolve_times = 11;
inline void transaction_participator_storage::clear_resolve_times() {
  resolve_times_ = 0u;
}
inline uint32_t transaction_participator_storage::_internal_resolve_times() const {
  return resolve_times_;
}
inline uint32_t transaction_participator_storage::resolve_times() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_participator_storage.resolve_times)
  return _internal_resolve_times();
}
inline void transaction_participator_storage::_internal_set_resolve_times(uint32_t value) {
  
  resolve_times_ = value;
}
inline void transaction_participator_storage::set_resolve_times(uint32_t value) {
  _internal_set_resolve_times(value);
  // @@protoc_insertion_point(field_set:atframework.distributed_system.transaction_participator_storage.resolve_times)
}

// .google.protobuf.Timestamp resolve_timepoint = 12;
inline bool transaction_participator_storage::_internal_has_resolve_timepoint() const {
  return this != internal_default_instance() && resolve_timepoint_ != nullptr;
}
inline bool transaction_participator_storage::has_resolve_timepoint() const {
  return _internal_has_resolve_timepoint();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& transaction_participator_storage::_internal_resolve_timepoint() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = resolve_timepoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& transaction_participator_storage::resolve_timepoint() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_participator_storage.resolve_timepoint)
  return _internal_resolve_timepoint();
}
inline void transaction_participator_storage::unsafe_arena_set_allocated_resolve_timepoint(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* resolve_timepoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resolve_timepoint_);
  }
  resolve_timepoint_ = resolve_timepoint;
  if (resolve_timepoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.transaction_participator_storage.resolve_timepoint)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_participator_storage::release_resolve_timepoint() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = resolve_timepoint_;
  resolve_timepoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_participator_storage::unsafe_arena_release_resolve_timepoint() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.transaction_participator_storage.resolve_timepoint)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = resolve_timepoint_;
  resolve_timepoint_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_participator_storage::_internal_mutable_resolve_timepoint() {
  
  if (resolve_timepoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    resolve_timepoint_ = p;
  }
  return resolve_timepoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* transaction_participator_storage::mutable_resolve_timepoint() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_resolve_timepoint();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_participator_storage.resolve_timepoint)
  return _msg;
}
inline void transaction_participator_storage::set_allocated_resolve_timepoint(::PROTOBUF_NAMESPACE_ID::Timestamp* resolve_timepoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(resolve_timepoint_);
  }
  if (resolve_timepoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resolve_timepoint));
    if (message_arena != submessage_arena) {
      resolve_timepoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolve_timepoint, submessage_arena);
    }
    
  } else {
    
  }
  resolve_timepoint_ = resolve_timepoint;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.transaction_participator_storage.resolve_timepoint)
}

// repeated bytes lock_resource = 21;
inline int transaction_participator_storage::_internal_lock_resource_size() const {
  return lock_resource_.size();
}
inline int transaction_participator_storage::lock_resource_size() const {
  return _internal_lock_resource_size();
}
inline void transaction_participator_storage::clear_lock_resource() {
  lock_resource_.Clear();
}
inline std::string* transaction_participator_storage::add_lock_resource() {
  std::string* _s = _internal_add_lock_resource();
  // @@protoc_insertion_point(field_add_mutable:atframework.distributed_system.transaction_participator_storage.lock_resource)
  return _s;
}
inline const std::string& transaction_participator_storage::_internal_lock_resource(int index) const {
  return lock_resource_.Get(index);
}
inline const std::string& transaction_participator_storage::lock_resource(int index) const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_participator_storage.lock_resource)
  return _internal_lock_resource(index);
}
inline std::string* transaction_participator_storage::mutable_lock_resource(int index) {
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_participator_storage.lock_resource)
  return lock_resource_.Mutable(index);
}
inline void transaction_participator_storage::set_lock_resource(int index, const std::string& value) {
  lock_resource_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:atframework.distributed_system.transaction_participator_storage.lock_resource)
}
inline void transaction_participator_storage::set_lock_resource(int index, std::string&& value) {
  lock_resource_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:atframework.distributed_system.transaction_participator_storage.lock_resource)
}
inline void transaction_participator_storage::set_lock_resource(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lock_resource_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:atframework.distributed_system.transaction_participator_storage.lock_resource)
}
inline void transaction_participator_storage::set_lock_resource(int index, const void* value, size_t size) {
  lock_resource_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:atframework.distributed_system.transaction_participator_storage.lock_resource)
}
inline std::string* transaction_participator_storage::_internal_add_lock_resource() {
  return lock_resource_.Add();
}
inline void transaction_participator_storage::add_lock_resource(const std::string& value) {
  lock_resource_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:atframework.distributed_system.transaction_participator_storage.lock_resource)
}
inline void transaction_participator_storage::add_lock_resource(std::string&& value) {
  lock_resource_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:atframework.distributed_system.transaction_participator_storage.lock_resource)
}
inline void transaction_participator_storage::add_lock_resource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lock_resource_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:atframework.distributed_system.transaction_participator_storage.lock_resource)
}
inline void transaction_participator_storage::add_lock_resource(const void* value, size_t size) {
  lock_resource_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:atframework.distributed_system.transaction_participator_storage.lock_resource)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
transaction_participator_storage::lock_resource() const {
  // @@protoc_insertion_point(field_list:atframework.distributed_system.transaction_participator_storage.lock_resource)
  return lock_resource_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
transaction_participator_storage::mutable_lock_resource() {
  // @@protoc_insertion_point(field_mutable_list:atframework.distributed_system.transaction_participator_storage.lock_resource)
  return &lock_resource_;
}

// -------------------------------------------------------------------

// transaction_participator_failure_reason

// bool allow_retry = 1;
inline void transaction_participator_failure_reason::clear_allow_retry() {
  allow_retry_ = false;
}
inline bool transaction_participator_failure_reason::_internal_allow_retry() const {
  return allow_retry_;
}
inline bool transaction_participator_failure_reason::allow_retry() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_participator_failure_reason.allow_retry)
  return _internal_allow_retry();
}
inline void transaction_participator_failure_reason::_internal_set_allow_retry(bool value) {
  
  allow_retry_ = value;
}
inline void transaction_participator_failure_reason::set_allow_retry(bool value) {
  _internal_set_allow_retry(value);
  // @@protoc_insertion_point(field_set:atframework.distributed_system.transaction_participator_failure_reason.allow_retry)
}

// repeated bytes locked_resource = 12;
inline int transaction_participator_failure_reason::_internal_locked_resource_size() const {
  return locked_resource_.size();
}
inline int transaction_participator_failure_reason::locked_resource_size() const {
  return _internal_locked_resource_size();
}
inline void transaction_participator_failure_reason::clear_locked_resource() {
  locked_resource_.Clear();
}
inline std::string* transaction_participator_failure_reason::add_locked_resource() {
  std::string* _s = _internal_add_locked_resource();
  // @@protoc_insertion_point(field_add_mutable:atframework.distributed_system.transaction_participator_failure_reason.locked_resource)
  return _s;
}
inline const std::string& transaction_participator_failure_reason::_internal_locked_resource(int index) const {
  return locked_resource_.Get(index);
}
inline const std::string& transaction_participator_failure_reason::locked_resource(int index) const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_participator_failure_reason.locked_resource)
  return _internal_locked_resource(index);
}
inline std::string* transaction_participator_failure_reason::mutable_locked_resource(int index) {
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_participator_failure_reason.locked_resource)
  return locked_resource_.Mutable(index);
}
inline void transaction_participator_failure_reason::set_locked_resource(int index, const std::string& value) {
  locked_resource_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:atframework.distributed_system.transaction_participator_failure_reason.locked_resource)
}
inline void transaction_participator_failure_reason::set_locked_resource(int index, std::string&& value) {
  locked_resource_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:atframework.distributed_system.transaction_participator_failure_reason.locked_resource)
}
inline void transaction_participator_failure_reason::set_locked_resource(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  locked_resource_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:atframework.distributed_system.transaction_participator_failure_reason.locked_resource)
}
inline void transaction_participator_failure_reason::set_locked_resource(int index, const void* value, size_t size) {
  locked_resource_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:atframework.distributed_system.transaction_participator_failure_reason.locked_resource)
}
inline std::string* transaction_participator_failure_reason::_internal_add_locked_resource() {
  return locked_resource_.Add();
}
inline void transaction_participator_failure_reason::add_locked_resource(const std::string& value) {
  locked_resource_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:atframework.distributed_system.transaction_participator_failure_reason.locked_resource)
}
inline void transaction_participator_failure_reason::add_locked_resource(std::string&& value) {
  locked_resource_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:atframework.distributed_system.transaction_participator_failure_reason.locked_resource)
}
inline void transaction_participator_failure_reason::add_locked_resource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  locked_resource_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:atframework.distributed_system.transaction_participator_failure_reason.locked_resource)
}
inline void transaction_participator_failure_reason::add_locked_resource(const void* value, size_t size) {
  locked_resource_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:atframework.distributed_system.transaction_participator_failure_reason.locked_resource)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
transaction_participator_failure_reason::locked_resource() const {
  // @@protoc_insertion_point(field_list:atframework.distributed_system.transaction_participator_failure_reason.locked_resource)
  return locked_resource_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
transaction_participator_failure_reason::mutable_locked_resource() {
  // @@protoc_insertion_point(field_mutable_list:atframework.distributed_system.transaction_participator_failure_reason.locked_resource)
  return &locked_resource_;
}

// -------------------------------------------------------------------

// transaction_participator_snapshot

// repeated .atframework.distributed_system.transaction_participator_storage running_transaction = 2;
inline int transaction_participator_snapshot::_internal_running_transaction_size() const {
  return running_transaction_.size();
}
inline int transaction_participator_snapshot::running_transaction_size() const {
  return _internal_running_transaction_size();
}
inline void transaction_participator_snapshot::clear_running_transaction() {
  running_transaction_.Clear();
}
inline ::atframework::distributed_system::transaction_participator_storage* transaction_participator_snapshot::mutable_running_transaction(int index) {
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_participator_snapshot.running_transaction)
  return running_transaction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::atframework::distributed_system::transaction_participator_storage >*
transaction_participator_snapshot::mutable_running_transaction() {
  // @@protoc_insertion_point(field_mutable_list:atframework.distributed_system.transaction_participator_snapshot.running_transaction)
  return &running_transaction_;
}
inline const ::atframework::distributed_system::transaction_participator_storage& transaction_participator_snapshot::_internal_running_transaction(int index) const {
  return running_transaction_.Get(index);
}
inline const ::atframework::distributed_system::transaction_participator_storage& transaction_participator_snapshot::running_transaction(int index) const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_participator_snapshot.running_transaction)
  return _internal_running_transaction(index);
}
inline ::atframework::distributed_system::transaction_participator_storage* transaction_participator_snapshot::_internal_add_running_transaction() {
  return running_transaction_.Add();
}
inline ::atframework::distributed_system::transaction_participator_storage* transaction_participator_snapshot::add_running_transaction() {
  ::atframework::distributed_system::transaction_participator_storage* _add = _internal_add_running_transaction();
  // @@protoc_insertion_point(field_add:atframework.distributed_system.transaction_participator_snapshot.running_transaction)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::atframework::distributed_system::transaction_participator_storage >&
transaction_participator_snapshot::running_transaction() const {
  // @@protoc_insertion_point(field_list:atframework.distributed_system.transaction_participator_snapshot.running_transaction)
  return running_transaction_;
}

// repeated .atframework.distributed_system.transaction_participator_storage finished_transaction = 3;
inline int transaction_participator_snapshot::_internal_finished_transaction_size() const {
  return finished_transaction_.size();
}
inline int transaction_participator_snapshot::finished_transaction_size() const {
  return _internal_finished_transaction_size();
}
inline void transaction_participator_snapshot::clear_finished_transaction() {
  finished_transaction_.Clear();
}
inline ::atframework::distributed_system::transaction_participator_storage* transaction_participator_snapshot::mutable_finished_transaction(int index) {
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.transaction_participator_snapshot.finished_transaction)
  return finished_transaction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::atframework::distributed_system::transaction_participator_storage >*
transaction_participator_snapshot::mutable_finished_transaction() {
  // @@protoc_insertion_point(field_mutable_list:atframework.distributed_system.transaction_participator_snapshot.finished_transaction)
  return &finished_transaction_;
}
inline const ::atframework::distributed_system::transaction_participator_storage& transaction_participator_snapshot::_internal_finished_transaction(int index) const {
  return finished_transaction_.Get(index);
}
inline const ::atframework::distributed_system::transaction_participator_storage& transaction_participator_snapshot::finished_transaction(int index) const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.transaction_participator_snapshot.finished_transaction)
  return _internal_finished_transaction(index);
}
inline ::atframework::distributed_system::transaction_participator_storage* transaction_participator_snapshot::_internal_add_finished_transaction() {
  return finished_transaction_.Add();
}
inline ::atframework::distributed_system::transaction_participator_storage* transaction_participator_snapshot::add_finished_transaction() {
  ::atframework::distributed_system::transaction_participator_storage* _add = _internal_add_finished_transaction();
  // @@protoc_insertion_point(field_add:atframework.distributed_system.transaction_participator_snapshot.finished_transaction)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::atframework::distributed_system::transaction_participator_storage >&
transaction_participator_snapshot::finished_transaction() const {
  // @@protoc_insertion_point(field_list:atframework.distributed_system.transaction_participator_snapshot.finished_transaction)
  return finished_transaction_;
}

// -------------------------------------------------------------------

// SSDistributeTransactionQueryReq

// .atframework.distributed_system.transaction_metadata metadata = 1;
inline bool SSDistributeTransactionQueryReq::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool SSDistributeTransactionQueryReq::has_metadata() const {
  return _internal_has_metadata();
}
inline void SSDistributeTransactionQueryReq::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::atframework::distributed_system::transaction_metadata& SSDistributeTransactionQueryReq::_internal_metadata() const {
  const ::atframework::distributed_system::transaction_metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframework::distributed_system::transaction_metadata&>(
      ::atframework::distributed_system::_transaction_metadata_default_instance_);
}
inline const ::atframework::distributed_system::transaction_metadata& SSDistributeTransactionQueryReq::metadata() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.SSDistributeTransactionQueryReq.metadata)
  return _internal_metadata();
}
inline void SSDistributeTransactionQueryReq::unsafe_arena_set_allocated_metadata(
    ::atframework::distributed_system::transaction_metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.SSDistributeTransactionQueryReq.metadata)
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionQueryReq::release_metadata() {
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionQueryReq::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.SSDistributeTransactionQueryReq.metadata)
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionQueryReq::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframework::distributed_system::transaction_metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionQueryReq::mutable_metadata() {
  ::atframework::distributed_system::transaction_metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.SSDistributeTransactionQueryReq.metadata)
  return _msg;
}
inline void SSDistributeTransactionQueryReq::set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframework::distributed_system::transaction_metadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.SSDistributeTransactionQueryReq.metadata)
}

// -------------------------------------------------------------------

// SSDistributeTransactionQueryRsp

// .atframework.distributed_system.transaction_blob_storage storage = 1;
inline bool SSDistributeTransactionQueryRsp::_internal_has_storage() const {
  return this != internal_default_instance() && storage_ != nullptr;
}
inline bool SSDistributeTransactionQueryRsp::has_storage() const {
  return _internal_has_storage();
}
inline void SSDistributeTransactionQueryRsp::clear_storage() {
  if (GetArenaForAllocation() == nullptr && storage_ != nullptr) {
    delete storage_;
  }
  storage_ = nullptr;
}
inline const ::atframework::distributed_system::transaction_blob_storage& SSDistributeTransactionQueryRsp::_internal_storage() const {
  const ::atframework::distributed_system::transaction_blob_storage* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframework::distributed_system::transaction_blob_storage&>(
      ::atframework::distributed_system::_transaction_blob_storage_default_instance_);
}
inline const ::atframework::distributed_system::transaction_blob_storage& SSDistributeTransactionQueryRsp::storage() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.SSDistributeTransactionQueryRsp.storage)
  return _internal_storage();
}
inline void SSDistributeTransactionQueryRsp::unsafe_arena_set_allocated_storage(
    ::atframework::distributed_system::transaction_blob_storage* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.SSDistributeTransactionQueryRsp.storage)
}
inline ::atframework::distributed_system::transaction_blob_storage* SSDistributeTransactionQueryRsp::release_storage() {
  
  ::atframework::distributed_system::transaction_blob_storage* temp = storage_;
  storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframework::distributed_system::transaction_blob_storage* SSDistributeTransactionQueryRsp::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.SSDistributeTransactionQueryRsp.storage)
  
  ::atframework::distributed_system::transaction_blob_storage* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::atframework::distributed_system::transaction_blob_storage* SSDistributeTransactionQueryRsp::_internal_mutable_storage() {
  
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframework::distributed_system::transaction_blob_storage>(GetArenaForAllocation());
    storage_ = p;
  }
  return storage_;
}
inline ::atframework::distributed_system::transaction_blob_storage* SSDistributeTransactionQueryRsp::mutable_storage() {
  ::atframework::distributed_system::transaction_blob_storage* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.SSDistributeTransactionQueryRsp.storage)
  return _msg;
}
inline void SSDistributeTransactionQueryRsp::set_allocated_storage(::atframework::distributed_system::transaction_blob_storage* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete storage_;
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframework::distributed_system::transaction_blob_storage>::GetOwningArena(storage);
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    
  } else {
    
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.SSDistributeTransactionQueryRsp.storage)
}

// -------------------------------------------------------------------

// SSDistributeTransactionCreateReq

// .atframework.distributed_system.transaction_blob_storage storage = 1;
inline bool SSDistributeTransactionCreateReq::_internal_has_storage() const {
  return this != internal_default_instance() && storage_ != nullptr;
}
inline bool SSDistributeTransactionCreateReq::has_storage() const {
  return _internal_has_storage();
}
inline void SSDistributeTransactionCreateReq::clear_storage() {
  if (GetArenaForAllocation() == nullptr && storage_ != nullptr) {
    delete storage_;
  }
  storage_ = nullptr;
}
inline const ::atframework::distributed_system::transaction_blob_storage& SSDistributeTransactionCreateReq::_internal_storage() const {
  const ::atframework::distributed_system::transaction_blob_storage* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframework::distributed_system::transaction_blob_storage&>(
      ::atframework::distributed_system::_transaction_blob_storage_default_instance_);
}
inline const ::atframework::distributed_system::transaction_blob_storage& SSDistributeTransactionCreateReq::storage() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.SSDistributeTransactionCreateReq.storage)
  return _internal_storage();
}
inline void SSDistributeTransactionCreateReq::unsafe_arena_set_allocated_storage(
    ::atframework::distributed_system::transaction_blob_storage* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.SSDistributeTransactionCreateReq.storage)
}
inline ::atframework::distributed_system::transaction_blob_storage* SSDistributeTransactionCreateReq::release_storage() {
  
  ::atframework::distributed_system::transaction_blob_storage* temp = storage_;
  storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframework::distributed_system::transaction_blob_storage* SSDistributeTransactionCreateReq::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.SSDistributeTransactionCreateReq.storage)
  
  ::atframework::distributed_system::transaction_blob_storage* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::atframework::distributed_system::transaction_blob_storage* SSDistributeTransactionCreateReq::_internal_mutable_storage() {
  
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframework::distributed_system::transaction_blob_storage>(GetArenaForAllocation());
    storage_ = p;
  }
  return storage_;
}
inline ::atframework::distributed_system::transaction_blob_storage* SSDistributeTransactionCreateReq::mutable_storage() {
  ::atframework::distributed_system::transaction_blob_storage* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.SSDistributeTransactionCreateReq.storage)
  return _msg;
}
inline void SSDistributeTransactionCreateReq::set_allocated_storage(::atframework::distributed_system::transaction_blob_storage* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete storage_;
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframework::distributed_system::transaction_blob_storage>::GetOwningArena(storage);
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    
  } else {
    
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.SSDistributeTransactionCreateReq.storage)
}

// -------------------------------------------------------------------

// SSDistributeTransactionCreateRsp

// -------------------------------------------------------------------

// SSDistributeTransactionCommitReq

// .atframework.distributed_system.transaction_metadata metadata = 1;
inline bool SSDistributeTransactionCommitReq::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool SSDistributeTransactionCommitReq::has_metadata() const {
  return _internal_has_metadata();
}
inline void SSDistributeTransactionCommitReq::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::atframework::distributed_system::transaction_metadata& SSDistributeTransactionCommitReq::_internal_metadata() const {
  const ::atframework::distributed_system::transaction_metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframework::distributed_system::transaction_metadata&>(
      ::atframework::distributed_system::_transaction_metadata_default_instance_);
}
inline const ::atframework::distributed_system::transaction_metadata& SSDistributeTransactionCommitReq::metadata() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.SSDistributeTransactionCommitReq.metadata)
  return _internal_metadata();
}
inline void SSDistributeTransactionCommitReq::unsafe_arena_set_allocated_metadata(
    ::atframework::distributed_system::transaction_metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.SSDistributeTransactionCommitReq.metadata)
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionCommitReq::release_metadata() {
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionCommitReq::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.SSDistributeTransactionCommitReq.metadata)
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionCommitReq::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframework::distributed_system::transaction_metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionCommitReq::mutable_metadata() {
  ::atframework::distributed_system::transaction_metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.SSDistributeTransactionCommitReq.metadata)
  return _msg;
}
inline void SSDistributeTransactionCommitReq::set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframework::distributed_system::transaction_metadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.SSDistributeTransactionCommitReq.metadata)
}

// -------------------------------------------------------------------

// SSDistributeTransactionCommitRsp

// .atframework.distributed_system.transaction_metadata metadata = 1;
inline bool SSDistributeTransactionCommitRsp::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool SSDistributeTransactionCommitRsp::has_metadata() const {
  return _internal_has_metadata();
}
inline void SSDistributeTransactionCommitRsp::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::atframework::distributed_system::transaction_metadata& SSDistributeTransactionCommitRsp::_internal_metadata() const {
  const ::atframework::distributed_system::transaction_metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframework::distributed_system::transaction_metadata&>(
      ::atframework::distributed_system::_transaction_metadata_default_instance_);
}
inline const ::atframework::distributed_system::transaction_metadata& SSDistributeTransactionCommitRsp::metadata() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.SSDistributeTransactionCommitRsp.metadata)
  return _internal_metadata();
}
inline void SSDistributeTransactionCommitRsp::unsafe_arena_set_allocated_metadata(
    ::atframework::distributed_system::transaction_metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.SSDistributeTransactionCommitRsp.metadata)
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionCommitRsp::release_metadata() {
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionCommitRsp::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.SSDistributeTransactionCommitRsp.metadata)
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionCommitRsp::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframework::distributed_system::transaction_metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionCommitRsp::mutable_metadata() {
  ::atframework::distributed_system::transaction_metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.SSDistributeTransactionCommitRsp.metadata)
  return _msg;
}
inline void SSDistributeTransactionCommitRsp::set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframework::distributed_system::transaction_metadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.SSDistributeTransactionCommitRsp.metadata)
}

// -------------------------------------------------------------------

// SSDistributeTransactionRejectReq

// .atframework.distributed_system.transaction_metadata metadata = 1;
inline bool SSDistributeTransactionRejectReq::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool SSDistributeTransactionRejectReq::has_metadata() const {
  return _internal_has_metadata();
}
inline void SSDistributeTransactionRejectReq::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::atframework::distributed_system::transaction_metadata& SSDistributeTransactionRejectReq::_internal_metadata() const {
  const ::atframework::distributed_system::transaction_metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframework::distributed_system::transaction_metadata&>(
      ::atframework::distributed_system::_transaction_metadata_default_instance_);
}
inline const ::atframework::distributed_system::transaction_metadata& SSDistributeTransactionRejectReq::metadata() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.SSDistributeTransactionRejectReq.metadata)
  return _internal_metadata();
}
inline void SSDistributeTransactionRejectReq::unsafe_arena_set_allocated_metadata(
    ::atframework::distributed_system::transaction_metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.SSDistributeTransactionRejectReq.metadata)
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionRejectReq::release_metadata() {
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionRejectReq::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.SSDistributeTransactionRejectReq.metadata)
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionRejectReq::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframework::distributed_system::transaction_metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionRejectReq::mutable_metadata() {
  ::atframework::distributed_system::transaction_metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.SSDistributeTransactionRejectReq.metadata)
  return _msg;
}
inline void SSDistributeTransactionRejectReq::set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframework::distributed_system::transaction_metadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.SSDistributeTransactionRejectReq.metadata)
}

// -------------------------------------------------------------------

// SSDistributeTransactionRejectRsp

// .atframework.distributed_system.transaction_metadata metadata = 1;
inline bool SSDistributeTransactionRejectRsp::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool SSDistributeTransactionRejectRsp::has_metadata() const {
  return _internal_has_metadata();
}
inline void SSDistributeTransactionRejectRsp::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::atframework::distributed_system::transaction_metadata& SSDistributeTransactionRejectRsp::_internal_metadata() const {
  const ::atframework::distributed_system::transaction_metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframework::distributed_system::transaction_metadata&>(
      ::atframework::distributed_system::_transaction_metadata_default_instance_);
}
inline const ::atframework::distributed_system::transaction_metadata& SSDistributeTransactionRejectRsp::metadata() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.SSDistributeTransactionRejectRsp.metadata)
  return _internal_metadata();
}
inline void SSDistributeTransactionRejectRsp::unsafe_arena_set_allocated_metadata(
    ::atframework::distributed_system::transaction_metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.SSDistributeTransactionRejectRsp.metadata)
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionRejectRsp::release_metadata() {
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionRejectRsp::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.SSDistributeTransactionRejectRsp.metadata)
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionRejectRsp::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframework::distributed_system::transaction_metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionRejectRsp::mutable_metadata() {
  ::atframework::distributed_system::transaction_metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.SSDistributeTransactionRejectRsp.metadata)
  return _msg;
}
inline void SSDistributeTransactionRejectRsp::set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframework::distributed_system::transaction_metadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.SSDistributeTransactionRejectRsp.metadata)
}

// -------------------------------------------------------------------

// SSDistributeTransactionCommitParticipatorReq

// .atframework.distributed_system.transaction_metadata metadata = 1;
inline bool SSDistributeTransactionCommitParticipatorReq::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool SSDistributeTransactionCommitParticipatorReq::has_metadata() const {
  return _internal_has_metadata();
}
inline void SSDistributeTransactionCommitParticipatorReq::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::atframework::distributed_system::transaction_metadata& SSDistributeTransactionCommitParticipatorReq::_internal_metadata() const {
  const ::atframework::distributed_system::transaction_metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframework::distributed_system::transaction_metadata&>(
      ::atframework::distributed_system::_transaction_metadata_default_instance_);
}
inline const ::atframework::distributed_system::transaction_metadata& SSDistributeTransactionCommitParticipatorReq::metadata() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq.metadata)
  return _internal_metadata();
}
inline void SSDistributeTransactionCommitParticipatorReq::unsafe_arena_set_allocated_metadata(
    ::atframework::distributed_system::transaction_metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq.metadata)
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionCommitParticipatorReq::release_metadata() {
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionCommitParticipatorReq::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq.metadata)
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionCommitParticipatorReq::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframework::distributed_system::transaction_metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionCommitParticipatorReq::mutable_metadata() {
  ::atframework::distributed_system::transaction_metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq.metadata)
  return _msg;
}
inline void SSDistributeTransactionCommitParticipatorReq::set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframework::distributed_system::transaction_metadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq.metadata)
}

// string participator_key = 2;
inline void SSDistributeTransactionCommitParticipatorReq::clear_participator_key() {
  participator_key_.ClearToEmpty();
}
inline const std::string& SSDistributeTransactionCommitParticipatorReq::participator_key() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq.participator_key)
  return _internal_participator_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SSDistributeTransactionCommitParticipatorReq::set_participator_key(ArgT0&& arg0, ArgT... args) {
 
 participator_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq.participator_key)
}
inline std::string* SSDistributeTransactionCommitParticipatorReq::mutable_participator_key() {
  std::string* _s = _internal_mutable_participator_key();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq.participator_key)
  return _s;
}
inline const std::string& SSDistributeTransactionCommitParticipatorReq::_internal_participator_key() const {
  return participator_key_.Get();
}
inline void SSDistributeTransactionCommitParticipatorReq::_internal_set_participator_key(const std::string& value) {
  
  participator_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SSDistributeTransactionCommitParticipatorReq::_internal_mutable_participator_key() {
  
  return participator_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SSDistributeTransactionCommitParticipatorReq::release_participator_key() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq.participator_key)
  return participator_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SSDistributeTransactionCommitParticipatorReq::set_allocated_participator_key(std::string* participator_key) {
  if (participator_key != nullptr) {
    
  } else {
    
  }
  participator_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), participator_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (participator_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    participator_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.SSDistributeTransactionCommitParticipatorReq.participator_key)
}

// -------------------------------------------------------------------

// SSDistributeTransactionCommitParticipatorRsp

// .atframework.distributed_system.transaction_metadata metadata = 1;
inline bool SSDistributeTransactionCommitParticipatorRsp::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool SSDistributeTransactionCommitParticipatorRsp::has_metadata() const {
  return _internal_has_metadata();
}
inline void SSDistributeTransactionCommitParticipatorRsp::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::atframework::distributed_system::transaction_metadata& SSDistributeTransactionCommitParticipatorRsp::_internal_metadata() const {
  const ::atframework::distributed_system::transaction_metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframework::distributed_system::transaction_metadata&>(
      ::atframework::distributed_system::_transaction_metadata_default_instance_);
}
inline const ::atframework::distributed_system::transaction_metadata& SSDistributeTransactionCommitParticipatorRsp::metadata() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.SSDistributeTransactionCommitParticipatorRsp.metadata)
  return _internal_metadata();
}
inline void SSDistributeTransactionCommitParticipatorRsp::unsafe_arena_set_allocated_metadata(
    ::atframework::distributed_system::transaction_metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.SSDistributeTransactionCommitParticipatorRsp.metadata)
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionCommitParticipatorRsp::release_metadata() {
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionCommitParticipatorRsp::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.SSDistributeTransactionCommitParticipatorRsp.metadata)
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionCommitParticipatorRsp::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframework::distributed_system::transaction_metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionCommitParticipatorRsp::mutable_metadata() {
  ::atframework::distributed_system::transaction_metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.SSDistributeTransactionCommitParticipatorRsp.metadata)
  return _msg;
}
inline void SSDistributeTransactionCommitParticipatorRsp::set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframework::distributed_system::transaction_metadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.SSDistributeTransactionCommitParticipatorRsp.metadata)
}

// -------------------------------------------------------------------

// SSDistributeTransactionRejectParticipatorReq

// .atframework.distributed_system.transaction_metadata metadata = 1;
inline bool SSDistributeTransactionRejectParticipatorReq::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool SSDistributeTransactionRejectParticipatorReq::has_metadata() const {
  return _internal_has_metadata();
}
inline void SSDistributeTransactionRejectParticipatorReq::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::atframework::distributed_system::transaction_metadata& SSDistributeTransactionRejectParticipatorReq::_internal_metadata() const {
  const ::atframework::distributed_system::transaction_metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframework::distributed_system::transaction_metadata&>(
      ::atframework::distributed_system::_transaction_metadata_default_instance_);
}
inline const ::atframework::distributed_system::transaction_metadata& SSDistributeTransactionRejectParticipatorReq::metadata() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq.metadata)
  return _internal_metadata();
}
inline void SSDistributeTransactionRejectParticipatorReq::unsafe_arena_set_allocated_metadata(
    ::atframework::distributed_system::transaction_metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq.metadata)
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionRejectParticipatorReq::release_metadata() {
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionRejectParticipatorReq::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq.metadata)
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionRejectParticipatorReq::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframework::distributed_system::transaction_metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionRejectParticipatorReq::mutable_metadata() {
  ::atframework::distributed_system::transaction_metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq.metadata)
  return _msg;
}
inline void SSDistributeTransactionRejectParticipatorReq::set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframework::distributed_system::transaction_metadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq.metadata)
}

// string participator_key = 2;
inline void SSDistributeTransactionRejectParticipatorReq::clear_participator_key() {
  participator_key_.ClearToEmpty();
}
inline const std::string& SSDistributeTransactionRejectParticipatorReq::participator_key() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq.participator_key)
  return _internal_participator_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SSDistributeTransactionRejectParticipatorReq::set_participator_key(ArgT0&& arg0, ArgT... args) {
 
 participator_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq.participator_key)
}
inline std::string* SSDistributeTransactionRejectParticipatorReq::mutable_participator_key() {
  std::string* _s = _internal_mutable_participator_key();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq.participator_key)
  return _s;
}
inline const std::string& SSDistributeTransactionRejectParticipatorReq::_internal_participator_key() const {
  return participator_key_.Get();
}
inline void SSDistributeTransactionRejectParticipatorReq::_internal_set_participator_key(const std::string& value) {
  
  participator_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SSDistributeTransactionRejectParticipatorReq::_internal_mutable_participator_key() {
  
  return participator_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SSDistributeTransactionRejectParticipatorReq::release_participator_key() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq.participator_key)
  return participator_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SSDistributeTransactionRejectParticipatorReq::set_allocated_participator_key(std::string* participator_key) {
  if (participator_key != nullptr) {
    
  } else {
    
  }
  participator_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), participator_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (participator_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    participator_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.SSDistributeTransactionRejectParticipatorReq.participator_key)
}

// -------------------------------------------------------------------

// SSDistributeTransactionRejectParticipatorRsp

// .atframework.distributed_system.transaction_metadata metadata = 1;
inline bool SSDistributeTransactionRejectParticipatorRsp::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool SSDistributeTransactionRejectParticipatorRsp::has_metadata() const {
  return _internal_has_metadata();
}
inline void SSDistributeTransactionRejectParticipatorRsp::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::atframework::distributed_system::transaction_metadata& SSDistributeTransactionRejectParticipatorRsp::_internal_metadata() const {
  const ::atframework::distributed_system::transaction_metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframework::distributed_system::transaction_metadata&>(
      ::atframework::distributed_system::_transaction_metadata_default_instance_);
}
inline const ::atframework::distributed_system::transaction_metadata& SSDistributeTransactionRejectParticipatorRsp::metadata() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.SSDistributeTransactionRejectParticipatorRsp.metadata)
  return _internal_metadata();
}
inline void SSDistributeTransactionRejectParticipatorRsp::unsafe_arena_set_allocated_metadata(
    ::atframework::distributed_system::transaction_metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.SSDistributeTransactionRejectParticipatorRsp.metadata)
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionRejectParticipatorRsp::release_metadata() {
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionRejectParticipatorRsp::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.SSDistributeTransactionRejectParticipatorRsp.metadata)
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionRejectParticipatorRsp::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframework::distributed_system::transaction_metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionRejectParticipatorRsp::mutable_metadata() {
  ::atframework::distributed_system::transaction_metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.SSDistributeTransactionRejectParticipatorRsp.metadata)
  return _msg;
}
inline void SSDistributeTransactionRejectParticipatorRsp::set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframework::distributed_system::transaction_metadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.SSDistributeTransactionRejectParticipatorRsp.metadata)
}

// -------------------------------------------------------------------

// SSDistributeTransactionRemoveReq

// .atframework.distributed_system.transaction_metadata metadata = 1;
inline bool SSDistributeTransactionRemoveReq::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool SSDistributeTransactionRemoveReq::has_metadata() const {
  return _internal_has_metadata();
}
inline void SSDistributeTransactionRemoveReq::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::atframework::distributed_system::transaction_metadata& SSDistributeTransactionRemoveReq::_internal_metadata() const {
  const ::atframework::distributed_system::transaction_metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframework::distributed_system::transaction_metadata&>(
      ::atframework::distributed_system::_transaction_metadata_default_instance_);
}
inline const ::atframework::distributed_system::transaction_metadata& SSDistributeTransactionRemoveReq::metadata() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.SSDistributeTransactionRemoveReq.metadata)
  return _internal_metadata();
}
inline void SSDistributeTransactionRemoveReq::unsafe_arena_set_allocated_metadata(
    ::atframework::distributed_system::transaction_metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.SSDistributeTransactionRemoveReq.metadata)
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionRemoveReq::release_metadata() {
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionRemoveReq::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.SSDistributeTransactionRemoveReq.metadata)
  
  ::atframework::distributed_system::transaction_metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionRemoveReq::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframework::distributed_system::transaction_metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::atframework::distributed_system::transaction_metadata* SSDistributeTransactionRemoveReq::mutable_metadata() {
  ::atframework::distributed_system::transaction_metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.SSDistributeTransactionRemoveReq.metadata)
  return _msg;
}
inline void SSDistributeTransactionRemoveReq::set_allocated_metadata(::atframework::distributed_system::transaction_metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframework::distributed_system::transaction_metadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.SSDistributeTransactionRemoveReq.metadata)
}

// -------------------------------------------------------------------

// SSDistributeTransactionRemoveRsp

// -------------------------------------------------------------------

// SSParticipatorTransactionPrepareReq

// .atframework.distributed_system.transaction_participator_storage storage = 1;
inline bool SSParticipatorTransactionPrepareReq::_internal_has_storage() const {
  return this != internal_default_instance() && storage_ != nullptr;
}
inline bool SSParticipatorTransactionPrepareReq::has_storage() const {
  return _internal_has_storage();
}
inline void SSParticipatorTransactionPrepareReq::clear_storage() {
  if (GetArenaForAllocation() == nullptr && storage_ != nullptr) {
    delete storage_;
  }
  storage_ = nullptr;
}
inline const ::atframework::distributed_system::transaction_participator_storage& SSParticipatorTransactionPrepareReq::_internal_storage() const {
  const ::atframework::distributed_system::transaction_participator_storage* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframework::distributed_system::transaction_participator_storage&>(
      ::atframework::distributed_system::_transaction_participator_storage_default_instance_);
}
inline const ::atframework::distributed_system::transaction_participator_storage& SSParticipatorTransactionPrepareReq::storage() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.SSParticipatorTransactionPrepareReq.storage)
  return _internal_storage();
}
inline void SSParticipatorTransactionPrepareReq::unsafe_arena_set_allocated_storage(
    ::atframework::distributed_system::transaction_participator_storage* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.SSParticipatorTransactionPrepareReq.storage)
}
inline ::atframework::distributed_system::transaction_participator_storage* SSParticipatorTransactionPrepareReq::release_storage() {
  
  ::atframework::distributed_system::transaction_participator_storage* temp = storage_;
  storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframework::distributed_system::transaction_participator_storage* SSParticipatorTransactionPrepareReq::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.SSParticipatorTransactionPrepareReq.storage)
  
  ::atframework::distributed_system::transaction_participator_storage* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::atframework::distributed_system::transaction_participator_storage* SSParticipatorTransactionPrepareReq::_internal_mutable_storage() {
  
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframework::distributed_system::transaction_participator_storage>(GetArenaForAllocation());
    storage_ = p;
  }
  return storage_;
}
inline ::atframework::distributed_system::transaction_participator_storage* SSParticipatorTransactionPrepareReq::mutable_storage() {
  ::atframework::distributed_system::transaction_participator_storage* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.SSParticipatorTransactionPrepareReq.storage)
  return _msg;
}
inline void SSParticipatorTransactionPrepareReq::set_allocated_storage(::atframework::distributed_system::transaction_participator_storage* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete storage_;
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframework::distributed_system::transaction_participator_storage>::GetOwningArena(storage);
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    
  } else {
    
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.SSParticipatorTransactionPrepareReq.storage)
}

// -------------------------------------------------------------------

// SSParticipatorTransactionPrepareRsp

// .atframework.distributed_system.transaction_participator_failure_reason reason = 1;
inline bool SSParticipatorTransactionPrepareRsp::_internal_has_reason() const {
  return this != internal_default_instance() && reason_ != nullptr;
}
inline bool SSParticipatorTransactionPrepareRsp::has_reason() const {
  return _internal_has_reason();
}
inline void SSParticipatorTransactionPrepareRsp::clear_reason() {
  if (GetArenaForAllocation() == nullptr && reason_ != nullptr) {
    delete reason_;
  }
  reason_ = nullptr;
}
inline const ::atframework::distributed_system::transaction_participator_failure_reason& SSParticipatorTransactionPrepareRsp::_internal_reason() const {
  const ::atframework::distributed_system::transaction_participator_failure_reason* p = reason_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframework::distributed_system::transaction_participator_failure_reason&>(
      ::atframework::distributed_system::_transaction_participator_failure_reason_default_instance_);
}
inline const ::atframework::distributed_system::transaction_participator_failure_reason& SSParticipatorTransactionPrepareRsp::reason() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.SSParticipatorTransactionPrepareRsp.reason)
  return _internal_reason();
}
inline void SSParticipatorTransactionPrepareRsp::unsafe_arena_set_allocated_reason(
    ::atframework::distributed_system::transaction_participator_failure_reason* reason) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reason_);
  }
  reason_ = reason;
  if (reason) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.SSParticipatorTransactionPrepareRsp.reason)
}
inline ::atframework::distributed_system::transaction_participator_failure_reason* SSParticipatorTransactionPrepareRsp::release_reason() {
  
  ::atframework::distributed_system::transaction_participator_failure_reason* temp = reason_;
  reason_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframework::distributed_system::transaction_participator_failure_reason* SSParticipatorTransactionPrepareRsp::unsafe_arena_release_reason() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.SSParticipatorTransactionPrepareRsp.reason)
  
  ::atframework::distributed_system::transaction_participator_failure_reason* temp = reason_;
  reason_ = nullptr;
  return temp;
}
inline ::atframework::distributed_system::transaction_participator_failure_reason* SSParticipatorTransactionPrepareRsp::_internal_mutable_reason() {
  
  if (reason_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframework::distributed_system::transaction_participator_failure_reason>(GetArenaForAllocation());
    reason_ = p;
  }
  return reason_;
}
inline ::atframework::distributed_system::transaction_participator_failure_reason* SSParticipatorTransactionPrepareRsp::mutable_reason() {
  ::atframework::distributed_system::transaction_participator_failure_reason* _msg = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.SSParticipatorTransactionPrepareRsp.reason)
  return _msg;
}
inline void SSParticipatorTransactionPrepareRsp::set_allocated_reason(::atframework::distributed_system::transaction_participator_failure_reason* reason) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reason_;
  }
  if (reason) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframework::distributed_system::transaction_participator_failure_reason>::GetOwningArena(reason);
    if (message_arena != submessage_arena) {
      reason = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reason, submessage_arena);
    }
    
  } else {
    
  }
  reason_ = reason;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.SSParticipatorTransactionPrepareRsp.reason)
}

// -------------------------------------------------------------------

// SSParticipatorTransactionCommitReq

// bytes transaction_uuid = 1;
inline void SSParticipatorTransactionCommitReq::clear_transaction_uuid() {
  transaction_uuid_.ClearToEmpty();
}
inline const std::string& SSParticipatorTransactionCommitReq::transaction_uuid() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.SSParticipatorTransactionCommitReq.transaction_uuid)
  return _internal_transaction_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SSParticipatorTransactionCommitReq::set_transaction_uuid(ArgT0&& arg0, ArgT... args) {
 
 transaction_uuid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:atframework.distributed_system.SSParticipatorTransactionCommitReq.transaction_uuid)
}
inline std::string* SSParticipatorTransactionCommitReq::mutable_transaction_uuid() {
  std::string* _s = _internal_mutable_transaction_uuid();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.SSParticipatorTransactionCommitReq.transaction_uuid)
  return _s;
}
inline const std::string& SSParticipatorTransactionCommitReq::_internal_transaction_uuid() const {
  return transaction_uuid_.Get();
}
inline void SSParticipatorTransactionCommitReq::_internal_set_transaction_uuid(const std::string& value) {
  
  transaction_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SSParticipatorTransactionCommitReq::_internal_mutable_transaction_uuid() {
  
  return transaction_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SSParticipatorTransactionCommitReq::release_transaction_uuid() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.SSParticipatorTransactionCommitReq.transaction_uuid)
  return transaction_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SSParticipatorTransactionCommitReq::set_allocated_transaction_uuid(std::string* transaction_uuid) {
  if (transaction_uuid != nullptr) {
    
  } else {
    
  }
  transaction_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_uuid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (transaction_uuid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    transaction_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.SSParticipatorTransactionCommitReq.transaction_uuid)
}

// -------------------------------------------------------------------

// SSParticipatorTransactionCommitRsp

// -------------------------------------------------------------------

// SSParticipatorTransactionRejectReq

// bytes transaction_uuid = 1;
inline void SSParticipatorTransactionRejectReq::clear_transaction_uuid() {
  transaction_uuid_.ClearToEmpty();
}
inline const std::string& SSParticipatorTransactionRejectReq::transaction_uuid() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.SSParticipatorTransactionRejectReq.transaction_uuid)
  return _internal_transaction_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SSParticipatorTransactionRejectReq::set_transaction_uuid(ArgT0&& arg0, ArgT... args) {
 
 transaction_uuid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:atframework.distributed_system.SSParticipatorTransactionRejectReq.transaction_uuid)
}
inline std::string* SSParticipatorTransactionRejectReq::mutable_transaction_uuid() {
  std::string* _s = _internal_mutable_transaction_uuid();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.SSParticipatorTransactionRejectReq.transaction_uuid)
  return _s;
}
inline const std::string& SSParticipatorTransactionRejectReq::_internal_transaction_uuid() const {
  return transaction_uuid_.Get();
}
inline void SSParticipatorTransactionRejectReq::_internal_set_transaction_uuid(const std::string& value) {
  
  transaction_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SSParticipatorTransactionRejectReq::_internal_mutable_transaction_uuid() {
  
  return transaction_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SSParticipatorTransactionRejectReq::release_transaction_uuid() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.SSParticipatorTransactionRejectReq.transaction_uuid)
  return transaction_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SSParticipatorTransactionRejectReq::set_allocated_transaction_uuid(std::string* transaction_uuid) {
  if (transaction_uuid != nullptr) {
    
  } else {
    
  }
  transaction_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_uuid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (transaction_uuid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    transaction_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.SSParticipatorTransactionRejectReq.transaction_uuid)
}

// .atframework.distributed_system.transaction_participator_storage storage = 2;
inline bool SSParticipatorTransactionRejectReq::_internal_has_storage() const {
  return this != internal_default_instance() && storage_ != nullptr;
}
inline bool SSParticipatorTransactionRejectReq::has_storage() const {
  return _internal_has_storage();
}
inline void SSParticipatorTransactionRejectReq::clear_storage() {
  if (GetArenaForAllocation() == nullptr && storage_ != nullptr) {
    delete storage_;
  }
  storage_ = nullptr;
}
inline const ::atframework::distributed_system::transaction_participator_storage& SSParticipatorTransactionRejectReq::_internal_storage() const {
  const ::atframework::distributed_system::transaction_participator_storage* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::atframework::distributed_system::transaction_participator_storage&>(
      ::atframework::distributed_system::_transaction_participator_storage_default_instance_);
}
inline const ::atframework::distributed_system::transaction_participator_storage& SSParticipatorTransactionRejectReq::storage() const {
  // @@protoc_insertion_point(field_get:atframework.distributed_system.SSParticipatorTransactionRejectReq.storage)
  return _internal_storage();
}
inline void SSParticipatorTransactionRejectReq::unsafe_arena_set_allocated_storage(
    ::atframework::distributed_system::transaction_participator_storage* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atframework.distributed_system.SSParticipatorTransactionRejectReq.storage)
}
inline ::atframework::distributed_system::transaction_participator_storage* SSParticipatorTransactionRejectReq::release_storage() {
  
  ::atframework::distributed_system::transaction_participator_storage* temp = storage_;
  storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atframework::distributed_system::transaction_participator_storage* SSParticipatorTransactionRejectReq::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:atframework.distributed_system.SSParticipatorTransactionRejectReq.storage)
  
  ::atframework::distributed_system::transaction_participator_storage* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::atframework::distributed_system::transaction_participator_storage* SSParticipatorTransactionRejectReq::_internal_mutable_storage() {
  
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::atframework::distributed_system::transaction_participator_storage>(GetArenaForAllocation());
    storage_ = p;
  }
  return storage_;
}
inline ::atframework::distributed_system::transaction_participator_storage* SSParticipatorTransactionRejectReq::mutable_storage() {
  ::atframework::distributed_system::transaction_participator_storage* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:atframework.distributed_system.SSParticipatorTransactionRejectReq.storage)
  return _msg;
}
inline void SSParticipatorTransactionRejectReq::set_allocated_storage(::atframework::distributed_system::transaction_participator_storage* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete storage_;
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::atframework::distributed_system::transaction_participator_storage>::GetOwningArena(storage);
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    
  } else {
    
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:atframework.distributed_system.SSParticipatorTransactionRejectReq.storage)
}

// -------------------------------------------------------------------

// SSParticipatorTransactionRejectRsp

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace distributed_system
}  // namespace atframework

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::atframework::distributed_system::EnDistibutedTransactionStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::atframework::distributed_system::EnDistibutedTransactionStatus>() {
  return ::atframework::distributed_system::EnDistibutedTransactionStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pbdesc_2fdistributed_5ftransaction_2eproto
