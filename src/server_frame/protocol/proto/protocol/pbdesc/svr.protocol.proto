syntax = "proto3";

option optimize_for = SPEED;
// option optimize_for = LITE_RUNTIME;
// option optimize_for = CODE_SIZE;
// --cpp_out=lite:,--cpp_out=
option cc_enable_arenas = true;
option cc_generic_services = true;

// 后台通信协议定义

import "google/protobuf/empty.proto";
import "protocol/pbdesc/atframework.proto";

import "protocol/pbdesc/com.struct.proto";
import "protocol/pbdesc/svr.struct.proto";

package hello;

/////////////////////////////////////////////////////
////  此处开始是登入相关协议
/////////////////////////////////////////////////////
message SSPlayerKickOffReq {
  uint32 reason = 1;     // 原因
  string gm_reason = 2;  // 原因
}

message SSPlayerKickOffRsp {}

message SSPlayerAsyncJobsSync {}

/////////////////////////////////////////////////////
////  登入相关协议到此结束
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
////  此处开始是外部接入支持的协议
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
////  外部接入支持的协议到此结束
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
////  此处开始是对象路由系统协议协议
/////////////////////////////////////////////////////
enum EnRouterObjectType {
  EN_ROT_INVALID = 0;
  EN_ROT_PLAYER = 1;
}

// 路由表更新通知
message SSRouterUpdateSync {
  atframework.SSRouterHead object = 1;
}

// 路由对象转移请求
message SSRouterTransferReq {
  atframework.SSRouterHead object = 1;
}
message SSRouterTransferRsp {}

/////////////////////////////////////////////////////
////  对象路由系统协议到此结束
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
////  此处开始是服务器公共协议
/////////////////////////////////////////////////////
message SSGlobalLogicSetServerTimeSync {
  int64 global_now_offset = 1;
}
/////////////////////////////////////////////////////
////  服务器公共协议到此结束
/////////////////////////////////////////////////////

service RouterService {
  option (atframework.service_options) = {
    module_name: "router"
  };

  // Use stream request to disable waiting for response
  rpc router_update_sync(stream SSRouterUpdateSync) returns (google.protobuf.Empty) {
    option (atframework.rpc_options) = {
      api_name: "通知路由表更新"
      descriptions: "notify another server instance to update router table"
    };
  };

  rpc router_transfer(SSRouterTransferReq) returns (SSRouterTransferRsp) {
    option (atframework.rpc_options) = {
      api_name: "路由对象转移"
      descriptions: "transfer a router object into another server instance"
    };
  };
}

service LogicCommonService {
  option (atframework.service_options) = {
    module_name: "logic"
  };

  rpc set_server_time(stream SSGlobalLogicSetServerTimeSync) returns (google.protobuf.Empty) {
    option (atframework.rpc_options) = {
      api_name: "设置服务器逻辑时间偏移"
      descriptions: "set server time offset"
      allow_no_wait: true
    };
  };
}

service GamesvrService {
  option (atframework.service_options) = {
    module_name: "game"
  };

  rpc player_kickoff(SSPlayerKickOffReq) returns (SSPlayerKickOffRsp) {
    option (atframework.rpc_options) = {
      module_name: "player"
      api_name: "通知提用户下线"
      user_rpc: true
    };
  };

  rpc player_async_jobs_sync(stream SSPlayerAsyncJobsSync) returns (google.protobuf.Empty) {
    option (atframework.rpc_options) = {
      module_name: "player"
      api_name: "通知更新和执行异步任务"
      descriptions: "notify another server instance to sync async jobs"
      user_rpc: true
    };
  };
}
