unset(PROJECT_SERVER_FRAME_PUBLIC_LINK_NAMES)
unset(PROJECT_SERVER_FRAME_PUBLIC_INCLUDE_DIRS)
unset(PROJECT_SERVER_FRAME_PUBLIC_COMPILE_OPTIONS)

list(APPEND PROJECT_SERVER_FRAME_PUBLIC_INCLUDE_DIRS ${PROJECT_SERVER_FRAME_INC_DIR})

# build libserver_frame.so
file(
  GLOB_RECURSE
  SRC_LIST_ORIGIN
  ${PROJECT_SERVER_FRAME_SRC_DIR}/*.h
  ${PROJECT_SERVER_FRAME_SRC_DIR}/*.hpp
  ${PROJECT_SERVER_FRAME_SRC_DIR}/*.c
  ${PROJECT_SERVER_FRAME_SRC_DIR}/*.cpp
  ${PROJECT_SERVER_FRAME_SRC_DIR}/*.cc)

file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/skip-glob-sources.txt" "")
foreach(SRC_FILE_REALPATH IN LISTS SRC_LIST_ORIGIN)
  get_filename_component(SRC_DIRPATH_REALPATH ${SRC_FILE_REALPATH} DIRECTORY)
  if(SRC_FILE_REALPATH MATCHES "^${PROJECT_SERVER_FRAME_SRC_DIR}[/\\\\]config[/\\\\]")
    file(APPEND "${CMAKE_CURRENT_BINARY_DIR}/skip-glob-sources.txt" "${SRC_FILE_REALPATH}\r\n")
    continue()
  endif()
  if(SRC_FILE_REALPATH MATCHES "^${PROJECT_SERVER_FRAME_SRC_DIR}[/\\\\]protocol[/\\\\].*")
    file(APPEND "${CMAKE_CURRENT_BINARY_DIR}/skip-glob-sources.txt" "${SRC_FILE_REALPATH}\r\n")
    continue()
  endif()

  list(APPEND SRC_LIST ${SRC_FILE_REALPATH})
endforeach()
unset(SRC_FILE_REALPATH)
unset(SRC_DIRPATH_REALPATH)

# add generated files
include("${PROJECT_SERVER_FRAME_BAS_DIR}/generate_proto_source.cmake")
include("${PROJECT_SERVER_FRAME_BAS_DIR}/generate_config_codes.cmake")
list(REMOVE_DUPLICATES SRC_LIST)

source_group_by_dir(SRC_LIST)

list(APPEND PROJECT_SERVER_FRAME_PUBLIC_LINK_NAMES ${ATFRAMEWORK_SERVICE_GATEWAY_LINK_NAME}
     ${ATFRAMEWORK_SERVICE_COMPONENT_LINK_NAME})

set(THREADS_PREFER_PTHREAD_FLAG TRUE)
find_package(Threads)
if(TARGET Threads::Threads)
  list(APPEND PROJECT_SERVER_FRAME_PUBLIC_LINK_NAMES Threads::Threads)
elseif(CMAKE_USE_PTHREADS_INIT OR ATFRAMEWORK_CMAKE_TOOLSET_TEST_FLAG_PTHREAD)
  list(APPEND PROJECT_SERVER_FRAME_PUBLIC_COMPILE_OPTIONS "-pthread")
endif()

if(NOT CMAKE_SYSTEM_NAME MATCHES "Windows|MinGW|WindowsStore" AND (BUILD_SHARED_LIBS OR ATFRAMEWORK_USE_DYNAMIC_LIBRARY
                                                                  ))
  add_library(${PROJECT_SERVER_FRAME_LIB_LINK} SHARED ${SRC_LIST})
  set_target_properties(${PROJECT_SERVER_FRAME_LIB_LINK} PROPERTIES VERSION "${PROJECT_VERSION}" SOVERSION
                                                                                                 "${PROJECT_VERSION}")

  project_tool_split_target_debug_sybmol(${PROJECT_SERVER_FRAME_LIB_LINK})
else()
  add_library(${PROJECT_SERVER_FRAME_LIB_LINK} STATIC ${SRC_LIST})
  set_target_properties(${PROJECT_SERVER_FRAME_LIB_LINK} PROPERTIES VERSION "${PROJECT_VERSION}")
endif()

add_dependencies(${PROJECT_SERVER_FRAME_LIB_LINK} protocol config-loader)
target_link_libraries(
  ${PROJECT_SERVER_FRAME_LIB_LINK}
  INTERFACE ${PROJECT_SERVER_FRAME_LIB_LINK}-config
  PUBLIC ${PROJECT_SERVER_FRAME_PUBLIC_LINK_NAMES})

target_include_directories(
  ${PROJECT_SERVER_FRAME_LIB_LINK}
  PUBLIC "$<BUILD_INTERFACE:${PROJECT_SERVER_FRAME_PUBLIC_INCLUDE_DIRS}>"
         "$<BUILD_INTERFACE:${PROJECT_SERVER_FRAME_PROTOCOL_DIR}/include>"
         "$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/_generated/config/include>"
         "$<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/config/include>"
         "$<INSTALL_INTERFACE:include>")

target_compile_options(${PROJECT_SERVER_FRAME_LIB_LINK} PRIVATE ${PROJECT_COMMON_PRIVATE_COMPILE_OPTIONS})
if(PROJECT_COMMON_PRIVATE_LINK_OPTIONS)
  target_link_options(${PROJECT_SERVER_FRAME_LIB_LINK} PRIVATE ${PROJECT_COMMON_PRIVATE_LINK_OPTIONS})
endif()

if(PROJECT_SERVER_FRAME_PUBLIC_COMPILE_OPTIONS)
  target_compile_options(${PROJECT_SERVER_FRAME_LIB_LINK} PUBLIC ${PROJECT_SERVER_FRAME_PUBLIC_COMPILE_OPTIONS})
endif()

if(MSVC)
  set_property(TARGET ${PROJECT_SERVER_FRAME_LIB_LINK} PROPERTY FOLDER "${PROJECT_NAME}")
endif()

project_install_and_export_targets(${PROJECT_SERVER_FRAME_LIB_LINK})
