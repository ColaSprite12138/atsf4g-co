# Python3_EXECUTABLE
# PROJECT_THIRD_PARTY_XRESCODE_GENERATOR_PY
unset(PROJECT_SERVER_FRAME_CONFIG_SRC_LIST)

execute_process(
  COMMAND
    "${ATFRAMEWORK_CMAKE_TOOLSET_THIRD_PARTY_PROTOBUF_BIN_PROTOC}" --proto_path
    "${PROJECT_SERVER_FRAME_PROTO_SANDBOX_COMMON_DIR}" --proto_path "${PROJECT_SERVER_FRAME_PROTO_SANDBOX_CONFIG_DIR}"
    --proto_path "${PROJECT_THIRD_PARTY_INSTALL_DIR}/include" --proto_path "${ATFRAMEWORK_LIBATBUS_REPO_DIR}/include"
    --proto_path "${ATFRAMEWORK_LIBATAPP_REPO_DIR}/include" -o "${CMAKE_CURRENT_BINARY_DIR}/config-test.pb"
    # Protocol buffer files
    ${PROJECT_SERVER_FRAME_PROTO_SANDBOX_LIST_COMMON} ${PROJECT_SERVER_FRAME_PROTO_SANDBOX_LIST_CONFIG}
    "${ATFRAMEWORK_LIBATAPP_REPO_DIR}/include/atframe/atapp_conf.proto"
    "${ATFRAMEWORK_LIBATBUS_REPO_DIR}/include/libatbus_protocol.proto"
    "${PROJECT_THIRD_PARTY_INSTALL_DIR}/include/google/protobuf/any.proto"
    "${PROJECT_THIRD_PARTY_INSTALL_DIR}/include/google/protobuf/duration.proto"
    "${PROJECT_THIRD_PARTY_INSTALL_DIR}/include/google/protobuf/timestamp.proto"
    "${PROJECT_THIRD_PARTY_INSTALL_DIR}/include/google/protobuf/descriptor.proto"
  RESULT_VARIABLE PROJECT_SERVER_FRAME_CONFIG_SET_RES
  ERROR_VARIABLE PROJECT_SERVER_FRAME_CONFIG_SET_ERR COMMAND_ECHO STDOUT)

if(NOT ${PROJECT_SERVER_FRAME_CONFIG_SET_RES} EQUAL 0)
  message(FATAL_ERROR "${PROJECT_SERVER_FRAME_CONFIG_SET_ERR}")
endif()

execute_process(
  COMMAND
    ${Python3_EXECUTABLE} ${PROJECT_THIRD_PARTY_XRESCODE_GENERATOR_PY} -i "${PROJECT_SOURCE_TEMPLATE_DIR}" -p
    "${CMAKE_CURRENT_BINARY_DIR}/config-test.pb" -o "${CMAKE_CURRENT_LIST_DIR}/config/excel" -g
    "${PROJECT_SOURCE_TEMPLATE_DIR}/config_manager.h.mako" -g "${PROJECT_SOURCE_TEMPLATE_DIR}/config_manager.cpp.mako"
    -l "H:${PROJECT_SOURCE_TEMPLATE_DIR}/config_set.h.mako" -l "S:${PROJECT_SOURCE_TEMPLATE_DIR}/config_set.cpp.mako" -g
    "${PROJECT_SOURCE_TEMPLATE_DIR}/config_easy_api.h.mako" -g "${PROJECT_SOURCE_TEMPLATE_DIR}/config_easy_api.cpp.mako"
    --pb-include-prefix "protocol/config/" --print-output-file
  OUTPUT_VARIABLE PROJECT_SERVER_FRAME_CONFIG_SET_SRC_LIST_STR
  RESULT_VARIABLE PROJECT_SERVER_FRAME_CONFIG_SET_RES
  ERROR_VARIABLE PROJECT_SERVER_FRAME_CONFIG_SET_ERR COMMAND_ECHO STDOUT)

if(NOT ${PROJECT_SERVER_FRAME_CONFIG_SET_RES} EQUAL 0)
  message(FATAL_ERROR "${PROJECT_SERVER_FRAME_CONFIG_SET_ERR}")
endif()
unset(PROJECT_SERVER_FRAME_CONFIG_SET_RES)
unset(PROJECT_SERVER_FRAME_CONFIG_SET_ERR)

unset(PROJECT_SERVER_FRAME_CONFIG_SET_SRC_LIST)
string(REPLACE "\\" "/" PROJECT_SERVER_FRAME_CONFIG_SET_SRC_LIST_STR "${PROJECT_SERVER_FRAME_CONFIG_SET_SRC_LIST_STR}")
string(REGEX MATCHALL "[^\r\n]+" PROJECT_SERVER_FRAME_CONFIG_SET_SRC_LIST
             ${PROJECT_SERVER_FRAME_CONFIG_SET_SRC_LIST_STR})

set(PROJECT_SERVER_FRAME_CONFIG_SET_GENERATED_SRC_DIR "${CMAKE_CURRENT_BINARY_DIR}/_generated/config/excel")
file(MAKE_DIRECTORY "${PROJECT_SERVER_FRAME_CONFIG_SET_GENERATED_SRC_DIR}")
unset(PROJECT_SERVER_FRAME_CONFIG_SET_GENERATED_SRC_LIST)
foreach(SRC_ITEM ${PROJECT_SERVER_FRAME_CONFIG_SET_SRC_LIST})
  get_filename_component(CONFIG_SET_SRC_BASENAME "${SRC_ITEM}" NAME)
  list(APPEND PROJECT_SERVER_FRAME_CONFIG_SET_GENERATED_SRC_LIST
       "${PROJECT_SERVER_FRAME_CONFIG_SET_GENERATED_SRC_DIR}/${CONFIG_SET_SRC_BASENAME}")
endforeach()

add_custom_command(
  OUTPUT ${PROJECT_SERVER_FRAME_CONFIG_SET_SRC_LIST}
  COMMAND
    ${Python3_EXECUTABLE} ${PROJECT_THIRD_PARTY_XRESCODE_GENERATOR_PY} -i "${PROJECT_SOURCE_TEMPLATE_DIR}" -p
    "${PROJECT_INSTALL_RES_PBD_DIR}/config.pb" -o "${PROJECT_SERVER_FRAME_CONFIG_SET_GENERATED_SRC_DIR}" -g
    "${PROJECT_SOURCE_TEMPLATE_DIR}/config_manager.h.mako" -g "${PROJECT_SOURCE_TEMPLATE_DIR}/config_manager.cpp.mako"
    -l "H:${PROJECT_SOURCE_TEMPLATE_DIR}/config_set.h.mako" -l "S:${PROJECT_SOURCE_TEMPLATE_DIR}/config_set.cpp.mako" -g
    "${PROJECT_SOURCE_TEMPLATE_DIR}/config_easy_api.h.mako" -g "${PROJECT_SOURCE_TEMPLATE_DIR}/config_easy_api.cpp.mako"
    -c "custom_config_group:custom_group_fields.h.mako" -c "custom_config_include:custom_include_fields.h.mako"
    --pb-include-prefix "protocol/config/"
  COMMAND "${CMAKE_COMMAND}" -E copy_if_different ${PROJECT_SERVER_FRAME_CONFIG_SET_GENERATED_SRC_LIST}
          "${CMAKE_CURRENT_LIST_DIR}/config/excel"
  DEPENDS "${PROJECT_INSTALL_RES_PBD_DIR}/config.pb"
          "${PROJECT_SOURCE_TEMPLATE_DIR}/config_manager.h.mako"
          "${PROJECT_SOURCE_TEMPLATE_DIR}/config_manager.cpp.mako"
          "${PROJECT_SOURCE_TEMPLATE_DIR}/custom_group_fields.h.mako"
          "${PROJECT_SOURCE_TEMPLATE_DIR}/custom_include_fields.h.mako"
          "${PROJECT_SOURCE_TEMPLATE_DIR}/config_set.h.mako"
          "${PROJECT_SOURCE_TEMPLATE_DIR}/config_set.cpp.mako"
          "${PROJECT_SOURCE_TEMPLATE_DIR}/config_easy_api.h.mako"
          "${PROJECT_SOURCE_TEMPLATE_DIR}/config_easy_api.cpp.mako"
  COMMENT "Generate ${PROJECT_SERVER_FRAME_CONFIG_SET_SRC_LIST}")

list(APPEND PROJECT_SERVER_FRAME_CONFIG_SRC_LIST ${PROJECT_SERVER_FRAME_CONFIG_SET_SRC_LIST})

add_custom_target(
  config-loader
  DEPENDS ${PROJECT_SERVER_FRAME_CONFIG_SET_SRC_LIST}
  SOURCES ${PROJECT_SERVER_FRAME_CONFIG_SET_SRC_LIST})
if(MSVC)
  set_property(TARGET "config-loader" PROPERTY FOLDER "${PROJECT_NAME}")
endif()

unset(PROJECT_SERVER_FRAME_CONFIG_SET_GENERATED_SRC_LIST)
unset(PROJECT_SERVER_FRAME_CONFIG_SET_GENERATED_SRC_DIR)

configure_file("${CMAKE_CURRENT_LIST_DIR}/config/server_frame_build_feature.h.in"
               "${CMAKE_CURRENT_LIST_DIR}/config/server_frame_build_feature.h" ESCAPE_QUOTES @ONLY)
configure_file("${CMAKE_CURRENT_LIST_DIR}/config/server_frame_build_feature.cpp.in"
               "${CMAKE_CURRENT_LIST_DIR}/config/server_frame_build_feature.cpp" ESCAPE_QUOTES @ONLY)
list(APPEND PROJECT_SERVER_FRAME_CONFIG_SRC_LIST "${CMAKE_CURRENT_LIST_DIR}/config/server_frame_build_feature.h"
     "${CMAKE_CURRENT_LIST_DIR}/config/server_frame_build_feature.cpp")

file(GLOB_RECURSE PROJECT_SERVER_FRAME_CONFIG_SRC_ORIGIN ${PROJECT_SERVER_FRAME_SRC_DIR}/config/*.h
     ${PROJECT_SERVER_FRAME_SRC_DIR}/config/*.cpp)

foreach(SRC_FILE_REALPATH IN LISTS PROJECT_SERVER_FRAME_CONFIG_SRC_ORIGIN)
  get_filename_component(SRC_DIRPATH_REALPATH ${SRC_FILE_REALPATH} DIRECTORY)
  if(SRC_FILE_REALPATH MATCHES "^${PROJECT_SERVER_FRAME_SRC_DIR}[/\\\\]config[/\\\\]server_frame_build_feature.(h|cpp)")
    continue()
  endif()
  if(SRC_FILE_REALPATH MATCHES "^${PROJECT_SERVER_FRAME_SRC_DIR}[/\\\\]config[/\\\\]excel[/\\\\]")
    continue()
  endif()
  list(APPEND PROJECT_SERVER_FRAME_CONFIG_SRC_LIST ${SRC_FILE_REALPATH})
endforeach()
unset(SRC_FILE_REALPATH)
unset(SRC_DIRPATH_REALPATH)
unset(PROJECT_SERVER_FRAME_CONFIG_SRC_ORIGIN)

source_group_by_dir(PROJECT_SERVER_FRAME_CONFIG_SRC_LIST)
if(NOT CMAKE_SYSTEM_NAME MATCHES "Windows|MinGW|WindowsStore" AND (BUILD_SHARED_LIBS OR ATFRAMEWORK_USE_DYNAMIC_LIBRARY
                                                                  ))
  add_library(${PROJECT_SERVER_FRAME_LIB_LINK}-config SHARED ${PROJECT_SERVER_FRAME_CONFIG_SRC_LIST})
  set_target_properties(${PROJECT_SERVER_FRAME_LIB_LINK}-config PROPERTIES VERSION "${PROJECT_VERSION}"
                                                                           SOVERSION "${PROJECT_VERSION}")
else()
  add_library(${PROJECT_SERVER_FRAME_LIB_LINK}-config STATIC ${PROJECT_SERVER_FRAME_CONFIG_SRC_LIST})
  set_target_properties(${PROJECT_SERVER_FRAME_LIB_LINK}-config PROPERTIES VERSION "${PROJECT_VERSION}")
endif()

if(MSVC)
  set_property(TARGET "${PROJECT_SERVER_FRAME_LIB_LINK}-config" PROPERTY FOLDER "${PROJECT_NAME}")
endif()

target_include_directories(
  ${PROJECT_SERVER_FRAME_LIB_LINK}-config
  PUBLIC "$<BUILD_INTERFACE:${ATFRAMEWORK_LIBATAPP_REPO_DIR}/include>"
         "$<BUILD_INTERFACE:${ATFRAMEWORK_LIBATBUS_REPO_DIR}/include>"
         "$<BUILD_INTERFACE:${PROJECT_SERVER_FRAME_PROTOCOL_DIR}/include>"
         "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>"
  PRIVATE # TODO move to standalone directory
          "$<BUILD_INTERFACE:${PROJECT_SERVER_FRAME_PUBLIC_INCLUDE_DIRS}>")
target_compile_options(${PROJECT_SERVER_FRAME_LIB_LINK}-config PRIVATE ${PROJECT_COMMON_PRIVATE_COMPILE_OPTIONS})

add_dependencies(${PROJECT_SERVER_FRAME_LIB_LINK}-config ${PROJECT_SERVER_FRAME_LIB_LINK}-protocol)
target_link_libraries(
  ${PROJECT_SERVER_FRAME_LIB_LINK}-config
  INTERFACE ${PROJECT_SERVER_FRAME_LIB_LINK}-protocol
  PUBLIC ${ATFRAMEWORK_SERVICE_COMPONENT_LINK_NAME})

install(
  TARGETS ${PROJECT_SERVER_FRAME_LIB_LINK}-config
  EXPORT ${PROJECT_INSTALL_EXPORT_NAME}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}/${SERVER_FRAME_VCS_COMMIT_SHORT_SHA}"
  ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}/${SERVER_FRAME_VCS_COMMIT_SHORT_SHA}")
