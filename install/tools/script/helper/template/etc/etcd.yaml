<%!
    import os
    import common.project_utils as project
%># This is the configuration file for the etcd server. 
# Start etcd with --config-file flag

# Human-readable name for this member.
name: "${project.get_server_name()}-${hex(project.get_server_id())}"

# Path to the data directory.
data-dir: "${project.get_server_option('data_dir', '../data', 'SYSTEM_MACRO_CUSTOM_ETCD_DATA_DIR')}/" 

<%
etcd_wal_dir = project.get_server_option('wal_dir', '', 'SYSTEM_MACRO_CUSTOM_ETCD_WAL_DIR')
if not etcd_wal_dir:
    etcd_wal_dir = os.path.join(os.path.dirname(project.get_server_option('data_dir', '../data', 'SYSTEM_MACRO_CUSTOM_ETCD_DATA_DIR')), 'wal')
%>
# Path to the dedicated wal directory.
wal-dir: "${etcd_wal_dir}"

# Number of committed transactions to trigger a snapshot to disk.
snapshot-count: 3

# Time (in milliseconds) of a heartbeat interval.
heartbeat-interval: 1000

# Time (in milliseconds) for an election to timeout.
election-timeout: 5000

# Raise alarms when backend size exceeds the given quota. 0 means use the
# default quota.
quota-backend-bytes: 0

# List of comma separated URLs to listen on for peer traffic.
listen-peer-urls: http://0.0.0.0:${project.get_calc_listen_port(None, None, 'peer_port')}

# List of comma separated URLs to listen on for client traffic.
listen-client-urls: http://0.0.0.0:${project.get_calc_listen_port(None, None, 'client_port')}

# Maximum number of snapshot files to retain (0 is unlimited).
max-snapshots: 5

# Maximum number of wal files to retain (0 is unlimited).
max-wals: 5

# Comma-separated white list of origins for CORS (cross-origin resource sharing).
cors: ${"{0}".format(project.get_server_option('cors', ''))}

# List of this member's peer URLs to advertise to the rest of the cluster.
# The URLs needed to be a comma-separated list.
initial-advertise-peer-urls: http://${project.get_outer_ipv4()}:${project.get_calc_listen_port(None, None, 'peer_port')}

# List of this member's client URLs to advertise to the public.
# The URLs needed to be a comma-separated list.
advertise-client-urls: ${ "{0}".format(project.get_etcd_client_urls()) }

# Discovery URL used to bootstrap the cluster.
discovery:

# Valid values include 'exit', 'proxy'
discovery-fallback: 'proxy'

# HTTP proxy to use for traffic to discovery service.
discovery-proxy:

# DNS domain used to bootstrap initial cluster.
discovery-srv:

# Initial cluster configuration for bootstrapping.
initial-cluster: "${project.get_server_name()}-${hex(project.get_server_id())}=http://${project.get_outer_ipv4()}:${project.get_calc_listen_port(None, None, 'peer_port')}"

# Initial cluster token for the etcd cluster during bootstrap.
initial-cluster-token: ${project.get_server_option('init_cluster_token', '')}

# Initial cluster state ('new' or 'existing').
initial-cluster-state: 'new'

# auth-token: jwt,pub-key=server.rsa.crt,priv-key=server.rsa.key,sign-method=RS256,ttl=20m
# auth-token: jwt,pub-key=server.ecc.crt,priv-key=server.ecc.key,sign-method=ES256,ttl=20m
auth-token: simple

# Reject reconfiguration requests that would cause quorum loss.
strict-reconfig-check: false

# Accept etcd V2 client requests
enable-v2: false

# Enable runtime profiling data via HTTP server
enable-pprof: true

# Valid values include 'on', 'readonly', 'off'
proxy: 'off'

# Time (in milliseconds) an endpoint will be held in a failed state.
proxy-failure-wait: 5000

# Time (in milliseconds) of the endpoints refresh interval.
proxy-refresh-interval: 30000

# Time (in milliseconds) for a dial to timeout.
proxy-dial-timeout: 1000

# Time (in milliseconds) for a write to timeout.
proxy-write-timeout: 5000

# Time (in milliseconds) for a read to timeout.
proxy-read-timeout: 0

client-transport-security:
  # Path to the client server TLS cert file.
  cert-file:

  # Path to the client server TLS key file.
  key-file:

  # Enable client cert authentication.
  client-cert-auth: false

  # Path to the client server TLS trusted CA cert file.
  trusted-ca-file:

  # Client TLS using generated certificates
  auto-tls: false

peer-transport-security:
  # Path to the peer server TLS cert file.
  cert-file:

  # Path to the peer server TLS key file.
  key-file:

  # Enable peer client cert authentication.
  client-cert-auth: false

  # Path to the peer server TLS trusted CA cert file.
  trusted-ca-file:

  # Peer TLS using generated certificates.
  auto-tls: false

# Enable debug-level logging for etcd.
debug: false

logger: zap

# Specify 'stdout' or 'stderr' to skip journald logging even when running under systemd.
log-outputs: [ "${project.get_log_dir()}/${project.get_server_full_name()}.log" ]
log-level: info

# Force to create a new one member cluster.
force-new-cluster: false

auto-compaction-mode: periodic
auto-compaction-retention: "1"

enable-grpc-gateway: true