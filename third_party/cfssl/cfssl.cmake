# =========== third_party cfssl ==================

set(PROJECT_THIRD_PARTY_CFSSL_VERSION "1.6.4")
set(PROJECT_THIRD_PARTY_CFSSL_PACKAGE_DIR
    "${PROJECT_THIRD_PARTY_PACKAGE_DIR}/cfssl-v${PROJECT_THIRD_PARTY_CFSSL_VERSION}")

if(NOT PROJECT_THIRD_PARTY_CFSSL_RELEASE_MIRROR)
  set(PROJECT_THIRD_PARTY_CFSSL_RELEASE_MIRROR "https://github.com/cloudflare/cfssl/releases/download")
endif()

if(EXISTS "${PROJECT_THIRD_PARTY_CFSSL_PACKAGE_DIR}/version")
  file(READ "${PROJECT_THIRD_PARTY_CFSSL_PACKAGE_DIR}/version" PROJECT_THIRD_PARTY_CFSSL_EXISTED_VERSION)
else()
  set(PROJECT_THIRD_PARTY_CFSSL_EXISTED_VERSION "")
endif()

if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
  set(PROJECT_THIRD_PARTY_CFSSL_PREBUILT_FILES "${PROJECT_THIRD_PARTY_CFSSL_PACKAGE_DIR}/cfssl_windows_amd64.exe"
                                               "${PROJECT_THIRD_PARTY_CFSSL_PACKAGE_DIR}/cfssljson_windows_amd64.exe")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  set(PROJECT_THIRD_PARTY_CFSSL_PREBUILT_FILES "${PROJECT_THIRD_PARTY_CFSSL_PACKAGE_DIR}/cfssl_darwin_amd64"
                                               "${PROJECT_THIRD_PARTY_CFSSL_PACKAGE_DIR}/cfssljson_darwin_amd64")
else()
  set(PROJECT_THIRD_PARTY_CFSSL_PREBUILT_FILES "${PROJECT_THIRD_PARTY_CFSSL_PACKAGE_DIR}/cfssl_linux_amd64"
                                               "${PROJECT_THIRD_PARTY_CFSSL_PACKAGE_DIR}/cfssljson_linux_amd64")
endif()

set(PROJECT_THIRD_PARTY_CFSSL_NEED_DOWNLOAD FALSE)
foreach(PROJECT_THIRD_PARTY_CFSSL_CHECK_FILE IN LISTS PROJECT_THIRD_PARTY_CFSSL_PREBUILT_FILES)
  if(NOT EXISTS "${PROJECT_THIRD_PARTY_CFSSL_CHECK_FILE}")
    set(PROJECT_THIRD_PARTY_CFSSL_NEED_DOWNLOAD TRUE)
    break()
  endif()
endforeach()

if(PROJECT_THIRD_PARTY_CFSSL_NEED_DOWNLOAD OR NOT PROJECT_THIRD_PARTY_CFSSL_EXISTED_VERSION STREQUAL
                                              PROJECT_THIRD_PARTY_CFSSL_VERSION)
  file(MAKE_DIRECTORY "${PROJECT_THIRD_PARTY_CFSSL_PACKAGE_DIR}")
  if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    findconfigurepackagedownloadfile(
      "${PROJECT_THIRD_PARTY_CFSSL_RELEASE_MIRROR}/v${PROJECT_THIRD_PARTY_CFSSL_VERSION}/cfssljson_${PROJECT_THIRD_PARTY_CFSSL_VERSION}_windows_amd64.exe"
      "${PROJECT_THIRD_PARTY_CFSSL_PACKAGE_DIR}/cfssljson_windows_amd64.exe")
    findconfigurepackagedownloadfile(
      "${PROJECT_THIRD_PARTY_CFSSL_RELEASE_MIRROR}/v${PROJECT_THIRD_PARTY_CFSSL_VERSION}/cfssl_${PROJECT_THIRD_PARTY_CFSSL_VERSION}_windows_amd64.exe"
      "${PROJECT_THIRD_PARTY_CFSSL_PACKAGE_DIR}/cfssl_windows_amd64.exe")
  elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    findconfigurepackagedownloadfile(
      "${PROJECT_THIRD_PARTY_CFSSL_RELEASE_MIRROR}/v${PROJECT_THIRD_PARTY_CFSSL_VERSION}/cfssljson_${PROJECT_THIRD_PARTY_CFSSL_VERSION}_darwin_amd64"
      "${PROJECT_THIRD_PARTY_CFSSL_PACKAGE_DIR}/cfssljson_darwin_amd64")
    findconfigurepackagedownloadfile(
      "${PROJECT_THIRD_PARTY_CFSSL_RELEASE_MIRROR}/v${PROJECT_THIRD_PARTY_CFSSL_VERSION}/cfssl_${PROJECT_THIRD_PARTY_CFSSL_VERSION}_darwin_amd64"
      "${PROJECT_THIRD_PARTY_CFSSL_PACKAGE_DIR}/cfssl_darwin_amd64")
  else()
    findconfigurepackagedownloadfile(
      "${PROJECT_THIRD_PARTY_CFSSL_RELEASE_MIRROR}/v${PROJECT_THIRD_PARTY_CFSSL_VERSION}/cfssljson_${PROJECT_THIRD_PARTY_CFSSL_VERSION}_linux_amd64"
      "${PROJECT_THIRD_PARTY_CFSSL_PACKAGE_DIR}/cfssljson_linux_amd64")
    findconfigurepackagedownloadfile(
      "${PROJECT_THIRD_PARTY_CFSSL_RELEASE_MIRROR}/v${PROJECT_THIRD_PARTY_CFSSL_VERSION}/cfssl_${PROJECT_THIRD_PARTY_CFSSL_VERSION}_linux_amd64"
      "${PROJECT_THIRD_PARTY_CFSSL_PACKAGE_DIR}/cfssl_linux_amd64")
  endif()

  foreach(PROJECT_THIRD_PARTY_CFSSL_CHECK_FILE IN LISTS PROJECT_THIRD_PARTY_CFSSL_PREBUILT_FILES)
    if(NOT EXISTS "${PROJECT_THIRD_PARTY_CFSSL_CHECK_FILE}")
      message(FATAL_ERROR "Failed to download cfssl into ${PROJECT_THIRD_PARTY_CFSSL_PACKAGE_DIR}")
    endif()
  endforeach()

  project_make_executable(${PROJECT_THIRD_PARTY_CFSSL_PREBUILT_FILES})
  file(WRITE "${PROJECT_THIRD_PARTY_CFSSL_PACKAGE_DIR}/version" "${PROJECT_THIRD_PARTY_CFSSL_VERSION}")
endif()
